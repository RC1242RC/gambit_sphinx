##########################################################################
## GAMBIT configuration for an ultra-minimal Python test scan.
##
## Only needs ExampleBit_A, ExampleBit_B and built-in random scanner.
##########################################################################


Parameters:
  CMSSM:
    A0: 10
    M0: 1000
    M12: 1000
    SignMu: 1
    TanBeta:
      range: [10, 50]

  NormalDist:
    mu:
      range: [15, 30]
    sigma:
      range: [0, 5]

Priors:

  # None needed: flat priors are automatically generated for mu and sigma


Printer:

  printer: cout

Scanner:

  use_scanner: random

  scanners:

    random:
      plugin: random
      point_number: 10
      like: dummy

ObsLikes:

  - purpose:      dummy
    capability:   nevents
    type:         double

  - purpose:      observable
    capability:   nevents_postcuts
    module:       ExampleBit_B


Rules:

  - capability:  nevents_postcuts
    backends:
    - {capability: awesomeness, backend: LibThird, version: 1.2}
    - {capability: someFunction, backend: LibThird, version: 1.2}
    - {capability: SomeInt, backend: LibThird, version: 1.2}

  - capability:  function_pointer
    backends:
    - {function: externalFunction}

  - capability: nevents
    type: int
    function: event_count
    module: ExampleBit_B

  - capability: xsection
    function: test_sigma

  - capability: particle_id
    function: particle_identity
    module: ExampleBit_B

Logger:

  redirection:
    [Default]      : "default.log"
    [ExampleBit_A] : "ExampleBit_A.log"
    [Scanner]      : "Scanner.log"


KeyValues:

  default_output_path: "runs/Python_test"

  rng:
    generator: ranlux48
    seed: -1

  likelihood:
    model_invalid_for_lnlike_below: -1e6

  debug: true
