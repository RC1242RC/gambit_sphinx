# GAMBIT central type equivalency database
#
# GAMBIT will parse this file and use it to define
# type equivalency classes for use in performing
# dependency resolution.
#
# Add additional equivalencies/typedefs by hand
# here if you want them to be considered during
# dependency resolution.
#
# A few things to keep in mind:
#
# - You can place as many entries as you want
#   in each class, just make sure to put them
#   in the same square-bracket-enclosed list.
#
# - Any type with a comma, brackets or other
#   funky character in it needs to be enclosed
#   in quotation marks.
#
# - Don't add comments except on their own lines,
#   like these (Python's YAML parser is buggy).
#
# - Namespace issues with BOSSed types and the
#   Gambit namespace itself both get dealt with
#   automatically, so there is no need to add
#   entries to account for those.

# String conveniences
[std::string, str]
["std::pair<str, str>", sspair]

# Floating point conveniences
["std::pair<double, double>", ddpair]

# String-to-double map
["std::map<std::string,double>", "std::map<str,double>", map_str_dbl]

# Int to double triplet map
["std::map<int, triplet<double> >", map_int_triplet_dbl]

#Int pair to double map
["std::map< std::pair < int, int >", double> map_intpair_dbl]

# Fortran data types
[int32_t, Flogical]
[bool, Flogical1]
[char, Fcharacter]
[int, Finteger]
[short, Finteger2]
[long int, Finteger4]
[long long, Finteger8]
[float, Freal, Freal4]
[double, Fdouble, Fdouble_precision, Fdoubleprecision, Freal8]
[long double, Freal16]
[Fcomplex, FcomplexT<float>, FcomplexT<Freal>, FcomplexT<Freal4>, Fcomplex8]
[Fdouble_complex, FcomplexT<double>, FcomplexT<Fdouble>, FcomplexT<Fdouble_precision>, FcomplexT<Fdoubleprecision>, Fcomplex16]
[Flongdouble_complex, FcomplexT<long double>, FcomplexT<Freal16>]

# Mathematica data types
[void, MVoid]
[int, MInteger]
[const int, const MInteger]
[double, MReal]
[const double, const MReal]
[bool, MBool]
[const bool, const MBool]
[char, MChar]
[const char, const MChar]
[std::string, MString]
[const std::string, const MString]

# Neutrino yield function pointer
["double(*)(double&, int&, void*)", nuyield_functype]
