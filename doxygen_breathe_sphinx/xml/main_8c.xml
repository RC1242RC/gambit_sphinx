<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="main_8c" kind="file" language="C++">
    <compoundname>main.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">dlfcn.h</includes>
    <includes local="yes">VandP.h</includes>
    <includes local="yes">dynamic_cs.h</includes>
    <includes local="yes">fcompare.h</includes>
    <incdepgraph>
      <node id="4">
        <label>sys/stat.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="8">
        <label>dynamic_cs.h</label>
      </node>
      <node id="1">
        <label>main.c</label>
        <link refid="main_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>unistd.h</label>
      </node>
      <node id="7">
        <label>VandP.h</label>
      </node>
      <node id="9">
        <label>fcompare.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="6">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structprocRec" prot="public">procRec</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="main_8c_1a3a6d7707a73e7107c4a5ffcbda778be9" prot="public" static="no">
        <type>struct <ref refid="structprocRec" kindref="compound">procRec</ref></type>
        <definition>typedef struct procRec procRec</definition>
        <argsstring></argsstring>
        <name>procRec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="161" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="main_8c_1aebe5398f5f936d473696d89bb1340478" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* libDir</definition>
        <argsstring></argsstring>
        <name>libDir</name>
        <initializer>=NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="17" column="8" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a9b0fc569a5f2d9618d76d89d827d1b8f" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* modelDir</definition>
        <argsstring></argsstring>
        <name>modelDir</name>
        <initializer>=NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="18" column="8" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1acd1a295f3f8960cfcc6ab7a1a7c29e8d" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* compDir</definition>
        <argsstring></argsstring>
        <name>compDir</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="19" column="8" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1ac8d52ebeabae8eb564a1818dc0327b15" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* calchepDir</definition>
        <argsstring></argsstring>
        <name>calchepDir</name>
        <initializer>=NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="20" column="8" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a9f4dc7916db343981f53d783e758703b" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int modelNum</definition>
        <argsstring></argsstring>
        <name>modelNum</name>
        <initializer>=0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="21" column="7" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a92cbe3bdfee31a142361620ad649a109" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int ForceUG</definition>
        <argsstring></argsstring>
        <name>ForceUG</name>
        <initializer>=0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="22" column="5" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1a1468f7fbaca6eb7cffb33661d817d3c8" prot="public" static="yes" mutable="no">
        <type><ref refid="structprocRec" kindref="compound">procRec</ref> *</type>
        <definition>procRec* allProc</definition>
        <argsstring></argsstring>
        <name>allProc</name>
        <initializer>=NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="163" column="17" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1aa6a666e32594794e8b4186fa3bb652e9" prot="public" static="no" mutable="no">
        <type>decayTableStr *</type>
        <definition>decayTableStr* decayTable</definition>
        <argsstring></argsstring>
        <name>decayTable</name>
        <initializer>=NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="220" column="15" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8c_1aafb843f88ffe50823f2dd1c78d2d067b" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int nPrtcls_old</definition>
        <argsstring></argsstring>
        <name>nPrtcls_old</name>
        <initializer>=0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="221" column="12" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="221" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="main_8c_1a3c2708aff1e9ef2d2348f872f4cd9c45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int prepareWorkPlace</definition>
        <argsstring>(void)</argsstring>
        <name>prepareWorkPlace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="24" column="6" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="24" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a042b81513cce8b133ce7e3a58614e4d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* pdg2name</definition>
        <argsstring>(int pdg)</argsstring>
        <name>pdg2name</name>
        <param>
          <type>int</type>
          <declname>pdg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="67" column="7" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="67" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1aa5ba48471d3d75860425e38b44cfd580" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* pdg2mass</definition>
        <argsstring>(int pdg)</argsstring>
        <name>pdg2mass</name>
        <param>
          <type>int</type>
          <declname>pdg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="80" column="6" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="80" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a079af326cc9ddf31f2b2d792e3f7be71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* pdg2width</definition>
        <argsstring>(int pdg)</argsstring>
        <name>pdg2width</name>
        <param>
          <type>int</type>
          <declname>pdg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="94" column="6" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="94" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a51b4bfb281c0f8f2dd8f76cd769271f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int checkWorkPlace</definition>
        <argsstring>(void)</argsstring>
        <name>checkWorkPlace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="108" column="6" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="108" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ab4e14ef2553fc5e71808d2a5907290ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int checkMtime</definition>
        <argsstring>(char *fname)</argsstring>
        <name>checkMtime</name>
        <param>
          <type>char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="136" column="6" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="136" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a9f37e24f38bfe15329cdbb75983654e8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* newSymbol</definition>
        <argsstring>(void *handle, char *name)</argsstring>
        <name>newSymbol</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="165" column="13" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="165" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a2c193472d75f5e5bc7ef89325003e524" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dClose</definition>
        <argsstring>(void *handle)</argsstring>
        <name>dClose</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="176" column="13" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="176" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a272efd9d2aab124b16df77ce69e11af1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>REAL *</type>
        <definition>REAL* varAddress</definition>
        <argsstring>(char *name)</argsstring>
        <name>varAddress</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="185" column="7" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="185" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a0af9f106391f127e7e7ed752e22d92b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int passParameters</definition>
        <argsstring>(numout *cc)</argsstring>
        <name>passParameters</name>
        <param>
          <type>numout *</type>
          <declname>cc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="191" column="5" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="191" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ad23734dbd3a31428f8d48f5fb17b1fc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delAllLib</definition>
        <argsstring>(void)</argsstring>
        <name>delAllLib</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="205" column="6" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="205" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1afa837b6d1773d91a1872c5b717868b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cleanDecayTable</definition>
        <argsstring>(void)</argsstring>
        <name>cleanDecayTable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="222" column="6" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="222" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1ab72f0e6351970ec182ac850a6974c183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pTabPos</definition>
        <argsstring>(char *name)</argsstring>
        <name>pTabPos</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="235" column="5" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="235" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a15b52c593b2d2a0217ee16076f813a19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pMass</definition>
        <argsstring>(char *name)</argsstring>
        <name>pMass</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="246" column="8" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="246" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1adc1b8e9c4015ee2b1bc21681b69e7adf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pWidth</definition>
        <argsstring>(char *name, txtList *LL)</argsstring>
        <name>pWidth</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>txtList *</type>
          <declname>LL</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="258" column="8" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="258" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a3f42674b6112e59275359cf31caaf680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double aWidth</definition>
        <argsstring>(char *name)</argsstring>
        <name>aWidth</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="392" column="8" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="392" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a99e373be01538c62f58af32565e6a8c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int pListEq</definition>
        <argsstring>(char *txt1, char *txt2)</argsstring>
        <name>pListEq</name>
        <param>
          <type>char *</type>
          <declname>txt1</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>txt2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="394" column="12" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="394" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a5d89051c6b28cf9e352023e1e5a26e17" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>numout *</type>
        <definition>static numout* loadLib</definition>
        <argsstring>(void *handle, char *lib)</argsstring>
        <name>loadLib</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>lib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="420" column="15" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="420" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a33f9ea0ed37f2d0856e9bfc704388522" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* dLoad</definition>
        <argsstring>(char *libName)</argsstring>
        <name>dLoad</name>
        <param>
          <type>char *</type>
          <declname>libName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="446" column="14" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="446" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="main_8c_1a420c18e451da933f88ff1dbc8eac4178" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>numout *</type>
        <definition>numout* getMEcode</definition>
        <argsstring>(int twidth, int Gauge, char *Process, char *excludeVirtual, char *excludeOut, char *lib)</argsstring>
        <name>getMEcode</name>
        <param>
          <type>int</type>
          <declname>twidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Gauge</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>Process</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>excludeVirtual</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>excludeOut</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>lib</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" line="461" column="7" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c" bodystart="461" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__hpux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;dl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dlfcn.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;VandP.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dynamic_cs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;fcompare.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*<sp/>libDir=NULL;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*<sp/>modelDir=NULL;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*<sp/>compDir<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*<sp/>calchepDir=NULL;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>modelNum=0;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ForceUG=0;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>prepareWorkPlace(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{<sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>command;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>buf;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err,len,mknew;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!compDir)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>-1;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/>mknew=stat(compDir,&amp;buf);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/>len=strlen(compDir)+500;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(modelDir)<sp/>len+=strlen(modelDir);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/>command=malloc(len);<sp/><sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mknew)<sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>dir[3]={</highlight><highlight class="stringliteral">&quot;tmp&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;results&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;models&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mkdir(compDir,<sp/>00755))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-3;<sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;3;i++)<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(command,</highlight><highlight class="stringliteral">&quot;%s/%s&quot;</highlight><highlight class="normal">,compDir,dir[i]);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mkdir(command,00755);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(modelDir<sp/>&amp;&amp;<sp/>modelNum)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(command,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;for<sp/>FILE<sp/>in<sp/>vars<sp/>func<sp/>prtcls<sp/>lgrng<sp/>extlib\n<sp/>do\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>cp<sp/>%s/\&quot;$FILE\&quot;%d.mdl<sp/>%s/models/\&quot;$FILE\&quot;1.mdl\n&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;done\n&quot;</highlight><highlight class="normal">,<sp/>modelDir,modelNum,<sp/><sp/>compDir);<sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>system(command);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>free(command);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;}<sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sprintf(command,<sp/></highlight><highlight class="stringliteral">&quot;dName=%s\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;for<sp/>FILE<sp/>in<sp/>$dName/tmp/*<sp/>$dName/results/*\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;do\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>if(test<sp/>!<sp/>-d<sp/>$FILE)<sp/>then\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>rm<sp/>-f<sp/>$FILE\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>fi\n&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;done\n&quot;</highlight><highlight class="normal">,compDir);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>system(command);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/>free(command);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mknew;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>pdg2name(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pdg)</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pdg==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;nModelParticles;i++)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ModelPrtcls[i].NPDG==pdg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ModelPrtcls[i].name;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ModelPrtcls[i].NPDG==-pdg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ModelPrtcls[i].aname;}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}<sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>name<sp/>of<sp/>the<sp/>mass<sp/>parameter<sp/>for<sp/>particle<sp/>of<sp/>given<sp/>PDG<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pdg2mass(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pdg)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pdg==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;nModelParticles;<sp/>i++)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ModelPrtcls[i].NPDG==pdg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ModelPrtcls[i].mass;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ModelPrtcls[i].NPDG==-pdg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ModelPrtcls[i].mass;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>name<sp/>of<sp/>the<sp/>width<sp/>parameter<sp/>for<sp/>particle<sp/>of<sp/>given<sp/>PDG<sp/>code.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pdg2width(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pdg)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pdg<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;nModelParticles;<sp/>i++)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ModelPrtcls[i].NPDG==pdg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ModelPrtcls[i].width;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ModelPrtcls[i].NPDG==-pdg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ModelPrtcls[i].width;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>checkWorkPlace(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>n1=malloc(strlen(modelDir)+50);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>n2=malloc(strlen(compDir)+50);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fList[5]=<sp/>{</highlight><highlight class="stringliteral">&quot;vars&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;prtcls&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;extlib&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;func&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;lgrng&quot;</highlight><highlight class="normal">,};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;5;i++)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>{<sp/>sprintf(n1,</highlight><highlight class="stringliteral">&quot;%s/%s%d.mdl&quot;</highlight><highlight class="normal">,modelDir,fList[i],modelNum);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(n2,</highlight><highlight class="stringliteral">&quot;%s/models/%s1.mdl&quot;</highlight><highlight class="normal">,compDir,fList[i]);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fcompare(n1,n2))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>free(n1);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>free(n2);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i==5)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(modelDir<sp/>&amp;&amp;<sp/>modelNum)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>command=malloc(strlen(modelDir)+strlen(compDir)+200);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>sprintf(command,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;for<sp/>FILE<sp/>in<sp/>vars<sp/>func<sp/>prtcls<sp/>lgrng<sp/>extlib\n<sp/>do\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>cp<sp/>%s/\&quot;$FILE\&quot;%d.mdl<sp/>%s/models/\&quot;$FILE\&quot;1.mdl\n&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;done\n&quot;</highlight><highlight class="normal">,<sp/>modelDir,modelNum,<sp/><sp/>compDir);<sp/><sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>system(command);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>free(command);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>delAllLib();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}<sp/><sp/></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>checkMtime(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>fname)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,L;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>time_t<sp/>tt;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>buff;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>mf[4]={</highlight><highlight class="stringliteral">&quot;vars&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;func&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;prtcls&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;lgrng&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mfname;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(modelDir==NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>stat(fname,&amp;buff);<sp/>tt=buff.st_mtime;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>L=strlen(modelDir)+20;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>mfname=malloc(strlen(modelDir)+20);<sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;4;i++)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>{<sp/>sprintf(mfname,</highlight><highlight class="stringliteral">&quot;%s/%s%d.mdl&quot;</highlight><highlight class="normal">,modelDir,mf[i],modelNum);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>stat(mfname,&amp;buff);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(buff.st_mtime<sp/>&gt;<sp/>tt)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>free(mfname);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i&lt;4)<sp/>{unlink(fname);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="structprocRec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/><sp/></highlight><highlight class="normal"><ref refid="structprocRec" kindref="compound">procRec</ref><sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal">{<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structprocRec" kindref="compound">procRec</ref><sp/><sp/>*<sp/>next;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>libname;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>numout<sp/>*<sp/>cc;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}<sp/><sp/><ref refid="structprocRec" kindref="compound">procRec</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><sp/><ref refid="structprocRec" kindref="compound">procRec</ref>*<sp/>allProc=NULL;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>newSymbol(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*handle,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__hpux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>addr;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(shl_findsym((shl_t*)&amp;handle,name,TYPE_UNDEFINED,&amp;addr))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addr;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dlsym(handle,<sp/>name);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dClose(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>handle)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__hpux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shl_unload(handle);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dlclose(handle);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">REAL<sp/>*<sp/>varAddress(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)</highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;nModelVars+nModelFunc;i++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!strcmp(name,varNames[i]))</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>varValues+i;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>passParameters(numout*cc)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=1;i&lt;=cc-&gt;interface-&gt;nvar;i++)<sp/></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cc-&gt;link[i])<sp/></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc-&gt;interface-&gt;va[i]=*(cc-&gt;link[i]);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cc-&gt;interface-&gt;calcFunc()&gt;0)<sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;cannot<sp/>calculate<sp/>constr\n&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>delAllLib(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><ref refid="structprocRec" kindref="compound">procRec</ref>*<sp/>curProc=allProc;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(curProc)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>{<sp/><sp/><ref refid="structprocRec" kindref="compound">procRec</ref>*tmp=curProc;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>free(curProc-&gt;libname);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>free(curProc-&gt;cc-&gt;link);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dClose(curProc-&gt;cc-&gt;handle);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>free(curProc-&gt;cc);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>curProc=curProc-&gt;next;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>free(tmp);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>allProc=NULL;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">decayTableStr*<sp/>decayTable=NULL;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPrtcls_old=0;<sp/></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanDecayTable(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(decayTable)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;nPrtcls_old;i++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;2;j++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(decayTable[i].pdList[j])<sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cleanTxtList(decayTable[i].pdList[j]);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/>decayTable=realloc(decayTable,<sp/>nModelParticles*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(decayTableStr));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/>nPrtcls_old=nModelParticles;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;nModelParticles;i++)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;2;j++)<sp/>decayTable[i].pdList[j]=NULL;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>decayTable[i].width=0;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>decayTable[i].status=0;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pTabPos(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>name)</highlight></codeline>
<codeline lineno="236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;nModelParticles;i++)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!strcmp(name,ModelPrtcls[i].name<sp/>))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/>i+1;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!strcmp(name,ModelPrtcls[i].aname))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(i+1);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pMass(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>name)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nm;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=pTabPos(name);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!n){printf(</highlight><highlight class="stringliteral">&quot;Wrong<sp/>particle<sp/>name<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,name);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>nm=ModelPrtcls[abs(n)-1].mass;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nm[0]==</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>{<sp/>REAL<sp/>*ma=varAddress(nm);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fabs(*ma);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pWidth(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/>txtList<sp/>*<sp/>LL)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>txtList<sp/>L,l,Lout;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>libName[100];</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum=0,width;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,i0,j,j0,nout;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>REAL<sp/>Qstat;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>REAL*Q=NULL;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;nModelParticles;i++)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pnames[2]={ModelPrtcls[i].name,ModelPrtcls[i].aname};</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;j&lt;2;j++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(name,pnames[j])==0)<sp/></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(decayTable[i].status==1)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(LL)<sp/>*LL=decayTable[i].pdList[j];</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decayTable[i].width;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(decayTable[i].status==-1)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(LL)<sp/>*LL=NULL;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j!=2)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>i0=i,j0=j;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i0==nModelParticles)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;%s<sp/>out<sp/>of<sp/>model<sp/>particles\n&quot;</highlight><highlight class="normal">,name);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(LL)<sp/>*LL=NULL;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>{<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pdg,pdg0,Len,decay[10];</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>br;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>pdg0=ModelPrtcls[i0].NPDG;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(j0)<sp/>pdg0=-pdg0;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=1;<sp/>allDecays(i,0,&amp;pdg,&amp;Len,decay,&amp;width,&amp;br)<sp/>;i++)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(abs(pdg)==abs(pdg0))</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>txtListStr*l,*L=NULL;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l=malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(txtListStr));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decayTable[i0].width=width;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decayTable[i0].status=1;<sp/><sp/></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=1;<sp/>allDecays(i,j,&amp;pdg,&amp;Len,decay,&amp;width,&amp;br)<sp/>;j++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(br&gt;0)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*ch;<sp/><sp/></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l=malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(txtListStr));</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l-&gt;txt=malloc(100);<sp/></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l-&gt;next=L;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch=pdg2name(pdg);<sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ch)<sp/>sprintf(l-&gt;txt,</highlight><highlight class="stringliteral">&quot;%E<sp/><sp/>%s<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal">,br,ch);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>sprintf(l-&gt;txt,</highlight><highlight class="stringliteral">&quot;%E<sp/><sp/>#%d<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal">,br,pdg);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch=pdg2name(decay[0]);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ch)<sp/><sp/>sprintf(l-&gt;txt+strlen(l-&gt;txt),</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,ch);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/>sprintf(l-&gt;txt+strlen(l-&gt;txt),</highlight><highlight class="stringliteral">&quot;#%d&quot;</highlight><highlight class="normal">,decay[0]);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(k=1;k&lt;Len;k++)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>ch=pdg2name(decay[k]);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ch)sprintf(l-&gt;txt+strlen(l-&gt;txt),</highlight><highlight class="stringliteral">&quot;,<sp/>%s&quot;</highlight><highlight class="normal">,ch);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>sprintf(l-&gt;txt+strlen(l-&gt;txt),</highlight><highlight class="stringliteral">&quot;,<sp/>#%d&quot;</highlight><highlight class="normal">,decay[k]);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L=l;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pdg0==pdg)<sp/></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/>decayTable[i0].pdList[j0]=L;<sp/></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(ModelPrtcls[i0].name,ModelPrtcls[i0].aname))</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decayTable[i0].pdList[1-j0]=conBrList(L);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>decayTable[i0].pdList[1-j0]=L;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(ModelPrtcls[i0].name,ModelPrtcls[i0].aname))</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decayTable[i0].pdList[j0]=conBrList(L);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(LL)<sp/>*LL=decayTable[i0].pdList[j0];</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>width;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>decayTable[i0].status=-1;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Q==NULL)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;nModelVars;i++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(varNames[i],</highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal">)==0){<sp/>Q=<sp/>varValues+i;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Q)<sp/>{<sp/>Qstat=*Q;<sp/>setQforParticle(Q,name);}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>width=decay22List(name,&amp;L);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(L)<sp/></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(LL)<sp/>*LL=L;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>decayTable[i0].pdList[j0]=L;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(ModelPrtcls[i0].name,ModelPrtcls[i0].aname))<sp/></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decayTable[i0].pdList[1-j0]=conBrList(L);<sp/></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>decayTable[i0].width=width;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>decayTable[i0].status=1;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Q)<sp/>{*Q=Qstat;<sp/>calcMainFunc();}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>width;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>Lout=NULL;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>L=<sp/>makeDecayList(name,3);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>massFilter(pMass(name),&amp;L);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>gammaGluFilter(&amp;L);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(L==NULL)<sp/></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>{<sp/>L=<sp/>makeDecayList(name,4);<sp/><sp/></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>massFilter(pMass(name),&amp;L);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>gammaGluFilter(&amp;L);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>nout=4;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>nout=3;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(sum=0,l=L;l;l=l-&gt;next)<sp/><sp/></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>{<sp/>numout*<sp/>cc;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err=0;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>txtList<sp/>newr;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>process2Lib(l-&gt;txt<sp/>,libName);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>cc=getMEcode(0,ForceUG,l-&gt;txt,NULL,</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,libName);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!cc)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nout==3)<sp/>width=width13(cc,<sp/>1,<sp/>&amp;err);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>width=width14(cc,<sp/>&amp;err);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(width<sp/>&gt;0)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum+=width;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newr=malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(txtListStr));</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newr-&gt;next=Lout;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Lout=newr;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newr-&gt;txt=malloc(strlen(l-&gt;txt)+20);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(newr-&gt;txt,</highlight><highlight class="stringliteral">&quot;%E<sp/><sp/>%s&quot;</highlight><highlight class="normal">,width,l-&gt;txt);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>cleanTxtList(L);<sp/></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Lout)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(L=Lout;L;L=L-&gt;next)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buff[100];</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>sscanf(L-&gt;txt,</highlight><highlight class="stringliteral">&quot;%lf<sp/>%[^\n]&quot;</highlight><highlight class="normal">,&amp;width,buff);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(L-&gt;txt,</highlight><highlight class="stringliteral">&quot;%E<sp/>%s&quot;</highlight><highlight class="normal">,width/sum,buff);<sp/><sp/></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(LL)<sp/>*LL=Lout;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>decayTable[i0].pdList[j0]=Lout;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(ModelPrtcls[i0].name,ModelPrtcls[i0].aname))<sp/></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decayTable[i0].pdList[1-j0]=conBrList(Lout);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>decayTable[i0].width=sum;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>decayTable[i0].status=1;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Q)<sp/>{<sp/>*Q=Qstat;<sp/>calcMainFunc();}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aWidth(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pWidth(name,NULL);}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pListEq(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>txt2)<sp/><sp/></highlight></codeline>
<codeline lineno="395"><highlight class="normal">{<sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buff[100];</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>rd1[10][10];</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>rd2[10][10];</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n1,n2,i1,i2;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ch;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/>strcpy(buff,txt1);<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((ch=strchr(buff,</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">)))<sp/>ch[0]=</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/>n1=sscanf(buff,</highlight><highlight class="stringliteral">&quot;%s<sp/>%s<sp/>%s<sp/>%s<sp/>%s<sp/>%s<sp/>%s<sp/>%s<sp/>%s<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/>rd1[0],rd1[1],rd1[2],rd1[3],rd1[4],rd1[5],rd1[6],rd1[7],rd1[8],rd1[9]);<sp/></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/>strcpy(buff,txt2);<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((ch=strchr(buff,</highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">)))<sp/>ch[0]=</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/>n2=sscanf(buff,</highlight><highlight class="stringliteral">&quot;%s<sp/>%s<sp/>%s<sp/>%s<sp/>%s<sp/>%s<sp/>%s<sp/>%s<sp/>%s<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/>rd2[0],rd2[1],rd2[2],rd2[3],rd2[4],rd2[5],rd2[6],rd2[7],rd2[8],rd2[9]);<sp/></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(n1!=n2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i1=0;i1&lt;n1;i1++)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i2=0;i2&lt;n2;i2++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(rd1[i1],rd2[i2])==0){rd2[i2][0]=0;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i2==n2)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>numout*<sp/>loadLib(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>handle,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>lib)</highlight></codeline>
<codeline lineno="421"><highlight class="normal">{<sp/>numout<sp/>*<sp/>cc=malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(numout));</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name[100];</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!handle)<sp/>{free(cc);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>cc-&gt;handle=handle;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>sprintf(name,</highlight><highlight class="stringliteral">&quot;interface_%s&quot;</highlight><highlight class="normal">,lib);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>cc-&gt;interface=newSymbol(handle,<sp/>name);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!cc-&gt;interface<sp/>||<sp/>cc-&gt;interface-&gt;nprc==0){free(cc);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>{<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cc-&gt;init=0;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cc-&gt;Q=NULL,<sp/>cc-&gt;SC=NULL;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cc-&gt;link=malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*)*(1+cc-&gt;interface-&gt;nvar));</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cc-&gt;link[0]=NULL;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=1;i&lt;=cc-&gt;interface-&gt;nvar;i++)<sp/></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name=cc-&gt;interface-&gt;varName[i];</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc-&gt;link[i]=varAddress(name);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cc-&gt;link==NULL)<sp/>printf(</highlight><highlight class="stringliteral">&quot;No<sp/>link<sp/>for<sp/>%s\n&quot;</highlight><highlight class="normal">,name);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(name,</highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal">)==0)<sp/>cc-&gt;Q=cc-&gt;interface-&gt;va+i;<sp/></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(name,</highlight><highlight class="stringliteral">&quot;SC&quot;</highlight><highlight class="normal">)==0)<sp/>cc-&gt;SC=cc-&gt;interface-&gt;va+i;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>*(cc-&gt;interface-&gt;aWidth)=&amp;aWidth;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cc;</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>dLoad(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>libName)</highlight></codeline>
<codeline lineno="447"><highlight class="normal">{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*q;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(access(libName,R_OK))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__hpux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>shl_load(libName,0,0L);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/>q=<sp/>dlopen(libName,<sp/>RTLD_NOW);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!q)<sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,dlerror());<sp/></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal">numout*getMEcode(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>twidth,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Gauge,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*Process,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*excludeVirtual,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*excludeOut,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*lib)</highlight></codeline>
<codeline lineno="462"><highlight class="normal">{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proclibf,*command;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>handle=NULL;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">=0;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/>numout<sp/>*<sp/>cc;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><ref refid="structprocRec" kindref="compound">procRec</ref>*test;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Len;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>lib_;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/>lib_=malloc(strlen(lib)+4);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Gauge)<sp/>sprintf(lib_,</highlight><highlight class="stringliteral">&quot;%s_u&quot;</highlight><highlight class="normal">,lib);<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/>strcpy(lib_,lib);<sp/></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(test=allProc;test;<sp/>test=test-&gt;next)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(lib_,test-&gt;libname)==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test-&gt;cc;}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/>Len=strlen(compDir)+strlen(lib)+strlen(libDir)+300;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/>proclibf=malloc(Len);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Process)<sp/>Len+=strlen(Process);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(excludeVirtual)<sp/>Len+=strlen(excludeVirtual);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(excludeOut)<sp/>Len+=strlen(excludeOut);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/>command=malloc(Len);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/>sprintf(proclibf,</highlight><highlight class="stringliteral">&quot;%s/%s.so&quot;</highlight><highlight class="normal">,libDir,lib_);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(access(proclibf,R_OK)==0<sp/>&amp;&amp;<sp/>checkMtime(proclibf)==0)<sp/>handle=dLoad(proclibf);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!handle)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;Process[i]==</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;i++);<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Process[i]==0)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(command);<sp/>free(proclibf);<sp/>free(lib_);<sp/></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!handle)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>options[20];</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>GaugeCh[4];</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;<sp/><sp/></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delWorkDir;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(twidth)<sp/>strcpy(options,</highlight><highlight class="stringliteral">&quot;5[[{[{}&quot;</highlight><highlight class="normal">);</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>strcpy(options,</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Gauge)<sp/>strcpy(GaugeCh,</highlight><highlight class="stringliteral">&quot;U&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>strcpy(GaugeCh,</highlight><highlight class="stringliteral">&quot;F&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delWorkDir=prepareWorkPlace();<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(command,</highlight><highlight class="stringliteral">&quot;cd<sp/>%s;<sp/>%s/sbin/newProcess<sp/>%s<sp/>%s<sp/>\&quot;%s\&quot;<sp/>%s<sp/>\&quot;%s\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compDir,<sp/>calchepDir,<sp/>lib_,<sp/>libDir,options,GaugeCh,Process);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(excludeVirtual)<sp/>sprintf(command+strlen(command),</highlight><highlight class="stringliteral">&quot;<sp/>\&quot;%s\&quot;&quot;</highlight><highlight class="normal">,excludeVirtual);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/>sprintf(command+strlen(command),</highlight><highlight class="stringliteral">&quot;<sp/>\&quot;\&quot;&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(excludeOut)<sp/>sprintf(command+strlen(command),</highlight><highlight class="stringliteral">&quot;<sp/>\&quot;%s\&quot;&quot;</highlight><highlight class="normal">,excludeOut);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret=system(command);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret&lt;0<sp/>||<sp/>WIFSIGNALED(ret)&gt;0<sp/>)<sp/>exit(10);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(delWorkDir<sp/>)cleanWorkPlace();</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ret==0)<sp/>handle=dLoad(proclibf);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>Can<sp/>not<sp/>compile<sp/>%s<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>Process);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(command);<sp/>free(proclibf);<sp/>free(lib_);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!handle)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/>Can<sp/>not<sp/>load<sp/>the<sp/>compiled<sp/>library<sp/>%s<sp/>\n&quot;</highlight><highlight class="normal">,proclibf);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(command);<sp/>free(proclibf);<sp/>free(lib_);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">=1;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/>cc=loadLib(handle,lib_);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!cc<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">)<sp/>dClose(handle);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cc)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/>test=(<ref refid="structprocRec" kindref="compound">procRec</ref>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structprocRec" kindref="compound">procRec</ref>));</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test-&gt;next=allProc;<sp/>allProc=test;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test-&gt;libname=(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>malloc(strlen(lib_)+1);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(test-&gt;libname,lib_);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test-&gt;cc=cc;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(</highlight><highlight class="keyword">new</highlight><highlight class="normal">)<sp/>dClose(handle);<sp/><sp/></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>free(command);<sp/>free(proclibf);<sp/>free(lib_);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cc;<sp/></highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>findVal(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>name,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>val)</highlight></codeline>
<codeline lineno="548"><highlight class="normal">{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;nModelVars+nModelFunc;i++)</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(name,varNames[i]))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>*val=varValues[i]<sp/>;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>findValW(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*name)</highlight></codeline>
<codeline lineno="560"><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(findVal(name,&amp;val))<sp/>{printf(</highlight><highlight class="stringliteral">&quot;<sp/>%s<sp/>not<sp/>found\n&quot;</highlight><highlight class="normal">,<sp/><sp/>name);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>procInfo2(numout*cc,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nsub,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**name,REAL*mass)</highlight></codeline>
<codeline lineno="566"><highlight class="normal">{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ntot=cc-&gt;interface-&gt;nin+cc-&gt;interface-&gt;nout;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nsub&lt;1<sp/>||<sp/>nsub&gt;<sp/>cc-&gt;interface-&gt;nprc)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(name)</highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;ntot<sp/>;i++)<sp/></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>name[i]=(cc-&gt;interface-&gt;pinf)(nsub,i+1,NULL,NULL);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mass)</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>{<sp/><sp/></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(passParameters(cc)){<sp/>printf(</highlight><highlight class="stringliteral">&quot;cannot<sp/>calculate<sp/>constr\n&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;i&lt;ntot<sp/>;i++)<sp/>cc-&gt;interface-&gt;pinf(nsub,i+1,mass+i,NULL);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/patches/calchep/3.6.27/main.c"/>
  </compounddef>
</doxygen>
