<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="postprocessor__2_80_80_2chunks_8hpp" kind="file" language="C++">
    <compoundname>postprocessor_2.0.0/chunks.hpp</compoundname>
    <includedby refid="postprocessor__2_80_80_2postprocessor_8hpp" local="yes">postprocessor.hpp</includedby>
    <invincdepgraph>
      <node id="2">
        <label>postprocessor.hpp</label>
        <link refid="postprocessor__2_80_80_2postprocessor_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>postprocessor_object.cpp</label>
        <link refid="postprocessor__2_80_80_2postprocessor__object_8cpp"/>
      </node>
      <node id="1">
        <label>chunks.hpp</label>
        <link refid="postprocessor__2_80_80_2chunks_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>postprocessor.cpp</label>
        <link refid="postprocessor__2_80_80_2postprocessor_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structChunk" prot="public">Chunk</innerclass>
    <innerclass refid="structChunkHash" prot="public">ChunkHash</innerclass>
    <innerclass refid="structChunkEqual" prot="public">ChunkEqual</innerclass>
    <innerclass refid="structChunkLess" prot="public">ChunkLess</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="postprocessor__2_80_80_2chunks_8hpp_1aa49b57d8da389bf523e301540f0a5593" prot="public" static="no">
        <type>std::set&lt; <ref refid="structChunk" kindref="compound">Chunk</ref>, <ref refid="structChunkLess" kindref="compound">ChunkLess</ref> &gt;</type>
        <definition>typedef std::set&lt;Chunk,ChunkLess&gt; ChunkSet</definition>
        <argsstring></argsstring>
        <name>ChunkSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/scanners/postprocessor_2.0.0/chunks.hpp" line="80" column="18" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/scanners/postprocessor_2.0.0/chunks.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="structChunk" kindref="compound">Chunk</ref> data objects for postprocessor</para>
<para><hruler/>
</para>
<para>Authors (add name and date if you modify): </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/>GAMBIT:<sp/>Global<sp/>and<sp/>Modular<sp/>BSM<sp/>Inference<sp/>Tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__postprocessor_chunks_hpp__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__postprocessor_chunks_hpp__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structChunk" kindref="compound">Chunk</ref></highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>std::size_t<sp/>start;<sp/></highlight><highlight class="comment">//<sp/>Index<sp/>of<sp/>first<sp/>point<sp/>in<sp/>this<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>std::size_t<sp/>end;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Index<sp/>of<sp/>last<sp/>point<sp/>in<sp/>this<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>std::size_t<sp/>eff_length;<sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>points<sp/>in<sp/>the<sp/>chunk<sp/>that<sp/>are<sp/>not<sp/>marked<sp/>to<sp/>be<sp/>skipped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><ref refid="structChunk" kindref="compound">Chunk</ref>(std::size_t<sp/>s,<sp/>std::size_t<sp/>e,<sp/>std::size_t<sp/>el)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/>:<sp/>start(s)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/>,<sp/>end(e)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/>,<sp/>eff_length(el)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><ref refid="structChunk" kindref="compound">Chunk</ref>(std::size_t<sp/>s,<sp/>std::size_t<sp/>e)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/>:<sp/>start(s)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/>,<sp/>end(e)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/>,<sp/>eff_length(e-s)<sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>eff_length<sp/>is<sp/>actual<sp/>length<sp/>if<sp/>not<sp/>provided<sp/>(can<sp/>manually<sp/>set<sp/>it<sp/>later)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><ref refid="structChunk" kindref="compound">Chunk</ref>()</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/>:<sp/>start(0)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/>,<sp/>end(0)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/>,<sp/>eff_length(0)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>to<sp/>check<sp/>if<sp/>a<sp/>given<sp/>dataset<sp/>index<sp/>was<sp/>processed<sp/>in<sp/>this<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>iContain(std::size_t<sp/>index)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="43"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(start&lt;=index)<sp/>and<sp/>(index&lt;=end);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>to<sp/>compute<sp/>length<sp/>of<sp/>this<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>std::size_t<sp/>length()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="48"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>end<sp/>-<sp/>start<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>==<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structChunk" kindref="compound">Chunk</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(this-&gt;start<sp/>==<sp/>other.start<sp/>and<sp/>this-&gt;end<sp/>==<sp/>other.end<sp/>and<sp/>this-&gt;eff_length<sp/>==<sp/>other.eff_length);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>use<sp/>Chunk<sp/>in<sp/>std::unordered_map/set,<sp/>need<sp/>to<sp/>provide<sp/>hashing<sp/>and<sp/>equality<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structChunkHash" kindref="compound">ChunkHash</ref>{<sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>std::size_t<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structChunk" kindref="compound">Chunk</ref><sp/>&amp;key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::hash&lt;std::size_t&gt;()(key.start)<sp/>^<sp/>std::hash&lt;std::size_t&gt;()(key.end);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal">};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structChunkEqual" kindref="compound">ChunkEqual</ref>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structChunk" kindref="compound">Chunk</ref><sp/>&amp;lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structChunk" kindref="compound">Chunk</ref><sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lhs.start<sp/>==<sp/>rhs.start)<sp/>and<sp/>(lhs.end<sp/>==<sp/>rhs.end);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal">};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structChunkLess" kindref="compound">ChunkLess</ref>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structChunk" kindref="compound">Chunk</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structChunk" kindref="compound">Chunk</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="74"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lhs.start<sp/>&lt;<sp/>rhs.start);<sp/></highlight><highlight class="comment">//<sp/>Just<sp/>sort<sp/>based<sp/>on<sp/>start<sp/>index<sp/>alone</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal">};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//typedef<sp/>std::unordered_set&lt;Chunk,ChunkHash,ChunkEqual&gt;<sp/>ChunkSet;<sp/>//<sp/>Actually<sp/>I<sp/>want<sp/>ordered<sp/>sets<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::set&lt;Chunk,ChunkLess&gt;<sp/>ChunkSet;<sp/></highlight><highlight class="comment">//<sp/>Actually<sp/>I<sp/>want<sp/>ordered<sp/>sets<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/scanners/postprocessor_2.0.0/chunks.hpp"/>
  </compounddef>
</doxygen>
