<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="modelgraph_8cpp" kind="file" language="C++">
    <compoundname>modelgraph.cpp</compoundname>
    <includes refid="modelgraph_8hpp" local="yes">gambit/Core/modelgraph.hpp</includes>
    <includes local="yes">gambit/Models/models.hpp</includes>
    <includes local="yes">gambit/Utils/stream_overloads.hpp</includes>
    <includes local="yes">gambit/Utils/util_types.hpp</includes>
    <includes local="yes">gambit/cmake/cmake_variables.hpp</includes>
    <includes local="no">boost/graph/adjacency_list.hpp</includes>
    <includes local="no">boost/graph/topological_sort.hpp</includes>
    <incdepgraph>
      <node id="5">
        <label>list</label>
      </node>
      <node id="28">
        <label>gambit/Printers/baseprinter.hpp</label>
      </node>
      <node id="23">
        <label>gambit/Utils/local_info.hpp</label>
      </node>
      <node id="10">
        <label>gambit/Backends/backend_info.hpp</label>
        <link refid="backend__info_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>queue</label>
      </node>
      <node id="21">
        <label>gambit/Models/models.hpp</label>
      </node>
      <node id="30">
        <label>boost/graph/topological_sort.hpp</label>
      </node>
      <node id="19">
        <label>gambit/Utils/yaml_variadic_functions.hpp</label>
      </node>
      <node id="14">
        <label>gambit/Core/yaml_description_database.hpp</label>
        <link refid="yaml__description__database_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>gambit/Elements/type_equivalency.hpp</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="18">
        <label>gambit/Utils/variadic_functions.hpp</label>
      </node>
      <node id="7">
        <label>map</label>
      </node>
      <node id="17">
        <label>gambit/Utils/standalone_error_handlers.hpp</label>
      </node>
      <node id="20">
        <label>gambit/Elements/functors.hpp</label>
      </node>
      <node id="26">
        <label>gambit/Utils/util_functions.hpp</label>
      </node>
      <node id="13">
        <label>yaml-cpp/yaml.h</label>
      </node>
      <node id="22">
        <label>gambit/Core/error_handlers.hpp</label>
        <link refid="error__handlers_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>gambit/Utils/stream_overloads.hpp</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="25">
        <label>gambit/Utils/yaml_parser_base.hpp</label>
      </node>
      <node id="16">
        <label>utility</label>
      </node>
      <node id="15">
        <label>sstream</label>
      </node>
      <node id="12">
        <label>gambit/cmake/cmake_variables.hpp</label>
      </node>
      <node id="9">
        <label>gambit/Core/core.hpp</label>
        <link refid="core_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>gambit/Core/yaml_parser.hpp</label>
        <link refid="yaml__parser_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>gambit/Utils/util_types.hpp</label>
      </node>
      <node id="2">
        <label>gambit/Core/modelgraph.hpp</label>
        <link refid="modelgraph_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>boost/graph/adjacency_list.hpp</label>
      </node>
      <node id="3">
        <label>gambit/Core/depresolver.hpp</label>
        <link refid="depresolver_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>modelgraph.cpp</label>
        <link refid="modelgraph_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceGambit">Gambit</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Library of ModelGraph methods.</para>
<para>Duties:<itemizedlist>
<listitem><para>Create and track a graph of the model hierarchy, for both visualisation and for relationship checks</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<sect1 id="modelgraph_8cpp_1autotoc_md7">
<title>Authors</title>
<para>(add name and date if you modify)</para>
<para><simplesect kind="author"><para>Ben Farmer (<ulink url="mailto:benjamin.farmer@monash.edu.au">benjamin.farmer@monash.edu.au</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2013 July 17</para>
</simplesect>
<simplesect kind="author"><para>Pat Scott (<ulink url="mailto:patscott@physics.mcgill.ca">patscott@physics.mcgill.ca</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2013 Aug, Sep </para>
</simplesect>
<simplesect kind="date"><para>2014 Mar</para>
</simplesect>
<hruler/>
 </para>
</sect1>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/>GAMBIT:<sp/>Global<sp/>and<sp/>Modular<sp/>BSM<sp/>Inference<sp/>Tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="29"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="modelgraph_8hpp" kindref="compound">gambit/Core/modelgraph.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/Models/models.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/Utils/stream_overloads.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/Utils/util_types.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/cmake/cmake_variables.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/graph/adjacency_list.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/graph/topological_sort.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_GRAPHVIZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;boost/graph/graphviz.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceGambit" kindref="compound">Gambit</ref></highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classGambit_1_1ModelHierarchy_1a19e37dd5366d23d937f98d2f58d090fd" kindref="member">ModelHierarchy::ModelHierarchy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Models::ModelFunctorClaw&amp;<sp/>claw,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>primodel_vec&amp;<sp/>pmv,<sp/>str<sp/>file,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>talky)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>:<sp/>boundClaw(&amp;claw),<sp/>filename(file),<sp/>verbose(talky)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>makeGraph(pmv);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ModelHierarchy::makeGraph(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>primodel_vec&amp;<sp/>primaryModelFunctors)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::graph_traits&lt;ModelGraphType&gt;::vertex_iterator<sp/>vi,<sp/>vi_end;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;str,<sp/>ModelVertexID&gt;<sp/>vertexIDmap;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>model;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>property<sp/>map<sp/>which<sp/>holds<sp/>the<sp/>edge<sp/>colors:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::property_map&lt;ModelGraphType,<sp/>edge_color_t&gt;::type<sp/>color(boost::get(edge_color_t(),modelGraph));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/>std::cout&lt;&lt;std::endl&lt;&lt;</highlight><highlight class="stringliteral">&quot;Determining<sp/>model<sp/>hierarchy<sp/>graph...&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>all<sp/>primary<sp/>model<sp/>functors<sp/>to<sp/>the<sp/>model<sp/>hierarchy<sp/>graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addFunctorsToGraph(primaryModelFunctors);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>all<sp/>vertices<sp/>(models)<sp/>in<sp/>modelGraph<sp/>and<sp/>create<sp/>a<sp/>map<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>model<sp/>names<sp/>to<sp/>vertex<sp/>IDs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(boost::tie(vi,<sp/>vi_end)<sp/>=<sp/>boost::vertices(modelGraph);<sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vi<sp/>!=<sp/>vi_end;<sp/>++vi)<sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model<sp/>=<sp/>(*modelGraph[*vi]).origin();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertexIDmap[model]<sp/>=<sp/>*vi;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Vertex<sp/>added:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;model&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>all<sp/>vertices<sp/>(models)<sp/>in<sp/>vertexIDmap,<sp/>look<sp/>up<sp/>the<sp/>&apos;parent&apos;<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>each<sp/>one<sp/>in<sp/>the<sp/>parents<sp/>database<sp/>boundClaw-&gt;myParentsDB,<sp/>and<sp/>add</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>edge<sp/>from<sp/>parent<sp/>to<sp/>child<sp/>in<sp/>the<sp/>model<sp/>graph.<sp/><sp/>Do<sp/>the<sp/>same<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>direct<sp/>(best)<sp/>friends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::map&lt;str,<sp/>ModelVertexID&gt;::iterator<sp/>vertexIDmap_it;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(vertexIDmap_it<sp/>vimap<sp/>=<sp/>vertexIDmap.begin();<sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vimap<sp/>!=<sp/>vertexIDmap.end();<sp/>vimap++)<sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model<sp/>=<sp/>vimap-&gt;first;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>parent<sp/>=<sp/>boundClaw-&gt;get_parent(model);<sp/><sp/></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/>std::cout&lt;&lt;model&lt;&lt;</highlight><highlight class="stringliteral">&quot;;<sp/>parent:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;parent&lt;&lt;std::endl;;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>a<sp/>parent,<sp/>add<sp/>an<sp/>edge<sp/>between<sp/>parent<sp/>and<sp/>child</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;none&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::add_edge(vertexIDmap[parent],<sp/>vertexIDmap[model],<sp/>modelGraph);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Edge<sp/>added:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;model&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>---&gt;<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;parent&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>edges<sp/>with<sp/>all<sp/>this<sp/>model&apos;s<sp/>best<sp/>friends.<sp/><sp/>Might<sp/>want<sp/>to<sp/>make<sp/>these<sp/>another<sp/>colour<sp/>in<sp/>future.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;str&gt;<sp/>friends<sp/>=<sp/>boundClaw-&gt;get_best_friends(model);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>friends.begin();<sp/>it<sp/>!=<sp/>friends.end();<sp/>++it)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::add_edge(vertexIDmap[*it],<sp/>vertexIDmap[model],<sp/>modelGraph);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>descriptor<sp/>for<sp/>the<sp/>edge<sp/>we<sp/>just<sp/>added</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ModelEdgeID<sp/>e<sp/>=<sp/>boost::edge(vertexIDmap[*it],<sp/>vertexIDmap[model],<sp/>modelGraph).first;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>color<sp/>property<sp/>for<sp/>this<sp/>edge<sp/>to<sp/>&quot;red&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::put(color,e,</highlight><highlight class="stringliteral">&quot;red&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;model&lt;&lt;</highlight><highlight class="stringliteral">&quot;;<sp/>friend:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;*it&lt;&lt;std::endl;;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Edge<sp/>added:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;model&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>---&gt;<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;*it&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(verbose)<sp/>std::cout&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_GRAPHVIZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Property<sp/>writer<sp/>for<sp/>graph;<sp/>see<sp/>http://www.boost.org/doc/libs/1_36_0/libs/graph/doc/write-graphviz.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>for<sp/>valid<sp/>properties<sp/>see<sp/>http://www.graphviz.org/pdf/dotguide.pdf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">graphWriter</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(std::ostream&amp;<sp/>out)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="124"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;rankdir<sp/>=<sp/>LR;&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;<sp/></highlight><highlight class="comment">//<sp/>Turn<sp/>graph<sp/>orientation<sp/>left<sp/>to<sp/>right.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;edge<sp/>[dir=back];&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;<sp/></highlight><highlight class="comment">//<sp/>Reverse<sp/>all<sp/>the<sp/>arrows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>graphviz<sp/>plot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>outf(filename);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>args:<sp/>output<sp/>stream,<sp/>vertex<sp/>list,<sp/>vertex<sp/>property<sp/>writer<sp/>(PW),<sp/>edge<sp/>PW,<sp/>graph<sp/>PW.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>write_graphviz(outf,<sp/>modelGraph,<sp/>labelWriter(&amp;modelGraph),<sp/>colorWriter(&amp;modelGraph),<sp/>graphWriter());<sp/></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ModelHierarchy::addFunctorsToGraph(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>primodel_vec&amp;<sp/>primaryModelFunctors)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>model<sp/>functors<sp/>go<sp/>into<sp/>modelGraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;primary_model_functor<sp/>*&gt;::const_iterator</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/><sp/>=<sp/>primaryModelFunctors.begin();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>primaryModelFunctors.end();<sp/>++it)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(<sp/>(*it)-&gt;status()<sp/>!=<sp/>0<sp/>)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::add_vertex(*it,<sp/>modelGraph);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>ModelHierarchy::labelWriter::labelWriter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ModelGraphType<sp/>*<sp/>modelGraph)<sp/>:<sp/>myGraph(modelGraph)<sp/>{}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ModelHierarchy::labelWriter::operator()(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ModelVertexID&amp;<sp/>v)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="159"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(*myGraph)[v]-&gt;status()<sp/>==<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[fillcolor=\&quot;red\&quot;,<sp/>style=\&quot;rounded,filled\&quot;,<sp/>shape=box,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;label=&lt;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;font<sp/>point-size=\&quot;20\&quot;<sp/>color=\&quot;black\&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(*myGraph)[v]-&gt;origin()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/font&gt;&lt;br/&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[fillcolor=\&quot;#F0F0D0\&quot;,<sp/>style=\&quot;rounded,filled\&quot;,<sp/>shape=box,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;label=&lt;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;font<sp/>point-size=\&quot;20\&quot;<sp/>color=\&quot;red\&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(*myGraph)[v]-&gt;origin()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/font&gt;&lt;br/&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*out<sp/>&lt;&lt;<sp/><sp/>&quot;Type:<sp/>&quot;<sp/>&lt;&lt;<sp/>(*myGraph)[v]-&gt;type()<sp/>&lt;&lt;<sp/>&quot;&lt;br/&gt;&quot;;</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><sp/>&quot;Function:<sp/>&quot;<sp/>&lt;&lt;<sp/>(*myGraph)[v]-&gt;name()<sp/>&lt;&lt;<sp/>&quot;&lt;br/&gt;&quot;;</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/><sp/>&quot;Module:<sp/>&quot;<sp/>&lt;&lt;<sp/>(*myGraph)[v]-&gt;origin();*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Core/src/modelgraph.cpp"/>
  </compounddef>
</doxygen>
