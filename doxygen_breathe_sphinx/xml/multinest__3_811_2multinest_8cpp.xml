<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="multinest__3_811_2multinest_8cpp" kind="file" language="C++">
    <compoundname>multinest_3.11/multinest.cpp</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">string</includes>
    <includes local="no">cmath</includes>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <includes local="no">map</includes>
    <includes local="no">sstream</includes>
    <includes local="no">iomanip</includes>
    <includes refid="scanner__plugin_8hpp" local="yes">gambit/ScannerBit/scanner_plugin.hpp</includes>
    <includes refid="multinest_8hpp" local="yes">gambit/ScannerBit/scanners/multinest/multinest.hpp</includes>
    <includes local="yes">gambit/Utils/yaml_options.hpp</includes>
    <includes local="yes">gambit/Utils/util_functions.hpp</includes>
    <incdepgraph>
      <node id="21">
        <label>gambit/Utils/local_info.hpp</label>
      </node>
      <node id="18">
        <label>boost/iterator/zip_iterator.hpp</label>
      </node>
      <node id="9">
        <label>iomanip</label>
      </node>
      <node id="42">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="39">
        <label>gambit/ScannerBit/base_prior.hpp</label>
        <link refid="base__prior_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>multinest.cpp</label>
        <link refid="multinest__3_811_2multinest_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>gambit/Utils/factory_registry.hpp</label>
      </node>
      <node id="11">
        <label>gambit/ScannerBit/scanner_utils.hpp</label>
        <link refid="scanner__utils_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="10">
        <label>gambit/ScannerBit/scanner_plugin.hpp</label>
        <link refid="scanner__plugin_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="34">
        <label>gambit/ScannerBit/plugin_loader.hpp</label>
        <link refid="plugin__loader_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>gambit/Utils/variadic_functions.hpp</label>
      </node>
      <node id="7">
        <label>map</label>
      </node>
      <node id="6">
        <label>fstream</label>
      </node>
      <node id="14">
        <label>ostream</label>
      </node>
      <node id="33">
        <label>gambit/Utils/type_index.hpp</label>
      </node>
      <node id="38">
        <label>gambit/Utils/util_functions.hpp</label>
      </node>
      <node id="40">
        <label>gambit/ScannerBit/plugin_macros.hpp</label>
        <link refid="plugin__macros_8hpp"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>gambit/Utils/yaml_options.hpp</label>
      </node>
      <node id="45">
        <label>gambit/ScannerBit/scanners/multinest/multinest.hpp</label>
        <link refid="multinest_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>yaml-cpp/yaml.h</label>
      </node>
      <node id="20">
        <label>gambit/Utils/exceptions.hpp</label>
      </node>
      <node id="19">
        <label>boost/range.hpp</label>
      </node>
      <node id="28">
        <label>typeinfo</label>
      </node>
      <node id="32">
        <label>gambit/Printers/basebaseprinter.hpp</label>
      </node>
      <node id="35">
        <label>gambit/ScannerBit/plugin_details.hpp</label>
        <link refid="plugin__details_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>unistd.h</label>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
      <node id="13">
        <label>utility</label>
      </node>
      <node id="8">
        <label>sstream</label>
      </node>
      <node id="37">
        <label>gambit/cmake/cmake_variables.hpp</label>
      </node>
      <node id="41">
        <label>gambit/ScannerBit/factory_defs.hpp</label>
        <link refid="factory__defs_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>boost/enable_shared_from_this.hpp</label>
      </node>
      <node id="22">
        <label>gambit/Utils/util_macros.hpp</label>
      </node>
      <node id="30">
        <label>gambit/ScannerBit/printer_interface.hpp</label>
        <link refid="printer__interface_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>gambit/ScannerBit/plugin_defs.hpp</label>
        <link refid="plugin__defs_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>cctype</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="15">
        <label>unordered_map</label>
      </node>
      <node id="44">
        <label>gambit/Utils/signal_handling.hpp</label>
      </node>
      <node id="12">
        <label>type_traits</label>
      </node>
      <node id="27">
        <label>set</label>
      </node>
      <node id="31">
        <label>gambit/Printers/baseprintermanager.hpp</label>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceGambit">Gambit</innernamespace>
    <innernamespace refid="namespaceGambit_1_1MultiNest">Gambit::MultiNest</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="multinest__3_811_2multinest_8cpp_1ad2da4a53216a710670022e7b8fa5bb79" prot="public" static="no">
        <type><ref refid="classGambit_1_1Scanner_1_1like__ptr" kindref="compound">Gambit::Scanner::like_ptr</ref></type>
        <definition>typedef Gambit::Scanner::like_ptr scanPtr</definition>
        <argsstring></argsstring>
        <name>scanPtr</name>
        <briefdescription>
<para>Typedef for the ScannerBit pointer to the external loglikelihood function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/src/scanners/multinest_3.11/multinest.cpp" line="42" column="35" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/src/scanners/multinest_3.11/multinest.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="multinest__3_811_2multinest_8cpp_1a981f07bb84033e5fa3841d82b8fb2853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>scanner_plugin</definition>
        <argsstring>(multinest, version(3, 11))</argsstring>
        <name>scanner_plugin</name>
        <param>
          <type>multinest</type>
        </param>
        <param>
          <type>version(3, 11)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>================================================= </para>
<sect1 id="multinest__3_811_2multinest_8cpp_1autotoc_md20">
<title>Interface to ScannerBit</title>
</sect1>
        </detaileddescription>
        <inbodydescription>
<para>The constructor to run when the MultiNest plugin is loaded.</para>
<para>The main routine to run for the MultiNest scanner.</para>
<para><hruler/>
 TODO: Replace with some wrapper? Maybe not, this is already pretty straightforward, though perhaps a little counterintuitive that the printer is the place to get this information.</para>
<para><hruler/>
</para>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/src/scanners/multinest_3.11/multinest.cpp" line="49" column="1" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/src/scanners/multinest_3.11/multinest.cpp" bodystart="49" bodyend="173"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ScannerBit interface to Multinest 3.11</para>
<para><hruler/>
</para>
<para>Authors (add name and date if you modify): </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/>GAMBIT:<sp/>Global<sp/>and<sp/>Modular<sp/>BSM<sp/>Inference<sp/>Tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>debugging<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scanner__plugin_8hpp" kindref="compound">gambit/ScannerBit/scanner_plugin.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="multinest_8hpp" kindref="compound">gambit/ScannerBit/scanners/multinest/multinest.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/Utils/yaml_options.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/Utils/util_functions.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceGambit" kindref="compound">Gambit</ref></highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">MultiNest</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LogLikeWrapper<sp/>*<ref refid="multinest__3_810_2multinest_8cpp_1ac3e9df05fc07eb548efedb7cf50673d8" kindref="member">global_loglike_object</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classGambit_1_1Scanner_1_1like__ptr" kindref="compound">Gambit::Scanner::like_ptr</ref><sp/><ref refid="multinest__3_811_2multinest_8cpp_1ad2da4a53216a710670022e7b8fa5bb79" kindref="member">scanPtr</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="multinest__3_811_2multinest_8cpp_1a981f07bb84033e5fa3841d82b8fb2853" kindref="member">scanner_plugin</ref>(multinest,<sp/>version(3,<sp/>11))</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>error<sp/>is<sp/>thrown<sp/>if<sp/>any<sp/>of<sp/>the<sp/>following<sp/>entries<sp/>are<sp/>not<sp/>present<sp/>in<sp/>the<sp/>inifile<sp/>(none<sp/>absolutely<sp/>required<sp/>for<sp/>MultiNest).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><ref refid="plugin__macros_8hpp_1af78b22cbfedf773b4f33f289273ca3d7" kindref="member">reqd_inifile_entries</ref>();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tell<sp/>cmake<sp/>system<sp/>to<sp/>search<sp/>known<sp/>paths<sp/>for<sp/>these<sp/>libraries;<sp/>any<sp/>not<sp/>found<sp/>must<sp/>be<sp/>specified<sp/>in<sp/>config/scanner_locations.yaml.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><ref refid="plugin__macros_8hpp_1ab29593cfc2645a8aa25901734a40e067" kindref="member">reqd_libraries</ref>(</highlight><highlight class="stringliteral">&quot;nest3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pointer<sp/>to<sp/>the<sp/>(log)likelihood<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><ref refid="classGambit_1_1Scanner_1_1like__ptr" kindref="compound">scanPtr</ref><sp/>LogLike;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><ref refid="plugin__macros_8hpp_1a4fd10504e6d4312d8cf422589cd2ec88" kindref="member">plugin_constructor</ref></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>external<sp/>likelihood<sp/>calculator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LogLike<sp/>=<sp/>get_purpose(get_inifile_value&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;like&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LogLike-&gt;getRank()<sp/>==<sp/>0)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Loading<sp/>MultiNest<sp/>nested<sp/>sampling<sp/>plugin<sp/>for<sp/>ScannerBit.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="plugin__macros_8hpp_1ae8aab4313bbf2ee1c1aee6e579a7a3c4" kindref="member">plugin_main</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>resume_mode<sp/>=<sp/>get_printer().resume_mode();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>dimensionality<sp/>of<sp/>the<sp/>scan.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ma<sp/>=<sp/>get_dimension();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>global<sp/>option<sp/>specifying<sp/>the<sp/>minimum<sp/>interesting<sp/>likelihood</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gl0<sp/>=<sp/>get_inifile_value&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;likelihood:<sp/>model_invalid_for_lnlike_below&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Retrieve<sp/>the<sp/>global<sp/>option<sp/>specifying<sp/>the<sp/>likelihood<sp/>offset<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>get_inifile_value&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;likelihood:<sp/>lnlike_offset&quot;</highlight><highlight class="normal">,<sp/>0.);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>likleihood<sp/>functor<sp/>knows<sp/>to<sp/>apply<sp/>the<sp/>offset<sp/>internally<sp/>in<sp/>ScannerBit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LogLike-&gt;setPurposeOffset(offset);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Offset<sp/>the<sp/>minimum<sp/>interesting<sp/>likelihood<sp/>by<sp/>the<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gl0<sp/>=<sp/>gl0<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MultiNest<sp/>algorithm<sp/>options.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IS<sp/>(get_inifile_value&lt;bool&gt;(</highlight><highlight class="stringliteral">&quot;IS&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>Nested<sp/>Importance<sp/>Sampling?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mmodal<sp/>(get_inifile_value&lt;bool&gt;(</highlight><highlight class="stringliteral">&quot;mmodal&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>mode<sp/>separation?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ceff<sp/>(get_inifile_value&lt;bool&gt;(</highlight><highlight class="stringliteral">&quot;ceff&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>run<sp/>in<sp/>constant<sp/>efficiency<sp/>mode?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlive<sp/>(get_inifile_value&lt;int&gt;(</highlight><highlight class="stringliteral">&quot;nlive&quot;</highlight><highlight class="normal">,<sp/>1000)<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>live<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>efr<sp/>(get_inifile_value&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;efr&quot;</highlight><highlight class="normal">,<sp/>0.8)<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>required<sp/>efficiency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tol<sp/>(get_inifile_value&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;tol&quot;</highlight><highlight class="normal">,<sp/>0.5)<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tol,<sp/>defines<sp/>the<sp/>stopping<sp/>criteria</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndims<sp/>=<sp/>ma;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dimensionality<sp/>(no.<sp/>of<sp/>free<sp/>parameters)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPar<sp/>=<sp/>ma+2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Total<sp/>no.<sp/>of<sp/>parameters<sp/>including<sp/>free<sp/>&amp;<sp/>derived;<sp/>+2<sp/>==<sp/>{point<sp/>ID<sp/>code,<sp/>MPI<sp/>rank}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nClsPar<sp/>(get_inifile_value&lt;int&gt;(</highlight><highlight class="stringliteral">&quot;nClsPar&quot;</highlight><highlight class="normal">,std::min(ma,4)));<sp/></highlight><highlight class="comment">//<sp/>No.<sp/>of<sp/>parameters<sp/>to<sp/>do<sp/>mode<sp/>separation<sp/>on;<sp/>don&apos;t<sp/>use<sp/>more<sp/>than<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>updInt<sp/>(get_inifile_value&lt;int&gt;(</highlight><highlight class="stringliteral">&quot;updInt&quot;</highlight><highlight class="normal">,<sp/>1000)<sp/>);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>how<sp/>many<sp/>iterations<sp/>feedback<sp/>is<sp/>required<sp/>&amp;<sp/>the<sp/>output<sp/>files<sp/>should<sp/>be<sp/>updated<sp/>(*10<sp/>for<sp/>dumper)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ztol<sp/>(get_inifile_value&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;Ztol&quot;</highlight><highlight class="normal">,<sp/>-1E90)<sp/>);<sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>the<sp/>modes<sp/>with<sp/>logZ<sp/>&lt;<sp/>Ztol<sp/>are<sp/>ignored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxModes<sp/>(get_inifile_value&lt;int&gt;(</highlight><highlight class="stringliteral">&quot;maxModes&quot;</highlight><highlight class="normal">,<sp/>100)<sp/>);<sp/><sp/></highlight><highlight class="comment">//<sp/>expected<sp/>max<sp/>no.<sp/>of<sp/>modes<sp/>(used<sp/>only<sp/>for<sp/>memory<sp/>allocation)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed<sp/>(get_inifile_value&lt;int&gt;(</highlight><highlight class="stringliteral">&quot;seed&quot;</highlight><highlight class="normal">,<sp/>-1)<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>random<sp/>no.<sp/>generator<sp/>seed,<sp/>if<sp/>&lt;<sp/>0<sp/>then<sp/>take<sp/>the<sp/>seed<sp/>from<sp/>system<sp/>clock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fb<sp/>(get_inifile_value&lt;bool&gt;(</highlight><highlight class="stringliteral">&quot;fb&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>feedback<sp/>on<sp/>standard<sp/>output?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resume<sp/>(<sp/>resume_mode<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>resume<sp/>from<sp/>a<sp/>previous<sp/>job?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outfile<sp/>(get_inifile_value&lt;bool&gt;(</highlight><highlight class="stringliteral">&quot;outfile&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>);<sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>output<sp/>files?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ln0<sp/>(get_inifile_value&lt;double&gt;(</highlight><highlight class="stringliteral">&quot;logZero&quot;</highlight><highlight class="normal">,0.9999*gl0));<sp/></highlight><highlight class="comment">//<sp/>points<sp/>with<sp/>loglike<sp/>&lt;<sp/>logZero<sp/>will<sp/>be<sp/>ignored<sp/>by<sp/>MultiNest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxiter<sp/>(get_inifile_value&lt;int&gt;(</highlight><highlight class="stringliteral">&quot;maxiter&quot;</highlight><highlight class="normal">,<sp/>0)<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Max<sp/>no.<sp/>of<sp/>iterations,<sp/>a<sp/>non-positive<sp/>value<sp/>means<sp/>infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initMPI(0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>MPI<sp/>in<sp/>ScannerBit,<sp/>not<sp/>in<sp/>MultiNest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*context<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any<sp/>additional<sp/>information<sp/>user<sp/>wants<sp/>to<sp/>pass<sp/>(not<sp/>required<sp/>by<sp/>MN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Which<sp/>parameters<sp/>to<sp/>have<sp/>periodic<sp/>boundary<sp/>conditions?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pWrap[ndims];</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ndims;<sp/>i++)<sp/>pWrap[i]<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>(need<sp/>to<sp/>do<sp/>more<sp/>work<sp/>if<sp/>we<sp/>actually<sp/>want<sp/>to<sp/>allow<sp/>periodic<sp/>BCs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>check<sp/>what<sp/>happens<sp/>if<sp/>resume<sp/>mode<sp/>is<sp/>active<sp/>but<sp/>multinest<sp/>native<sp/>output<sp/>is<sp/>not<sp/>written.<sp/>I<sp/>guess<sp/>it<sp/>will<sp/>resume<sp/>writing<sp/>to<sp/>the<sp/>printer<sp/>output,<sp/>but<sp/>actually<sp/>start<sp/>a<sp/>new<sp/>scan?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Root<sp/>for<sp/>output<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>root_str;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>defpath<sp/>=<sp/>Gambit::Utils::ensure_path_exists(</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_inifile_value&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;default_output_path&quot;</highlight><highlight class="normal">)+</highlight><highlight class="stringliteral">&quot;MultiNest/native-&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);<sp/></highlight><highlight class="comment">//<sp/>from<sp/>gambit<sp/>global<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>root_str<sp/>=<sp/>get_inifile_value&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;root&quot;</highlight><highlight class="normal">,<sp/>defpath);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>root[1000];<sp/><sp/></highlight><highlight class="comment">//<sp/>I<sp/>think<sp/>MultiNest<sp/>will<sp/>truncate<sp/>this<sp/>to<sp/>100.<sp/>But<sp/>lets<sp/>use<sp/>a<sp/>larger<sp/>array<sp/>just<sp/>in<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Gambit::Utils::strcpy2f(root,<sp/>1000,<sp/>root_str);</highlight><highlight class="comment">//<sp/>(copy<sp/>std::string<sp/>into<sp/>char<sp/>array<sp/>for<sp/>transport<sp/>to<sp/>Fortran)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(resume==1<sp/>and<sp/>outfile==0)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>stupid<sp/>to<sp/>be<sp/>in<sp/>resume<sp/>mode<sp/>while<sp/>not<sp/>writing<sp/>output<sp/>files.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Means<sp/>subsequent<sp/>resumes<sp/>will<sp/>be<sp/>impossible.<sp/>Throw<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="scanner__utils_8hpp_1a160719ba0cc1b31c4e65eaeb50285745" kindref="member">scan_error</ref>().raise(LOCAL_INFO,</highlight><highlight class="stringliteral">&quot;Error<sp/>from<sp/>MultiNest<sp/>ScannerBit<sp/>plugin!<sp/>Resume<sp/>mode<sp/>is<sp/>activated,<sp/>however<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;MultiNest<sp/>native<sp/>output<sp/>files<sp/>are<sp/>set<sp/>to<sp/>not<sp/>be<sp/>written.<sp/>These<sp/>are<sp/>needed<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;for<sp/>resuming;<sp/>please<sp/>change<sp/>this<sp/>setting<sp/>in<sp/>your<sp/>yaml<sp/>file<sp/>(set<sp/>option<sp/>\&quot;outfile:<sp/>1\&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>auxilliary<sp/>streams.<sp/>These<sp/>are<sp/>only<sp/>needed<sp/>by<sp/>the<sp/>master<sp/>process,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>let&apos;s<sp/>create<sp/>them<sp/>only<sp/>for<sp/>that<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myrank<sp/>=<sp/>get_printer().get_stream()-&gt;getRank();<sp/></highlight><highlight class="comment">//<sp/>MPI<sp/>rank<sp/>of<sp/>this<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(myrank==0)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>inifile<sp/>options<sp/>for<sp/>each<sp/>print<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Gambit::Options<sp/>txt_options<sp/><sp/><sp/>=<sp/>get_inifile_node(</highlight><highlight class="stringliteral">&quot;aux_printer_txt_options&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Gambit::Options<sp/>stats_options<sp/>=<sp/>get_inifile_node(&quot;aux_printer_stats_options&quot;);<sp/>//FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Gambit::Options<sp/>live_options<sp/><sp/>=<sp/>get_inifile_node(</highlight><highlight class="stringliteral">&quot;aux_printer_live_options&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Options<sp/>to<sp/>desynchronise<sp/>print<sp/>streams<sp/>from<sp/>the<sp/>main<sp/>Gambit<sp/>iterations.<sp/>This<sp/>allows<sp/>for<sp/>random<sp/>access<sp/>writing,<sp/>or<sp/>writing<sp/>of<sp/>global<sp/>scan<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//stats_options.setValue(&quot;synchronised&quot;,false);<sp/>//FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txt_options.setValue(</highlight><highlight class="stringliteral">&quot;synchronised&quot;</highlight><highlight class="normal">,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>live_options.setValue(</highlight><highlight class="stringliteral">&quot;synchronised&quot;</highlight><highlight class="normal">,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>auxiliary<sp/>print<sp/>streams</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_printer().new_stream(</highlight><highlight class="stringliteral">&quot;txt&quot;</highlight><highlight class="normal">,txt_options);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get_printer().new_stream(&quot;stats&quot;,stats_options);<sp/>//FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_printer().new_stream(</highlight><highlight class="stringliteral">&quot;live&quot;</highlight><highlight class="normal">,live_options);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>that<sp/>MPI<sp/>processes<sp/>have<sp/>the<sp/>same<sp/>IDs<sp/>for<sp/>auxiliary<sp/>print<sp/>streams;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Gambit::Scanner::assign_aux_numbers(</highlight><highlight class="stringliteral">&quot;Posterior&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;LastLive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>object<sp/>that<sp/>interfaces<sp/>to<sp/>the<sp/>MultiNest<sp/>LogLike<sp/>callback<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGambit_1_1MultiNest_1_1LogLikeWrapper" kindref="compound">Gambit::MultiNest::LogLikeWrapper</ref><sp/>loglwrapper(LogLike,<sp/>get_printer());</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="multinest__3_810_2multinest_8cpp_1ac3e9df05fc07eb548efedb7cf50673d8" kindref="member">Gambit::MultiNest::global_loglike_object</ref><sp/>=<sp/>&amp;loglwrapper;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Run<sp/>MultiNest,<sp/>passing<sp/>callback<sp/>functions<sp/>for<sp/>the<sp/>loglike<sp/>and<sp/>dumper.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(myrank<sp/>==<sp/>0)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>MultiNest<sp/>run...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>run(IS,<sp/>mmodal,<sp/>ceff,<sp/>nlive,<sp/>tol,<sp/>efr,<sp/>ndims,<sp/>nPar,<sp/>nClsPar,<sp/>maxModes,<sp/>updInt,<sp/>Ztol,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root,<sp/>seed,<sp/>pWrap,<sp/>fb,<sp/>resume,<sp/>outfile,<sp/>initMPI,<sp/>ln0,<sp/>maxiter,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Gambit::MultiNest::callback_loglike,<sp/>Gambit::MultiNest::callback_dumper,<sp/>context);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(myrank<sp/>==<sp/>0)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Multinest<sp/>run<sp/>finished!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceGambit" kindref="compound">Gambit</ref><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">MultiNest<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>we<sp/>are<sp/>using<sp/>the<sp/>c<sp/>interface<sp/>from<sp/>cwrapper.f90,<sp/>so<sp/>the<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>signature<sp/>is<sp/>a<sp/>little<sp/>different<sp/>than<sp/>in<sp/>the<sp/>multinest<sp/>examples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="multinest_8hpp_1ae7a3504ac9fceadfd20258d6b599c4b7" kindref="member">callback_loglike</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Cube,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>npars,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>global<sp/>interface<sp/>to<sp/>ScannerBit<sp/>loglikelihood<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Could<sp/>also<sp/>pass<sp/>this<sp/>object<sp/>in<sp/>via<sp/>context<sp/>pointer,<sp/>but<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>involves<sp/>some<sp/>casting<sp/>and<sp/>could<sp/>risk<sp/>a<sp/>segfault.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="multinest__3_810_2multinest_8cpp_1ac3e9df05fc07eb548efedb7cf50673d8" kindref="member">global_loglike_object</ref>-&gt;<ref refid="classGambit_1_1MultiNest_1_1LogLikeWrapper_1aa028a57d12da27737a177f7739925135" kindref="member">LogLike</ref>(Cube,<sp/>ndim,<sp/>npars);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>callback_dumper(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSamples,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlive,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPar,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*physLive,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*posterior,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*paramConstr,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxLogLike,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>logZ,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>logZerr,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="multinest__3_810_2multinest_8cpp_1ac3e9df05fc07eb548efedb7cf50673d8" kindref="member">global_loglike_object</ref>-&gt;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dumper(nSamples,<sp/>nlive,<sp/>nPar,<sp/>physLive,<sp/>posterior,<sp/>paramConstr,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxLogLike,<sp/>logZ,<sp/>logZerr);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGambit_1_1MultiNest_1_1LogLikeWrapper_1a849365fb4aa3de55daa39e7a3feafc15" kindref="member">LogLikeWrapper::LogLikeWrapper</ref>(<ref refid="classGambit_1_1Scanner_1_1like__ptr" kindref="compound">scanPtr</ref><sp/>loglike,<sp/>printer_interface&amp;<sp/>printer)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>boundLogLike(loglike),<sp/>boundPrinter(<ref refid="printer__interface_8hpp_1a3c6ca4999cbe5a04947a903788d93ee7" kindref="member">printer</ref>),<sp/>dumper_runonce(false)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>LogLikeWrapper::LogLike(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Cube,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndim,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//convert<sp/>C<sp/>style<sp/>array<sp/>to<sp/>C++<sp/>vector<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>unitpars(Cube,<sp/>Cube<sp/>+<sp/>ndim);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lnew<sp/>=<sp/>boundLogLike(unitpars);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>primary<sp/>printer<sp/>from<sp/>the<sp/>printer<sp/>manager</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printer*<sp/>primary_stream(<sp/>boundPrinter.get_stream()<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get,<sp/>set<sp/>and<sp/>ouptut<sp/>the<sp/>process<sp/>rank<sp/>and<sp/>this<sp/>point&apos;s<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myrank<sp/><sp/>=<sp/>boundLogLike-&gt;getRank();<sp/></highlight><highlight class="comment">//<sp/>MPI<sp/>rank<sp/>of<sp/>this<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pointID<sp/>=<sp/>boundLogLike-&gt;getPtID();<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>point<sp/>ID<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cube[ndim+0]<sp/>=<sp/>myrank;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cube[ndim+1]<sp/>=<sp/>pointID;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Done!<sp/>(lnew<sp/>will<sp/>be<sp/>used<sp/>by<sp/>MultiNest<sp/>to<sp/>guide<sp/>the<sp/>search)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lnew;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LogLikeWrapper::dumper(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSamples,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlive,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPar,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*physLive,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*posterior,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*paramConstr*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*maxLogLike*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*logZ*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*logZerr*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thisrank<sp/>=<sp/>boundPrinter.get_stream()-&gt;getRank();<sp/></highlight><highlight class="comment">//<sp/>MPI<sp/>rank<sp/>of<sp/>this<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(thisrank!=0)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="scanner__utils_8hpp_1a78c5cbcc517889fd5a4b79468ae2f721" kindref="member">scan_err</ref><sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;Error!<sp/>ScannerBit<sp/>MultiNest<sp/>plugin<sp/>attempted<sp/>to<sp/>run<sp/>&apos;dumper&apos;<sp/>function<sp/>on<sp/>a<sp/>worker<sp/>process<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;(thisrank==&quot;</highlight><highlight class="normal">&lt;&lt;thisrank&lt;&lt;</highlight><highlight class="stringliteral">&quot;)!<sp/>MultiNest<sp/>should<sp/>only<sp/>try<sp/>to<sp/>run<sp/>this<sp/>function<sp/>on<sp/>the<sp/>master<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;process.<sp/>Most<sp/>likely<sp/>this<sp/>means<sp/>that<sp/>your<sp/>multinest<sp/>installation<sp/>is<sp/>not<sp/>running<sp/>in<sp/>MPI<sp/>mode<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;correctly,<sp/>and<sp/>is<sp/>actually<sp/>running<sp/>independent<sp/>scans<sp/>on<sp/>each<sp/>process.<sp/>Alternatively,<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;version<sp/>of<sp/>MultiNest<sp/>you<sp/>are<sp/>using<sp/>may<sp/>be<sp/>too<sp/>far<sp/>ahead<sp/>of<sp/>what<sp/>this<sp/>plugin<sp/>can<sp/>handle,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;if<sp/>e.g.<sp/>the<sp/>described<sp/>behaviour<sp/>has<sp/>changed<sp/>since<sp/>this<sp/>plugin<sp/>was<sp/>written.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>scan_end;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>signal<sp/>to<sp/>other<sp/>processes<sp/>to<sp/>switch<sp/>to<sp/>higher<sp/>min_logL<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MultiNest<sp/>was<sp/>sometimes<sp/>getting<sp/>stuck<sp/>looking<sp/>for<sp/>live<sp/>point<sp/>candidates;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>increasing<sp/>this<sp/>above<sp/>the<sp/>MultiNext<sp/>zero_LogL<sp/>value<sp/>should<sp/>avoid<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>issue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>do<sp/>this<sp/>here<sp/>because<sp/>initial<sp/>live<sp/>point<sp/>generation<sp/>should<sp/>be<sp/>finished</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>once<sp/>the<sp/>dumper<sp/>runs,<sp/>and<sp/>we<sp/>want<sp/>the<sp/>original<sp/>min_logL<sp/>value<sp/>while<sp/>generating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>live<sp/>points.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!dumper_runonce)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dumper_runonce<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boundLogLike-&gt;switch_to_alternate_min_LogL();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Multinest<sp/>dumper<sp/>first<sp/>ran<sp/>on<sp/>process<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;boundLogLike-&gt;getRank()&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>at<sp/>iteration<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;boundLogLike-&gt;getPtID()&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>printers<sp/>for<sp/>each<sp/>auxiliary<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printer*<sp/>stats_stream(<sp/>boundPrinter.get_stream(&quot;stats&quot;)<sp/>);<sp/>//FIXME<sp/>see<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printer__interface_8hpp_1a3c6ca4999cbe5a04947a903788d93ee7" kindref="member">printer</ref>*<sp/>txt_stream(<sp/><sp/><sp/>boundPrinter.get_stream(</highlight><highlight class="stringliteral">&quot;txt&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="printer__interface_8hpp_1a3c6ca4999cbe5a04947a903788d93ee7" kindref="member">printer</ref>*<sp/>live_stream(<sp/><sp/>boundPrinter.get_stream(</highlight><highlight class="stringliteral">&quot;live&quot;</highlight><highlight class="normal">)<sp/><sp/>);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>print<sp/>streams.<sp/>WARNING!<sp/>This<sp/>potentially<sp/>deletes<sp/>the<sp/>old<sp/>data<sp/>(here<sp/>we<sp/>overwrite<sp/>it<sp/>on<sp/>purpose)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//stats_stream-&gt;reset();<sp/><sp/>//<sp/>FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txt_stream-&gt;reset();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>live_stream-&gt;reset();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>the<sp/>&quot;quantity&quot;<sp/>IDcode<sp/>is<sp/>UNIQUE<sp/>across<sp/>all<sp/>printers!<sp/>This<sp/>way<sp/>fancy<sp/>printers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>the<sp/>option<sp/>of<sp/>ignoring<sp/>duplicate<sp/>writes<sp/>and<sp/>doing<sp/>things<sp/>like<sp/>combine<sp/>all<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auxiliary<sp/>streams<sp/>into<sp/>a<sp/>single<sp/>database.<sp/>But<sp/>must<sp/>be<sp/>able<sp/>to<sp/>assume<sp/>IDcodes<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unique<sp/>for<sp/>a<sp/>given<sp/>quanity<sp/>to<sp/>do<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Negative<sp/>numbers<sp/>not<sp/>used<sp/>by<sp/>functors,<sp/>so<sp/>those<sp/>are<sp/>&apos;safe&apos;<sp/>to<sp/>use<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME<sp/>this<sp/>is<sp/>buggy<sp/>atm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stats<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>now,<sp/>MPIrank<sp/>set<sp/>to<sp/>0<sp/>and<sp/>pointID<sp/>set<sp/>to<sp/>-1,<sp/>as<sp/>not<sp/>needed.<sp/>Might<sp/>change<sp/>how<sp/>this<sp/>works<sp/>later.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Quantity<sp/><sp/><sp/><sp/>Label<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDcode<sp/><sp/>MPIrank<sp/><sp/>pointID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//stats_stream-&gt;print(maxLogLike,<sp/>&quot;maxLogLike&quot;,<sp/>-1,<sp/><sp/>0,<sp/><sp/>-1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//stats_stream-&gt;print(logZ,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;logZ&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-2,<sp/><sp/>0,<sp/><sp/>-1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//stats_stream-&gt;print(logZerr,<sp/><sp/><sp/><sp/>&quot;logZerr&quot;,<sp/><sp/><sp/><sp/>-3,<sp/><sp/>0,<sp/><sp/>-1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>txt<sp/>file<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>info<sp/>for<sp/>each<sp/>point<sp/>to<sp/>printer<sp/>one<sp/>command<sp/>at<sp/>a<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pointID;<sp/></highlight><highlight class="comment">//<sp/>ID<sp/>number<sp/>for<sp/>each<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myrank;<sp/><sp/></highlight><highlight class="comment">//<sp/>MPI<sp/>rank<sp/>which<sp/>wrote<sp/>each<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>discarded<sp/>live<sp/>points<sp/>(and<sp/>rejected<sp/>candidate<sp/>live<sp/>points<sp/>if<sp/>IS<sp/>=<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nSamples;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myrank<sp/><sp/>=<sp/>posterior[(nPar-2)*nSamples<sp/>+<sp/>i];<sp/></highlight><highlight class="comment">//MPI<sp/>rank<sp/>stored<sp/>in<sp/>second<sp/>last<sp/>entry<sp/>of<sp/>cube</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointID<sp/>=<sp/>posterior[(nPar-1)*nSamples<sp/>+<sp/>i];<sp/></highlight><highlight class="comment">//pointID<sp/>stored<sp/>in<sp/>last<sp/>entry<sp/>of<sp/>cube</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txt_stream-&gt;print(<sp/>posterior[(nPar+1)*nSamples<sp/>+<sp/>i],<sp/></highlight><highlight class="stringliteral">&quot;Posterior&quot;</highlight><highlight class="normal">,<sp/>myrank,<sp/>pointID);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Put<sp/>rest<sp/>of<sp/>parameters<sp/>into<sp/>a<sp/>vector<sp/>for<sp/>printing<sp/>all<sp/>together<sp/>//<sp/>TODO:<sp/>not<sp/>needed,<sp/>delete?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::vector&lt;double&gt;<sp/>parameters;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for(<sp/>int<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nPar-2;<sp/>j++<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>parameters.push_back(<sp/>posterior[j*nSamples<sp/>+<sp/>i]<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>last<sp/>set<sp/>of<sp/>live<sp/>points</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nlive;<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myrank<sp/><sp/>=<sp/>physLive[(nPar-2)*nlive<sp/>+<sp/>i];<sp/></highlight><highlight class="comment">//MPI<sp/>rank<sp/>number<sp/>stored<sp/>in<sp/>second<sp/>last<sp/>entry<sp/>of<sp/>cube</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointID<sp/>=<sp/>physLive[(nPar-1)*nlive<sp/>+<sp/>i];<sp/></highlight><highlight class="comment">//pointID<sp/>stored<sp/>in<sp/>last<sp/>entry<sp/>of<sp/>cube</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>live_stream-&gt;print(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;LastLive&quot;</highlight><highlight class="normal">,<sp/>myrank,<sp/>pointID);<sp/></highlight><highlight class="comment">//<sp/>Flag<sp/>which<sp/>points<sp/>were<sp/>the<sp/>last<sp/>live<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//<sp/>Put<sp/>rest<sp/>of<sp/>parameters<sp/>into<sp/>a<sp/>vector<sp/>for<sp/>printing<sp/>all<sp/>together<sp/>//<sp/>TODO:<sp/>not<sp/>needed,<sp/>delete?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::vector&lt;double&gt;<sp/>parameters;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for(<sp/>int<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>nPar-2;<sp/>j++<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>parameters.push_back(<sp/>physLive[j*nlive<sp/>+<sp/>i]<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>//live_stream-&gt;print(parameters,<sp/>&quot;Parameters&quot;,<sp/>myrank,<sp/>pointID);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Flush<sp/>these<sp/>printers<sp/>to<sp/>disk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txt_stream-&gt;flush();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>live_stream-&gt;flush();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/src/scanners/multinest_3.11/multinest.cpp"/>
  </compounddef>
</doxygen>
