<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classutils_8py" kind="file" language="Python">
    <compoundname>classutils.py</compoundname>
    <innernamespace refid="namespacemodules_1_1classutils">modules::classutils</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>__future__<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>print_function</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>collections<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>OrderedDict</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>import<sp/>modules.cfg<sp/>as<sp/>cfg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespacemodules_1_1active__cfg" kindref="compound">modules.active_cfg</ref><sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>active_cfg</highlight></codeline>
<codeline lineno="14"><highlight class="normal">exec(</highlight><highlight class="stringliteral">&quot;import<sp/>configs.&quot;</highlight><highlight class="normal"><sp/>+<sp/>active_cfg.module_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>as<sp/>cfg&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespacemodules_1_1gb" kindref="compound">modules.gb</ref><sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>gb</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespacemodules_1_1funcutils" kindref="compound">modules.funcutils</ref><sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>funcutils</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespacemodules_1_1utils" kindref="compound">modules.utils</ref><sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>utils</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespacemodules_1_1exceptions" kindref="compound">modules.exceptions</ref><sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>exceptions</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/><ref refid="namespacemodules_1_1infomsg" kindref="compound">modules.infomsg</ref><sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>infomsg</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>getAbstractClassName<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">getAbstractClassName(input_name,<sp/>prefix=gb.abstr_class_prefix,<sp/>short=False):</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>input_name:</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespaces,<sp/>short_class_name<sp/>=<sp/>input_name.rsplit(</highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal">,1)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abstract_class_name<sp/>=<sp/>namespaces<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.abstr_class_prefix<sp/>+<sp/>short_class_name</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abstract_class_name<sp/>=<sp/>gb.abstr_class_prefix<sp/>+<sp/>input_name</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>short<sp/>==<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>abstract_class_name.rsplit(</highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal">,1)[-1]</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>abstract_class_name</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>getAbstractClassName<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>constrEmptyTemplClassDecl<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">constrEmptyTemplClassDecl(abstr_class_name_short,<sp/>namespaces,<sp/>template_bracket,<sp/>indent=4):</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>n_indents<sp/><sp/>=<sp/>len(namespaces)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/>utils.constrNamespace(namespaces,<sp/></highlight><highlight class="stringliteral">&apos;open&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*n_indents*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;template<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>template_bracket<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*n_indents*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;class<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name_short<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>{};\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/>utils.constrNamespace(namespaces,<sp/></highlight><highlight class="stringliteral">&apos;close&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>class_decl</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>constrEmptyTemplClassDecl<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>constrTemplForwDecl<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">constrTemplForwDecl(class_name_short,<sp/>namespaces,<sp/>template_bracket,<sp/>indent=4):</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>n_indents<sp/>=<sp/>len(namespaces)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>forw_decl<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>forw_decl<sp/>+=<sp/>utils.constrNamespace(namespaces,<sp/></highlight><highlight class="stringliteral">&apos;open&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>forw_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*n_indents*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;template<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>template_bracket<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>forw_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*n_indents*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;class<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name_short<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>forw_decl<sp/>+=<sp/>utils.constrNamespace(namespaces,<sp/></highlight><highlight class="stringliteral">&apos;close&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>forw_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>forw_decl</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>constrTemplForwDecl<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>constrAbstractClassDecl<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">constrAbstractClassDecl(class_el,<sp/>class_name,<sp/>abstr_class_name,<sp/>namespaces,<sp/>indent=4,<sp/>file_for_gambit=False,<sp/>template_types=[],<sp/>has_copy_constructor=True,<sp/>construct_assignment_operator=True):</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>n_indents<sp/>=<sp/>len(namespaces)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>template_types<sp/>argument:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(template_types)<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_template<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_template<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Create<sp/>list<sp/>of<sp/>all<sp/>&apos;non-artificial&apos;<sp/>members<sp/>of<sp/>the<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>member_elements<sp/>=<sp/>utils.getMemberElements(class_el,<sp/>include_artificial=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Get<sp/>list<sp/>of<sp/>dicts<sp/>with<sp/>info<sp/>on<sp/>parent<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>parent_classes<sp/>=<sp/>utils.getParentClasses(class_el)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Construct<sp/>the<sp/>abstract<sp/>class<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Construct<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>namespaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/>utils.constrNamespace(namespaces,<sp/></highlight><highlight class="stringliteral">&apos;open&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>If<sp/>this<sp/>class<sp/>is<sp/>a<sp/>template<sp/>specialization,<sp/>add<sp/>&apos;template<sp/>&lt;&gt;&apos;<sp/>at<sp/>the<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_template<sp/>==<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*n_indents*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;template<sp/>&lt;&gt;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Construct<sp/>the<sp/>declaration<sp/>line,<sp/>with<sp/>inheritance<sp/>of<sp/>abstract<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>inheritance_line<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>parent_dict<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>parent_classes:</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;loaded&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inheritance_line<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;virtual<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;access&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;abstr_class_name&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;fundamental&apos;</highlight><highlight class="normal">]<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;std&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>inheritance_line<sp/>+=<sp/>&apos;virtual<sp/>&apos;<sp/>+<sp/>parent_dict[&apos;access&apos;]<sp/>+<sp/>&apos;<sp/>&apos;<sp/>+<sp/>parent_dict[&apos;class_name&apos;][&apos;long_templ&apos;]<sp/>+<sp/>&apos;,<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Avoid<sp/>inheritance<sp/>ambiguity.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infomsg.ParentClassIgnored(abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">],<sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;class_name&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">],<sp/>reason).printMessage()</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Not<sp/>loaded<sp/>or<sp/>accepted<sp/>type.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infomsg.ParentClassIgnored(abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">],<sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;class_name&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">],<sp/>reason).printMessage()</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>inheritance_line<sp/>=<sp/>inheritance_line.rstrip(</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>no<sp/>other<sp/>parent<sp/>classes,<sp/>add<sp/>AbstractBase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>inheritance_line<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inheritance_line<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>:<sp/>public<sp/>virtual<sp/>AbstractBase&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inheritance_line<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>:<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>inheritance_line</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*n_indents*indent</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_template:</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;class<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&lt;&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;,&apos;</highlight><highlight class="normal">.join(template_types)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&gt;&apos;</highlight><highlight class="normal"><sp/>+<sp/>inheritance_line<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;class<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/>inheritance_line<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Construct<sp/>body<sp/>of<sp/>class<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>current_access<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*n_indents*indent</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;{&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>done_members<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr_members_for_init<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>el<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>member_elements:</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element_access<sp/>=<sp/>el.get(</highlight><highlight class="stringliteral">&apos;access&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>element_access<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;public&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>current_access<sp/>!=<sp/>element_access:</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+1)*indent</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/>element_access<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>+</highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_access<sp/>=<sp/>element_access</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>code<sp/>based<sp/>on<sp/>what<sp/>element<sp/>type<sp/>this<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>el.tag<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[</highlight><highlight class="stringliteral">&apos;Constructor&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Destructor&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>(An<sp/>empty<sp/>virtual<sp/>destructor<sp/>will<sp/>be<sp/>added<sp/>later)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>el.tag<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[</highlight><highlight class="stringliteral">&apos;Method&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;OperatorMethod&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>if<sp/>this<sp/>is<sp/>an<sp/>operator<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_operator<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>el.tag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;OperatorMethod&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_operator<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>if<sp/>this<sp/>member<sp/>function<sp/>should<sp/>be<sp/>ignored.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>funcutils.ignoreFunction(el):</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>infomsg.IgnoredMemberFunction(<sp/>is_operator*&apos;operator&apos;<sp/>+<sp/>el.get(&apos;name&apos;)<sp/>).printMessage()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>if<sp/>this<sp/>member<sp/>function<sp/>makes<sp/>use<sp/>of<sp/>loaded<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uses_loaded_type<sp/>=<sp/>funcutils.usesLoadedType(el)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type_dict<sp/>=<sp/>utils.findType(<sp/>gb.id_dict[el.get(</highlight><highlight class="stringliteral">&apos;returns&apos;</highlight><highlight class="normal">)]<sp/>)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_el<sp/><sp/><sp/><sp/><sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;el&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointerness<sp/><sp/><sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;pointerness&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_ref<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;is_reference&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_kw<sp/><sp/><sp/><sp/><sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;cv_qualifiers&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_kw_str<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">.join(return_kw)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*bool(len(return_kw))</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type<sp/><sp/><sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal">*pointerness<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;&apos;</highlight><highlight class="normal">*is_ref</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_is_loaded<sp/>=<sp/>utils.isLoadedClass(return_el)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/>funcutils.getArgs(el)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_args<sp/>=<sp/>funcutils.constrWrapperArgs(args,<sp/>add_ref=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>return<sp/>type<sp/>is<sp/>a<sp/>known<sp/>class,<sp/>add<sp/>&apos;::&apos;<sp/>for<sp/>absolute<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>return_is_loaded)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>utils.isKnownClass(return_el):</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>return_type<sp/></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>constness</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;const&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>el.keys())<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(el.get(</highlight><highlight class="stringliteral">&apos;const&apos;</highlight><highlight class="normal">)==</highlight><highlight class="stringliteral">&apos;1&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_const<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_const<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>default<sp/>arguments<sp/>are<sp/>used,<sp/>we<sp/>need<sp/>to<sp/>generate<sp/>overloaded<sp/>versions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_overloads<sp/>=<sp/>funcutils.numberOfDefaultArgs(el)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>One<sp/>overloaded<sp/>version<sp/>for<sp/>each<sp/>set<sp/>of<sp/>default<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>remove_n_args<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(n_overloads+1):</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>remove_n_args<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_args<sp/><sp/><sp/>=<sp/>args</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_w_args<sp/>=<sp/>w_args</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_args<sp/><sp/><sp/>=<sp/>args[:-remove_n_args]</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_w_args<sp/>=<sp/>w_args[:-remove_n_args]</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_args_bracket<sp/>=<sp/>funcutils.constrArgsBracket(use_w_args,<sp/>include_arg_name=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_arg_type=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_args_bracket_notypes<sp/>=<sp/>funcutils.constrArgsBracket(use_w_args,<sp/>include_arg_name=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_arg_type=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_args_bracket_nonames<sp/>=<sp/>funcutils.constrArgsBracket(use_w_args,<sp/>include_arg_name=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>include_arg_type=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_operator:</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>uses_loaded_type:</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_func_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;operator_&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.operator_names[el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)]<sp/>+<sp/>gb.code_suffix</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_func_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;operator&apos;</highlight><highlight class="normal"><sp/>+<sp/>el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>uses_loaded_type<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>(remove_n_args&gt;0):</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_func_name<sp/>=<sp/>el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)<sp/>+<sp/>gb.code_suffix<sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_func_name<sp/>=<sp/>el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>the<sp/>method<sp/>makes<sp/>use<sp/>of<sp/>a<sp/>loaded<sp/>class,<sp/>construct<sp/>a<sp/>pair<sp/>of<sp/>wrapper<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>uses_loaded_type:</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Construct<sp/>the<sp/>virtual<sp/>member<sp/>function<sp/>that<sp/>is<sp/>overridden,<sp/>e.g.:<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/>virtual<sp/>X*<sp/>getX_GAMBIT(arguments)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>return_is_loaded:</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_ref:</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>w_return_type<sp/>=<sp/>toWrapperType(return_type,<sp/>include_namespace=True,<sp/>include_global_namespace=True)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_return_type<sp/>=<sp/>toAbstractType(return_type,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>is_ref)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(pointerness<sp/>&gt;<sp/>0):</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_return_type<sp/>=<sp/>toAbstractType(return_type,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_return_type<sp/>=<sp/>toAbstractType(return_type,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>add_pointer=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>remove_reference=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_return_type<sp/>=<sp/>return_type</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;virtual<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>return_kw_str<sp/>+<sp/>w_return_type<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>w_func_name<sp/>+<sp/>w_args_bracket_nonames<sp/>+<sp/>is_const*</highlight><highlight class="stringliteral">&apos;<sp/>const&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>=0;&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>the<sp/>method<sp/>does<sp/>not<sp/>make<sp/>use<sp/>of<sp/>any<sp/>loaded<sp/>class,<sp/>construct<sp/>a<sp/>single<sp/>virtual<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;virtual<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>return_kw_str<sp/>+<sp/>return_type<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>w_func_name<sp/>+<sp/>w_args_bracket_nonames<sp/>+<sp/>is_const*</highlight><highlight class="stringliteral">&apos;<sp/>const&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>=0;&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>element<sp/>is<sp/>a<sp/>public<sp/>member<sp/>variable<sp/>of<sp/>accepted<sp/>type,<sp/>construct<sp/>virtual<sp/>method<sp/>that<sp/>returns<sp/>a<sp/>reference<sp/>to<sp/>this<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>(el.tag<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;Field&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Variable&apos;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(el.get(</highlight><highlight class="stringliteral">&apos;access&apos;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;public&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>isAcceptedMemberVariable(el):</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/>constrVariableRefFunction(el,<sp/>virtual=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>indent=indent,<sp/>n_indents=n_indents+2)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>For<sp/>member<sp/>variables<sp/>that<sp/>are<sp/>of<sp/>type<sp/>pointer-to-loaded-class,<sp/>create<sp/>a<sp/>pointer-to-wrapper-class<sp/>member<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>utils.isLoadedClass(el):</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>el_type_dict<sp/>=<sp/>utils.findType(el)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointerness<sp/>=<sp/>el_type_dict[</highlight><highlight class="stringliteral">&apos;pointerness&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_ref<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>el_type_dict[</highlight><highlight class="stringliteral">&apos;is_reference&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pointerness<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>is_ref):</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>el_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>el_type_dict[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal">*pointerness</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variable_name<sp/>=<sp/>el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)<sp/>+<sp/>gb.code_suffix</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/>el_type<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>variable_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Register<sp/>variable<sp/>name<sp/>so<sp/>that<sp/>it<sp/>can<sp/>be<sp/>initialized<sp/>in<sp/>the<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_members_for_init.append(variable_name)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Ignore<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Member<sp/>functions<sp/>of<sp/>the<sp/>abstract<sp/>class<sp/>living<sp/>in<sp/>GAMBIT<sp/>should<sp/>never<sp/>be<sp/>called.<sp/>If<sp/>that<sp/>happens,<sp/>something<sp/>is<sp/>very<sp/>wrong.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>general_boss_warning<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;BOSS<sp/>WARNING:<sp/>Problem<sp/>detected<sp/>with<sp/>the<sp/>BOSSed<sp/>class<sp/>%s<sp/>from<sp/>backend<sp/>%s.<sp/>The<sp/>function<sp/>%s::%s<sp/>in<sp/>GAMBIT<sp/>should<sp/>never<sp/>have<sp/>been<sp/>called...&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Construct<sp/>&apos;pointer_assign&apos;<sp/>and<sp/>&apos;pointer_copy&apos;<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>class_name[</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">]<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>gb.contains_pure_virtual_members:</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Contains<sp/>pure<sp/>virtual<sp/>member<sp/>functions.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infomsg.NoPointerCopyAndAssignmentFunctions(class_name[</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">],<sp/>reason).printMessage()</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>has_copy_constructor<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>construct_assignment_operator:</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+1)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;public:\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>construct_assignment_operator:</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>parent_dict<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>parent_classes:</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent_dict[</highlight><highlight class="stringliteral">&apos;loaded&apos;</highlight><highlight class="normal">])<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(parent_dict[</highlight><highlight class="stringliteral">&apos;class_name&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">]<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>gb.contains_pure_virtual_members):</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;using<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;abstr_class_name&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::pointer_assign&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.code_suffix<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/>constrPtrAssignFunc(class_el,<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">],<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">],<sp/>virtual=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>indent=indent,<sp/>n_indents=n_indents+2)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>has_copy_constructor:</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/>constrPtrCopyFunc(class_el,<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">],<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">],<sp/>virtual=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>indent=indent,<sp/>n_indents=n_indents+2)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Construct<sp/>code<sp/>needed<sp/>for<sp/>&apos;destructor<sp/>pattern&apos;<sp/>(abstract<sp/>class<sp/>and<sp/>wrapper<sp/>class<sp/>must<sp/>can<sp/>delete<sp/>each<sp/>other)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+1)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;private:\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/><sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*<sp/>wptr;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;bool<sp/>delete_wrapper;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+1)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;public:\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*<sp/>get_wptr()<sp/>{<sp/>return<sp/>wptr;<sp/>}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;void<sp/>set_wptr(&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*<sp/>wptr_in)<sp/>{<sp/>wptr<sp/>=<sp/>wptr_in;<sp/>}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;bool<sp/>get_delete_wrapper()<sp/>{<sp/>return<sp/>delete_wrapper;<sp/>}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;void<sp/>set_delete_wrapper(bool<sp/>del_wrp_in)<sp/>{<sp/>delete_wrapper<sp/>=<sp/>del_wrp_in;<sp/>}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+1)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;public:\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/><sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;()\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gb.debug_mode:</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+3)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;std::cerr<sp/>&lt;&lt;<sp/>&quot;DEBUG:<sp/>&quot;<sp/>&lt;&lt;<sp/>this<sp/>&lt;&lt;<sp/>&quot;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>ctor&quot;<sp/>&lt;&lt;<sp/>std::endl;\n&apos;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+3)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;wptr<sp/>=<sp/>0;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+3)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;delete_wrapper<sp/>=<sp/>false;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>--<sp/>Construct<sp/>code<sp/>for<sp/>calling<sp/>copy<sp/>constructors<sp/>of<sp/>*all*<sp/>parent<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>(Required<sp/>because<sp/>this<sp/>is<sp/>the<sp/>copy<sp/>ctor<sp/>of<sp/>an<sp/>abstract<sp/>base<sp/>class.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>all_parent_classes<sp/>=<sp/>utils.getAllParentClasses(class_el,<sp/>only_loaded_classes=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>return_dicts=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>reverse_order=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>parent_cctors_line<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>parent_dict<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>all_parent_classes:</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;loaded&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_cctors_line<sp/>+=<sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;abstr_class_name&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(in),<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;fundamental&apos;</highlight><highlight class="normal">]<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;std&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Avoid<sp/>inheritance<sp/>ambiguity.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infomsg.ParentClassIgnored(abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">],<sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;class_name&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">],<sp/>reason).printMessage()</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Not<sp/>loaded<sp/>or<sp/>accepted<sp/>type.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infomsg.ParentClassIgnored(abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">],<sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;class_name&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">],<sp/>reason).printMessage()</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>parent_cctors_line<sp/>=<sp/>parent_cctors_line.rstrip(</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>parent_cctors_line<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(const<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;)\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_cctors_line<sp/>=<sp/>parent_cctors_line.rstrip(</highlight><highlight class="stringliteral">&apos;,\n&apos;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(const<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;<sp/>in)<sp/>:<sp/>\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+3)*indent<sp/>+<sp/>parent_cctors_line</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gb.debug_mode:</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+3)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;std::cerr<sp/>&lt;&lt;<sp/>&quot;DEBUG:<sp/>&quot;<sp/>&lt;&lt;<sp/>this<sp/>&lt;&lt;<sp/>&quot;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>copy<sp/>ctor&quot;<sp/>&lt;&lt;<sp/>std::endl;\n&apos;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+3)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;wptr<sp/>=<sp/>0;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+3)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;delete_wrapper<sp/>=<sp/>false;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Assignment<sp/>operator.<sp/>(Actually,<sp/>no<sp/>copying<sp/>should<sp/>be<sp/>done.<sp/>It<sp/>only<sp/>returns<sp/>*this.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;<sp/>operator=(const<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;)<sp/>{<sp/>return<sp/>*this;<sp/>}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Function<sp/>init_wrapper()<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>file_for_gambit:</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;virtual<sp/>void<sp/>init_wrapper()<sp/>=0;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;virtual<sp/>void<sp/>init_wrapper()\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+3)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;if<sp/>(wptr<sp/>==<sp/>0)\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+3)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+4)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;wptr<sp/>=<sp/>wrapper_creator(this);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>class_decl<sp/>+=<sp/>&apos;<sp/>&apos;*(n_indents+4)*indent<sp/>+<sp/>&apos;wrapper_creator(this);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+4)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;delete_wrapper<sp/>=<sp/>true;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+3)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Function<sp/>get_init_wptr()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*<sp/>get_init_wptr()\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+3)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;init_wrapper();\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+3)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;return<sp/>wptr;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Function<sp/>get_init_wref()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;<sp/>get_init_wref()\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+3)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;init_wrapper();\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+3)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;return<sp/>*wptr;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>file_for_gambit:</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;virtual<sp/>~&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;()<sp/>=0;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;virtual<sp/>~&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;()\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gb.debug_mode:</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+3)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;std::cerr<sp/>&lt;&lt;<sp/>&quot;DEBUG:<sp/>&quot;<sp/>&lt;&lt;<sp/>this<sp/>&lt;&lt;<sp/>&quot;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>dtor<sp/>(BEGIN)&quot;<sp/>&lt;&lt;<sp/>std::endl;\n&apos;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+3)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;if<sp/>(wptr<sp/>!=<sp/>0)\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+3)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+4)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;set_delete_BEptr(wptr,<sp/>false);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+4)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;if<sp/>(delete_wrapper<sp/>==<sp/>true)\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+4)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+5)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;wrapper_deleter(wptr);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+5)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;wptr<sp/>=<sp/>0;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Set<sp/>wptr<sp/>=<sp/>0<sp/>in<sp/>all<sp/>parent<sp/>classes<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>parent_dict<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>all_parent_classes:</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;loaded&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+5)*indent<sp/>+<sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;abstr_class_name&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::set_wptr(0);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+5)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;delete_wrapper<sp/>=<sp/>false;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+4)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+3)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gb.debug_mode:</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+3)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;std::cerr<sp/>&lt;&lt;<sp/>&quot;DEBUG:<sp/>&quot;<sp/>&lt;&lt;<sp/>this<sp/>&lt;&lt;<sp/>&quot;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>dtor<sp/>(END)&quot;<sp/>&lt;&lt;<sp/>std::endl;\n&apos;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+2)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Close<sp/>the<sp/>class<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*n_indents*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;};&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Construct<sp/>the<sp/>closing<sp/>of<sp/>the<sp/>namespaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>+=<sp/>utils.constrNamespace(namespaces,<sp/></highlight><highlight class="stringliteral">&apos;close&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Insert<sp/>tags<sp/>for<sp/>the<sp/>GAMBIT<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;\n__START_GAMBIT_NAMESPACE__\n\n&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_decl<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n__END_GAMBIT_NAMESPACE__\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Add<sp/>forward<sp/>declaration<sp/>of<sp/>wrapper_creator<sp/>function<sp/>(needed<sp/>by<sp/>the<sp/>&apos;destructor<sp/>pattern&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>file_for_gambit:</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frwd_decl_creator<sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frwd_decl_creator<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>Forward<sp/>declaration<sp/>for<sp/>wrapper_creator.\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frwd_decl_creator<sp/>+=<sp/>gb.gambit_backend_namespace<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;long&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*<sp/>wrapper_creator(&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.gambit_backend_namespace<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;long&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>frwd_decl_creator<sp/>+=<sp/>&apos;void<sp/>wrapper_creator(&apos;<sp/>+<sp/>gb.gambit_backend_namespace<sp/>+<sp/>&apos;::&apos;<sp/>+<sp/>abstr_class_name[&apos;long&apos;]<sp/>+<sp/>&apos;*);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frwd_decl_creator<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>=<sp/>frwd_decl_creator<sp/>+<sp/>class_decl</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Add<sp/>forward<sp/>declaration<sp/>of<sp/>wrapper_deleter<sp/>function<sp/>(needed<sp/>by<sp/>the<sp/>&apos;destructor<sp/>pattern&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>file_for_gambit:</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frwd_decl_deleter<sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frwd_decl_deleter<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>Forward<sp/>declaration<sp/>needed<sp/>by<sp/>the<sp/>destructor<sp/>pattern.\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frwd_decl_deleter<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;void<sp/>wrapper_deleter(&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.gambit_backend_namespace<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;long&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frwd_decl_deleter<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>=<sp/>frwd_decl_deleter<sp/>+<sp/>class_decl</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Add<sp/>forward<sp/>declaration<sp/>of<sp/>set_delete_BEptr<sp/>function<sp/>(needed<sp/>by<sp/>the<sp/>&apos;destructor<sp/>pattern&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>file_for_gambit:</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frwd_decl_setdel<sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frwd_decl_setdel<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>Forward<sp/>declaration<sp/>needed<sp/>by<sp/>the<sp/>destructor<sp/>pattern.\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frwd_decl_setdel<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;void<sp/>set_delete_BEptr(&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.gambit_backend_namespace<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;long&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*,<sp/>bool);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frwd_decl_setdel<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_decl<sp/>=<sp/>frwd_decl_setdel<sp/>+<sp/>class_decl</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Insert<sp/>include<sp/>statements<sp/>needed<sp/>by<sp/>GAMBIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>backend_undef_incl_statement<sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;&apos;</highlight><highlight class="normal"><sp/>+<sp/>os.path.join(gb.gambit_backend_incl_dir,<sp/></highlight><highlight class="stringliteral">&apos;backend_undefs.hpp&apos;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&quot;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>identification_incl_statement<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;identification.hpp&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&quot;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>class_decl<sp/>=<sp/>identification_incl_statement<sp/>+<sp/>class_decl<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>+<sp/>backend_undef_incl_statement</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>class_decl</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>constrAbstractClassDecl<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>getAcceptableConstructors<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">getAcceptableConstructors(class_el,<sp/>skip_copy_constructors=False):</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>for<sp/>copy<sp/>constructor?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>skip_copy_constructors:</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has_copy_constructor,<sp/>copy_constr_id<sp/>=<sp/>checkCopyConstructor(class_el,<sp/>return_id=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Create<sp/>list<sp/>of<sp/>all<sp/>acceptable<sp/>constructors<sp/>of<sp/>the<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>constructor_elements<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;members&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>class_el.keys():</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>mem_id<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>class_el.get(</highlight><highlight class="stringliteral">&apos;members&apos;</highlight><highlight class="normal">).split():</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>el<sp/>=<sp/>gb.id_dict[mem_id]</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(el.tag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;Constructor&apos;</highlight><highlight class="normal">):<sp/></highlight><highlight class="comment">#and<sp/>(&apos;artificial&apos;<sp/>not<sp/>in<sp/>el.keys()):<sp/><sp/>#(el.get(&apos;explicit&apos;)<sp/>==<sp/>&quot;1&quot;):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>skip_copy_constructors<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(el.get(</highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">)<sp/>==<sp/>copy_constr_id):</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constructor_elements.append(el)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>constructor_elements</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>getAcceptableConstructors<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>constrFactoryFunctionCode<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">constrFactoryFunctionCode(class_el,<sp/>class_name,<sp/>indent=4,<sp/>template_types=[],<sp/>skip_copy_constructors=False,<sp/>use_wrapper_return=False,<sp/>use_wrapper_args=False,<sp/>add_include_statements=True,<sp/>add_signatures_comment=True):</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Replace<sp/>&apos;*&apos;<sp/>and<sp/>&apos;&amp;&apos;<sp/>in<sp/>list<sp/>of<sp/>template<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>template_types<sp/>=<sp/>[e.replace(</highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;P&apos;</highlight><highlight class="normal">).replace(</highlight><highlight class="stringliteral">&apos;&amp;&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;R&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>e<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>template_types]</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>constructor_elements<sp/>=<sp/>getAcceptableConstructors(class_el,<sp/>skip_copy_constructors=skip_copy_constructors)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>no<sp/>public<sp/>constructors<sp/>are<sp/>found,<sp/>return<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(constructor_elements)<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>public<sp/>constructors.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infomsg.NoFactoryFunctions(class_name[</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">],<sp/>reason).printMessage()</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>List<sp/>to<sp/>hold<sp/>include<sp/>statements<sp/>that<sp/>are<sp/>generated<sp/>based<sp/>on<sp/>the<sp/>types<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>in<sp/>the<sp/>constructors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>add_include_statements:</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_statements<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Construct<sp/>factory<sp/>function<sp/>definition(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>func_def<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>counter<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>el<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>constructor_elements:</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(el.tag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;Constructor&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>((el.get(</highlight><highlight class="stringliteral">&apos;access&apos;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;protected&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>(el.get(</highlight><highlight class="stringliteral">&apos;access&apos;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;private&apos;</highlight><highlight class="normal">)):</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>add_include_statements:</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Generate<sp/>include<sp/>statements<sp/>based<sp/>on<sp/>the<sp/>types<sp/>used<sp/>in<sp/>the<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_statements<sp/>+=<sp/>utils.getIncludeStatements(el,<sp/>convert_loaded_to=</highlight><highlight class="stringliteral">&apos;none&apos;</highlight><highlight class="normal">,<sp/>input_element=</highlight><highlight class="stringliteral">&apos;function&apos;</highlight><highlight class="normal">,<sp/>forward_declared=</highlight><highlight class="stringliteral">&apos;exclude&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_statements<sp/>+=<sp/>utils.getIncludeStatements(el,<sp/>convert_loaded_to=</highlight><highlight class="stringliteral">&apos;wrapper&apos;</highlight><highlight class="normal">,<sp/>input_element=</highlight><highlight class="stringliteral">&apos;function&apos;</highlight><highlight class="normal">,<sp/>forward_declared=</highlight><highlight class="stringliteral">&apos;exclude&apos;</highlight><highlight class="normal">,<sp/>use_full_path=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>need<sp/>to<sp/>generate<sp/>as<sp/>many<sp/>overloaded<sp/>versions<sp/>as<sp/>there<sp/>are<sp/>arguments<sp/>with<sp/>default<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_overloads<sp/>=<sp/>funcutils.numberOfDefaultArgs(el)</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Identify<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/>funcutils.getArgs(el)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Translate<sp/>argument<sp/>type<sp/>of<sp/>loaded<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>use_wrapper_args:</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_args<sp/>=<sp/>funcutils.constrWrapperArgs(args,<sp/>add_ref=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>convert_loaded_to_abstract=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_args<sp/>=<sp/>funcutils.constrWrapperArgs(args,<sp/>add_ref=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>convert_loaded_to_abstract=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Invent<sp/>argument<sp/>names<sp/>if<sp/>missing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argc<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(len(args)):</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>args[i][</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args[i][</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;arg_&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(argc)</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argc<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Generate<sp/>one<sp/>factory<sp/>function<sp/>for<sp/>each<sp/>set<sp/>of<sp/>default<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>remove_n_args<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(n_overloads+1):</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>that<sp/>the<sp/>constructor<sp/>is<sp/>acceptable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>funcutils.ignoreFunction(el,<sp/>limit_pointerness=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>remove_n_args=remove_n_args):</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Factory<sp/>function<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factory_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Factory_&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;_&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(counter)</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(template_types)<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factory_name<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;_&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;_&apos;</highlight><highlight class="normal">.join(template_types)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factory_name<sp/>+=<sp/>gb.code_suffix<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;_&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(gb.symbol_name_counter)</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gb.symbol_name_counter<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>remove_n_args<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_args<sp/><sp/><sp/>=<sp/>args</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_w_args<sp/>=<sp/>w_args</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_args<sp/><sp/><sp/>=<sp/>args[:-remove_n_args]</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_w_args<sp/>=<sp/>w_args[:-remove_n_args]</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Construct<sp/>bracket<sp/>with<sp/>input<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>use_wrapper_args:</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args_bracket<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>funcutils.constrArgsBracket(use_w_args,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>use_wrapper_class=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args_bracket_notypes<sp/>=<sp/>funcutils.constrArgsBracket(use_args,<sp/>include_arg_type=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>cast_to_original=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>wrapper_to_pointer=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args_bracket<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>funcutils.constrArgsBracket(use_w_args,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args_bracket_notypes<sp/>=<sp/>funcutils.constrArgsBracket(use_args,<sp/>include_arg_type=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>cast_to_original=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args_bracket_nonames<sp/>=<sp/>funcutils.constrArgsBracket(use_args,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_arg_type=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_arg_name=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>add_namespace_to_loaded=</highlight><highlight class="stringliteral">&apos;my_ns&apos;</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Generate<sp/>declaration<sp/>line:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>use_wrapper_return:</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type<sp/>=<sp/>toWrapperType(class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">],<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type<sp/>=<sp/>toAbstractType(class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">],<sp/>add_pointer=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_def<sp/>+=<sp/>return_type<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>factory_name<sp/>+<sp/>args_bracket<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Generate<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_def<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;{&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>use_wrapper_return:</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_def<sp/>+=<sp/>indent*</highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;return<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>return_type<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(<sp/>new<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;long&apos;</highlight><highlight class="normal">]<sp/>+<sp/>args_bracket_notypes<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>);&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_def<sp/>+=<sp/>indent*</highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;return<sp/>new<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/>args_bracket_notypes<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;;&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_def<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;}&apos;</highlight><highlight class="normal"><sp/>+<sp/>2*</highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>info<sp/>to<sp/>global<sp/>dict<sp/>with<sp/>factory<sp/>function<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info_dict<sp/>=<sp/>OrderedDict()</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info_dict[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>factory_name</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info_dict[</highlight><highlight class="stringliteral">&apos;args_bracket&apos;</highlight><highlight class="normal">]<sp/>=<sp/>args_bracket_nonames</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>class_name[</highlight><highlight class="stringliteral">&apos;long&apos;</highlight><highlight class="normal">]<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>gb.factory_info.keys():</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gb.factory_info[class_name[</highlight><highlight class="stringliteral">&apos;long&apos;</highlight><highlight class="normal">]]<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gb.factory_info[class_name[</highlight><highlight class="stringliteral">&apos;long&apos;</highlight><highlight class="normal">]].append(<sp/>info_dict<sp/>)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Increment<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>no<sp/>functions<sp/>were<sp/>generated,<sp/>return<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>func_def<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>accepted<sp/>constructors.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infomsg.NoFactoryFunctions(class_name[</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">],<sp/>reason).printMessage()</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Encapsulate<sp/>code<sp/>in<sp/>the<sp/>correct<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>namespaces<sp/>=<sp/>utils.getNamespaces(class_el)</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>n_indents<sp/>=<sp/>len(namespaces)</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>func_def_in_ns<sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>func_def_in_ns<sp/>+=<sp/>utils.constrNamespace(namespaces,<sp/></highlight><highlight class="stringliteral">&apos;open&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>func_def_in_ns<sp/>+=<sp/>utils.addIndentation(func_def,<sp/>n_indents*cfg.indent)</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>func_def_in_ns<sp/>+=<sp/>utils.constrNamespace(namespaces,<sp/></highlight><highlight class="stringliteral">&apos;close&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Encapsulate<sp/>code<sp/>in<sp/>&apos;extern<sp/>&quot;C&quot;<sp/>{...}&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>func_def_in_ns<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;extern<sp/>&quot;C&quot;\n{\n&apos;</highlight><highlight class="normal"><sp/>+<sp/>func_def_in_ns<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>return_code<sp/>=<sp/>func_def_in_ns</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>add_include_statements:</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>original_header_fname<sp/>=<sp/>utils.getOriginalHeaderPath(class_el,<sp/>full_path=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_path<sp/>=<sp/>utils.shortenHeaderPath(original_header_fname)</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_statements.append(<sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;&apos;</highlight><highlight class="normal"><sp/>+<sp/>use_path<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>exceptions.ReturnError<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>e:</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/><sp/></highlight><highlight class="stringliteral">&quot;No<sp/>original<sp/>header<sp/>file<sp/>found.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infomsg.NoIncludeStatementGenerated(class_name[</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">],<sp/>reason).printMessage()</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_statements.append(<sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.new_header_files[class_name[</highlight><highlight class="stringliteral">&apos;long&apos;</highlight><highlight class="normal">]][</highlight><highlight class="stringliteral">&apos;wrapper_fullpath&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_statements.append(<sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;&apos;</highlight><highlight class="normal"><sp/>+<sp/>os.path.join(gb.gambit_backend_incl_dir,<sp/>gb.abstract_typedefs_fname<sp/>+<sp/>cfg.header_extension)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_statements.append(<sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;&apos;</highlight><highlight class="normal"><sp/>+<sp/>os.path.join(gb.gambit_backend_incl_dir,<sp/>gb.wrapper_typedefs_fname<sp/>+<sp/>cfg.header_extension)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_statements<sp/>=<sp/>list(<sp/>OrderedDict.fromkeys(include_statements)<sp/>)</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_statements<sp/>=<sp/>utils.orderIncludeStatements(include_statements)</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_statements_code<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">.join(include_statements)<sp/>+<sp/>2*</highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_code<sp/>=<sp/>include_statements_code<sp/>+<sp/>return_code</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_code</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>constrFactoryFunctionCode<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>constrWrapperFunction<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">constrWrapperFunction(method_el,<sp/>indent=cfg.indent,<sp/>n_indents=0,<sp/>remove_n_args=0,<sp/>only_declaration=False,<sp/>include_full_namespace=False):</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>if<sp/>this<sp/>is<sp/>an<sp/>operator<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>is_operator<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>method_el.tag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;OperatorMethod&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_operator<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>operator,<sp/>check<sp/>that<sp/>we<sp/>have<sp/>a<sp/>name<sp/>for<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_operator)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(method_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>gb.operator_names.keys()):</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>Exception(</highlight><highlight class="stringliteral">&apos;No<sp/>known<sp/>name<sp/>for<sp/>the<sp/>operator:<sp/>%s<sp/><sp/>--<sp/>Add<sp/>an<sp/>entry<sp/>to<sp/>the<sp/>following<sp/>dictionary:<sp/>gb.operator_names&apos;</highlight><highlight class="normal"><sp/>%<sp/>method_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Function<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_operator:</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;operator&apos;</highlight><highlight class="normal"><sp/>+<sp/>method_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_name<sp/>=<sp/>method_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Function<sp/>return<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>return_type_dict<sp/>=<sp/>utils.findType(<sp/>gb.id_dict[method_el.get(</highlight><highlight class="stringliteral">&apos;returns&apos;</highlight><highlight class="normal">)]<sp/>)</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>return_el<sp/><sp/><sp/><sp/><sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;el&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerness<sp/><sp/><sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;pointerness&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>is_ref<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;is_reference&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>return_kw<sp/><sp/><sp/><sp/><sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;cv_qualifiers&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>return_kw_str<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">.join(return_kw)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*bool(len(return_kw))</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>return_type<sp/><sp/><sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal">*pointerness<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;&apos;</highlight><highlight class="normal">*is_ref</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>return_is_loaded_class<sp/>=<sp/>utils.isLoadedClass(return_el)</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Function<sp/>arguments<sp/>(get<sp/>list<sp/>of<sp/>dicts<sp/>with<sp/>argument<sp/>info)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>args<sp/>=<sp/>funcutils.getArgs(method_el)</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Remove<sp/>arguments<sp/>when<sp/>creating<sp/>overloaded<sp/>versions<sp/>(for<sp/>dealing<sp/>with<sp/>default<sp/>argument<sp/>values)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>remove_n_args<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/>args[:-remove_n_args]</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>constness<sp/>(in<sp/>the<sp/>following<sp/>sense:<sp/>&quot;double<sp/>someFunction()<sp/>const&quot;,<sp/>i.e.<sp/>a<sp/>function<sp/>that<sp/>does<sp/>not<sp/>modify<sp/>member<sp/>variables.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;const&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>method_el.keys())<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(method_el.get(</highlight><highlight class="stringliteral">&apos;const&apos;</highlight><highlight class="normal">)==</highlight><highlight class="stringliteral">&apos;1&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_const<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_const<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Construct<sp/>wrapper<sp/>function<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>w_func_name<sp/>=<sp/>funcutils.constrWrapperName(method_el,<sp/>include_full_namespace=include_full_namespace)</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>remove_n_args<sp/>&gt;<sp/>0:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>w_func_name<sp/>+=<sp/>&apos;_overload_&apos;<sp/>+<sp/>str(remove_n_args)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Choose<sp/>wrapper<sp/>return<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>return_is_loaded_class:</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pointerness<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(is_ref):</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_return_type<sp/>=<sp/>toAbstractType(return_type,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>(pointerness<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>is_ref):</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_return_type<sp/>=<sp/>toAbstractType(return_type,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>add_pointer=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>remove_reference=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_return_type<sp/>=<sp/>toAbstractType(return_type,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_return_type<sp/>=<sp/>return_type</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Construct<sp/>list<sp/>of<sp/>arguments<sp/>for<sp/>wrapper<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>w_args<sp/>=<sp/>funcutils.constrWrapperArgs(args,<sp/>add_ref=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Construct<sp/>bracket<sp/>with<sp/>input<sp/>arguments<sp/>for<sp/>wrapper<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>only_declaration:</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_args_bracket<sp/>=<sp/>funcutils.constrArgsBracket(w_args,<sp/>include_arg_name=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_args_bracket<sp/>=<sp/>funcutils.constrArgsBracket(w_args,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Construct<sp/>declaration<sp/>line<sp/>for<sp/>wrapper<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>w_func_line<sp/>=<sp/>funcutils.constrDeclLine(w_return_type,<sp/>w_func_name,<sp/>w_args_bracket,<sp/>keywords=return_kw,<sp/>is_const=is_const)</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Construct<sp/>function<sp/>body<sp/>for<sp/>wrapper<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>only_declaration:</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w_func_body<sp/>=<sp/>funcutils.constrWrapperBody(return_type,<sp/>func_name,<sp/>args,<sp/>return_is_loaded_class,<sp/>keywords=return_kw)</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Combine<sp/>code<sp/>and<sp/>add<sp/>indentation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>wrapper_code<sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>only_declaration:</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper_code<sp/>+=<sp/>utils.addIndentation(w_func_line,<sp/>n_indents*indent)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper_code<sp/>+=<sp/>utils.addIndentation(w_func_line,<sp/>n_indents*indent)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper_code<sp/>+=<sp/>utils.addIndentation(w_func_body,<sp/>n_indents*indent)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Return<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper_code</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>constrWrapperFunction<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>constrVariableRefFunction<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">constrVariableRefFunction(var_el,<sp/>virtual=False,<sp/>indent=cfg.indent,<sp/>n_indents=0,<sp/>only_declaration=False,</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include_full_namespace=False,<sp/>add_return_type_suffix=False):</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>func_code<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>var_name<sp/>=<sp/>var_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>var_type_dict<sp/><sp/><sp/><sp/>=<sp/>utils.findType(<sp/>var_el<sp/>)</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>var_type_name<sp/><sp/><sp/><sp/>=<sp/>var_type_dict[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerness<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>var_type_dict[</highlight><highlight class="stringliteral">&apos;pointerness&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>is_ref<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>var_type_dict[</highlight><highlight class="stringliteral">&apos;is_reference&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>var_kw<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>var_type_dict[</highlight><highlight class="stringliteral">&apos;cv_qualifiers&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>var_array_limits<sp/>=<sp/>var_type_dict[</highlight><highlight class="stringliteral">&apos;array_limits&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>is_array<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>var_type_dict[</highlight><highlight class="stringliteral">&apos;is_array&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>var_array_limits_str<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">.join([<sp/></highlight><highlight class="stringliteral">&apos;[%i]&apos;</highlight><highlight class="normal"><sp/>%<sp/>i<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>var_array_limits<sp/>])</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>var_kw_str<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">.join(var_kw)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*bool(len(var_kw))</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>var_type<sp/><sp/><sp/>=<sp/>var_type_dict[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal">*pointerness<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;&apos;</highlight><highlight class="normal">*is_ref</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>pointerness,<sp/>is_ref<sp/>=<sp/>utils.pointerAndRefCheck(var_el)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>ref_method_name<sp/>=<sp/>var_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;_ref&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.code_suffix</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>include_full_namespace:</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespaces<sp/>=<sp/>utils.getNamespaces(var_el)</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(namespaces)<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ref_method_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal">.join(namespaces)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>ref_method_name</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>var_is_loaded_class<sp/>=<sp/>utils.isLoadedClass(var_el)</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var_is_loaded_class)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(pointerness<sp/>==<sp/>0):</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type<sp/>=<sp/>toAbstractType(var_type)</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>(var_is_loaded_class)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(pointerness<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(add_return_type_suffix):</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type<sp/><sp/><sp/>=<sp/>toWrapperType(var_type,<sp/>include_namespace=include_full_namespace)</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_type_name<sp/>=<sp/>toWrapperType(var_type_name,<sp/>include_namespace=include_full_namespace)</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type<sp/>=<sp/>var_type</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>variable<sp/>type<sp/>is<sp/>a<sp/>known<sp/>class,<sp/>add<sp/>&apos;::&apos;<sp/>for<sp/>absolute<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>var_is_loaded_class)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>utils.isKnownClass(var_el):</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>return_type<sp/></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>is_ref)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>is_array):</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type<sp/>=<sp/>return_type<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>func_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*n_indents*indent</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>virtual:</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_array:</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;virtual<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>var_kw_str<sp/>+<sp/>return_type<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>(&amp;&apos;</highlight><highlight class="normal"><sp/>+<sp/>ref_method_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;())&apos;</highlight><highlight class="normal"><sp/>+<sp/>var_array_limits_str<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>=0;\n&apos;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;virtual<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>var_kw_str<sp/>+<sp/>return_type<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>ref_method_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;()<sp/>=0;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_array:</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_code<sp/>+=<sp/>var_kw_str<sp/>+<sp/>return_type<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>(&amp;&apos;</highlight><highlight class="normal"><sp/>+<sp/>ref_method_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;())&apos;</highlight><highlight class="normal"><sp/>+<sp/>var_array_limits_str</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_code<sp/>+=<sp/>var_kw_str<sp/>+<sp/>return_type<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>ref_method_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;()&apos;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>only_declaration:</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var_is_loaded_class)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(pointerness<sp/>&gt;<sp/>0):</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper_var_name<sp/>=<sp/>var_name<sp/>+<sp/>gb.code_suffix</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*n_indents*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+1)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;if<sp/>(not<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>wrapper_var_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;)<sp/>{<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>wrapper_var_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>=<sp/>new<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>var_type_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(&apos;</highlight><highlight class="normal"><sp/>+<sp/>var_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;,<sp/>true);<sp/>}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*(n_indents+1)*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;return<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>wrapper_var_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*n_indents*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>{<sp/>return<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>var_name<sp/><sp/>+</highlight><highlight class="stringliteral">&apos;;<sp/>}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func_code</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>constrVariableRefFunction<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>constrPtrCopyFunc<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">constrPtrCopyFunc(class_el,<sp/>abstr_class_name_short,<sp/>class_name_short,<sp/>virtual=False,<sp/>indent=cfg.indent,<sp/>n_indents=0,<sp/>only_declaration=False,<sp/>include_full_namespace=False):</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>func_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;pointer_copy&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.code_suffix</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>class_name<sp/>=<sp/>class_name_short</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>abstr_class_name<sp/>=<sp/>abstr_class_name_short</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>include_full_namespace:</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespaces_with_self<sp/>=<sp/>utils.getNamespaces(class_el,<sp/>include_self=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespaces<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>utils.getNamespaces(class_el)</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(namespaces_with_self)<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal">.join(namespaces_with_self)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>func_name</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(namespaces)<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abstr_class_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal">.join(namespaces)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal">.join(namespaces)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr_code<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>virtual:</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*cfg.indent*n_indents<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;virtual<sp/>&apos;</highlight><highlight class="normal">+<sp/>abstr_class_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>func_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;()<sp/>=0;\n&apos;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*cfg.indent*n_indents<sp/>+<sp/>abstr_class_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>func_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;()&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>only_declaration:</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*cfg.indent*n_indents<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*cfg.indent*(n_indents+1)<sp/>+<sp/>abstr_class_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*<sp/>new_ptr<sp/>=<sp/>new<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name_short<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(*this);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*cfg.indent*(n_indents+1)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;return<sp/>new_ptr;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*cfg.indent*n_indents<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr_code</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>constrPtrCopyFunc<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>constrPtrAssignFunc<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">constrPtrAssignFunc(class_el,<sp/>abstr_class_name_short,<sp/>class_name_short,<sp/>virtual=False,<sp/>indent=cfg.indent,<sp/>n_indents=0,<sp/>only_declaration=False,<sp/>include_full_namespace=False):</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>func_name<sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;pointer_assign&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.code_suffix</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>class_name<sp/>=<sp/>class_name_short</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>abstr_class_name<sp/>=<sp/>abstr_class_name_short</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>include_full_namespace:</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespaces_with_self<sp/>=<sp/>utils.getNamespaces(class_el,<sp/>include_self=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespaces<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>utils.getNamespaces(class_el)</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(namespaces_with_self)<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal">.join(namespaces_with_self)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>func_name</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(namespaces)<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abstr_class_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal">.join(namespaces)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal">.join(namespaces)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr_code<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>virtual:</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*cfg.indent*n_indents<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;virtual<sp/>void<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>func_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*)<sp/>=0;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*cfg.indent*n_indents<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;void<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>func_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*<sp/>in)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>only_declaration:</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*cfg.indent*n_indents<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*cfg.indent*(n_indents+1)<sp/>+<sp/>gb.gambit_backend_namespace<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*<sp/>wptr_temp<sp/>=<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::get_wptr();\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*cfg.indent*(n_indents+1)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*this<sp/>=<sp/>*dynamic_cast&lt;&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name_short<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*&gt;(in);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*cfg.indent*(n_indents+1)<sp/>+<sp/>abstr_class_name_short<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::set_wptr(wptr_temp);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*cfg.indent*n_indents<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr_code</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>constrPtrAssignFunc<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>checkAssignmentOperator<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">checkAssignmentOperator(class_el):</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>found_assignment_operator<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>is_artificial<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Get<sp/>list<sp/>of<sp/>all<sp/>class<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>class_members<sp/>=<sp/>utils.getMemberElements(class_el,<sp/>include_artificial=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Look<sp/>for<sp/>assignment<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>mem_el<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>class_members:</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem_el.tag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;OperatorMethod&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(mem_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;=&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>that<sp/>return<sp/>type<sp/>is<sp/>either<sp/>void<sp/>or<sp/>the<sp/>class<sp/>type<sp/>itself<sp/>(possibly<sp/>as<sp/>a<sp/>reference)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type_dict<sp/>=<sp/>utils.findType(mem_el)</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type<sp/><sp/><sp/><sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal">*return_type_dict[</highlight><highlight class="stringliteral">&apos;pointerness&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;&apos;</highlight><highlight class="normal">*return_type_dict[</highlight><highlight class="stringliteral">&apos;is_reference&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type_id<sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(return_type<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;void&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>(return_type_id<sp/>==<sp/>class_el.get(</highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">)):</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>that<sp/>the<sp/>only<sp/>argument<sp/>is<sp/>another<sp/>class<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/>funcutils.getArgs(mem_el)</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len(args)<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(args[0][</highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">]<sp/>==<sp/>class_el.get(</highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">)):</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found_assignment_operator<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;artificial&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>mem_el.keys())<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(mem_el.get(</highlight><highlight class="stringliteral">&apos;artificial&apos;</highlight><highlight class="normal">)==</highlight><highlight class="stringliteral">&apos;1&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_artificial<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>found_assignment_operator,<sp/>is_artificial</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>checkAssignmentOperator<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>checkCopyConstructor<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">checkCopyConstructor(class_el,<sp/>return_id=False):</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>found_copy_constructor<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>copy_constr_id<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Get<sp/>list<sp/>of<sp/>all<sp/>class<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>class_members<sp/>=<sp/>utils.getMemberElements(class_el,<sp/>include_artificial=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Look<sp/>for<sp/>copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>mem_el<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>class_members:</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem_el.tag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;Constructor&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem_el.get(</highlight><highlight class="stringliteral">&apos;access&apos;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;protected&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>(mem_el.get(</highlight><highlight class="stringliteral">&apos;access&apos;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;private&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>found_copy_constructor,<sp/>copy_constr_id</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>that<sp/>the<sp/>only<sp/>argument<sp/>is<sp/>another<sp/>class<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/>funcutils.getArgs(mem_el)</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len(args)<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(args[0][</highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">]<sp/>==<sp/>class_el.get(</highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">)):</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found_copy_constructor<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_constr_id<sp/>=<sp/>mem_el.get(</highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>return_id:</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>found_copy_constructor,<sp/>copy_constr_id</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>found_copy_constructor</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>checkCopyConstructor<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>toWrapperType<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">toWrapperType(input_type_name,<sp/>remove_reference=False,<sp/>remove_pointers=False,<sp/>include_namespace=False,<sp/>include_global_namespace=False<sp/>):</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>type_name<sp/>=<sp/>input_type_name</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Search<sp/>for<sp/>&apos;*&apos;<sp/>and<sp/>&apos;&amp;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>n_pointers<sp/>=<sp/>type_name.count(</highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>is_ref<sp/><sp/><sp/><sp/><sp/>=<sp/>bool(</highlight><highlight class="stringliteral">&apos;&amp;&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>type_name)</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Remove<sp/>&apos;*&apos;<sp/>and<sp/>&apos;&amp;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>type_name<sp/>=<sp/>type_name.replace(</highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">).replace(</highlight><highlight class="stringliteral">&apos;&amp;&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Split<sp/>into<sp/>namespace,<sp/>short_type_name<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>namespace,<sp/>short_type_name<sp/>=<sp/>utils.removeNamespace(type_name,<sp/>return_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>include_global_namespace:</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>namespace</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Insert<sp/>wrapper<sp/>class<sp/>prefix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>short_type_name<sp/>=<sp/>gb.wrapper_class_prefix<sp/>+<sp/>short_type_name</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>&apos;*&apos;<sp/>and<sp/>&apos;&amp;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>remove_pointers:</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short_type_name<sp/>=<sp/>short_type_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal">*n_pointers</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>remove_reference:</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short_type_name<sp/>=<sp/>short_type_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;&apos;</highlight><highlight class="normal">*is_ref</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Return<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(include_namespace)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(namespace<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>namespace<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>short_type_name</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>short_type_name</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>toWrapperType<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>toAbstractType<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">toAbstractType(input_type_name,<sp/>include_namespace=True,<sp/>add_pointer=False,<sp/>remove_reference=False,<sp/>remove_pointers=False):</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>FIXME:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Should<sp/>this<sp/>function<sp/>also<sp/>translate<sp/>template<sp/>argument<sp/>types?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Example:<sp/>TypeA&lt;TypeB&gt;<sp/><sp/>--&gt;<sp/><sp/>Abstract__TypeA&lt;Abstract__TypeB&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>type_name<sp/>=<sp/>input_type_name</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Remove<sp/>template<sp/>bracket</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>type_name_notempl<sp/>=<sp/>utils.removeTemplateBracket(type_name)</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Search<sp/>for<sp/>&apos;*&apos;<sp/>and<sp/>&apos;&amp;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>n_pointers<sp/>=<sp/>type_name_notempl.count(</highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>is_ref<sp/><sp/><sp/><sp/><sp/>=<sp/>bool(</highlight><highlight class="stringliteral">&apos;&amp;&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>type_name_notempl)</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Get<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>namespace,<sp/>type_name_short<sp/>=<sp/>utils.removeNamespace(type_name,<sp/>return_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_ref<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>remove_reference:</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_name_short<sp/>=<sp/>type_name_short.replace(</highlight><highlight class="stringliteral">&apos;&amp;&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_pointers<sp/>&gt;<sp/>0)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>remove_pointers:</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_name_short<sp/>=<sp/>type_name_short.replace(</highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>namespace<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_name<sp/>=<sp/>gb.abstr_class_prefix<sp/>+<sp/>type_name_short</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_name<sp/>=<sp/>(namespace+</highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal">)*include_namespace<sp/><sp/>+<sp/>gb.abstr_class_prefix<sp/>+<sp/>type_name_short</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>add_pointer:</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_ref<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>remove_reference:</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_name<sp/>=<sp/>type_name.rstrip(</highlight><highlight class="stringliteral">&apos;&amp;&apos;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*&amp;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_name<sp/>=<sp/>type_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Return<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_name</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>toAbstractType<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>getClassNameDict<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">getClassNameDict(class_el,<sp/>abstract=False):</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>class_name<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>xml_id<sp/>=<sp/>class_el.get(</highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>class_el.keys():</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>KeyError(</highlight><highlight class="stringliteral">&apos;XML<sp/>element<sp/>%s<sp/>does<sp/>not<sp/>contain<sp/>the<sp/>key<sp/>&quot;name&quot;.&apos;</highlight><highlight class="normal"><sp/>%<sp/>(xml_id))</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>namespaces_list<sp/>=<sp/>utils.getNamespaces(class_el,<sp/>include_self=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>class_name[</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal">.join(namespaces_list)</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>class_name[</highlight><highlight class="stringliteral">&apos;long&apos;</highlight><highlight class="normal">]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>class_name[</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">].split(</highlight><highlight class="stringliteral">&apos;&lt;&apos;</highlight><highlight class="normal">,1)[0]</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>class_name[</highlight><highlight class="stringliteral">&apos;short_templ&apos;</highlight><highlight class="normal">]<sp/>=<sp/>class_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short_templ&apos;</highlight><highlight class="normal">].split(</highlight><highlight class="stringliteral">&apos;&lt;&apos;</highlight><highlight class="normal">,1)[0]</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>abstract:</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abstr_class_name<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">]<sp/><sp/>=<sp/>getAbstractClassName(class_name[</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">],<sp/>prefix=gb.abstr_class_prefix)</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;long&apos;</highlight><highlight class="normal">]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">].split(</highlight><highlight class="stringliteral">&apos;&lt;&apos;</highlight><highlight class="normal">,1)[0]</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short_templ&apos;</highlight><highlight class="normal">]<sp/>=<sp/>getAbstractClassName(class_name[</highlight><highlight class="stringliteral">&apos;long_templ&apos;</highlight><highlight class="normal">],<sp/>prefix=gb.abstr_class_prefix,<sp/>short=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short_templ&apos;</highlight><highlight class="normal">].split(</highlight><highlight class="stringliteral">&apos;&lt;&apos;</highlight><highlight class="normal">,1)[0]</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>abstr_class_name</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>class_name</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>getClassNameDict<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>constrWrapperDecl<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">constrWrapperDecl(class_name,<sp/>abstr_class_name,<sp/>loaded_parent_classes,<sp/>class_variables,<sp/>class_functions,<sp/>class_constructors,<sp/>construct_assignment_operator,<sp/>has_copy_constructor,<sp/>indent=&apos;<sp/>&apos;*cfg.indent):</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>short_wrapper_class_name<sp/>=<sp/>toWrapperType(class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>wrapper_class_name<sp/>=<sp/>toWrapperType(class_name[</highlight><highlight class="stringliteral">&apos;long&apos;</highlight><highlight class="normal">],<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Construct<sp/>inheritance<sp/>line<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>inheritance_line<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>parent_dict<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>loaded_parent_classes:</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inheritance_line<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;virtual<sp/>&apos;</highlight><highlight class="normal">*parent_dict[</highlight><highlight class="stringliteral">&apos;virtual&apos;</highlight><highlight class="normal">]<sp/>+<sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;access&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;class_name&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>inheritance_line<sp/>=<sp/>inheritance_line.rstrip(</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>no<sp/>other<sp/>parent<sp/>classes,<sp/>add<sp/>WrapperBase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>inheritance_line<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>inheritance_line<sp/>=<sp/>&apos;<sp/>:<sp/>public<sp/>virtual<sp/>WrapperBase&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inheritance_line<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>:<sp/>public<sp/>WrapperBase&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inheritance_line<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>:<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>inheritance_line</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Class<sp/>declaration<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;class<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/>inheritance_line<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Class<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Variables:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>Member<sp/>variables:<sp/>\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>a<sp/>static<sp/>function<sp/>pointer<sp/>for<sp/>each<sp/>factory<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;public:\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>--<sp/>Static<sp/>factory<sp/>pointers:<sp/>\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>factory_counter<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>constr_el<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(class_constructors):</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>need<sp/>pointers<sp/>for<sp/>all<sp/>the<sp/>overloaded<sp/>factory<sp/>functions<sp/>(generated<sp/>due<sp/>to<sp/>default<sp/>value<sp/>arguments)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_overloads<sp/>=<sp/>funcutils.numberOfDefaultArgs(constr_el)</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Identify<sp/>arguments,<sp/>translate<sp/>argument<sp/>type<sp/>of<sp/>loaded<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>and<sp/>construct<sp/>the<sp/>argument<sp/>bracket</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/>funcutils.getArgs(constr_el)</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>One<sp/>factory<sp/>function<sp/>pointer<sp/>for<sp/>each<sp/>set<sp/>of<sp/>default<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>remove_n_args<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(n_overloads+1):</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>that<sp/>the<sp/>constructor<sp/>is<sp/>acceptable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>funcutils.ignoreFunction(constr_el,<sp/>limit_pointerness=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>remove_n_args=remove_n_args):</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>remove_n_args<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_args<sp/>=<sp/>args</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_args<sp/>=<sp/>args[:-remove_n_args]</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args_bracket<sp/>=<sp/>funcutils.constrArgsBracket(use_args,<sp/>include_arg_name=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>include_arg_type=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Factory<sp/>pointer<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factory_ptr_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;__factory&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(factory_counter)</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Construct<sp/>factory<sp/>pointer<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;static<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*<sp/>(*&apos;</highlight><highlight class="normal"><sp/>+<sp/>factory_ptr_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;)&apos;</highlight><highlight class="normal"><sp/>+<sp/>args_bracket<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Increment<sp/>factory<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factory_counter<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>references<sp/>to<sp/>all<sp/>public<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>--<sp/>Other<sp/>member<sp/>variables:<sp/>\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>current_access<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>var_el<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>class_variables:</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Accessor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accessor<sp/>=<sp/>var_el.get(</highlight><highlight class="stringliteral">&apos;access&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>accessor<sp/>!=<sp/>current_access:</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>indent<sp/>+<sp/>accessor<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;:\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_access<sp/>=<sp/>accessor</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Variable<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_name<sp/>=<sp/>var_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Determine<sp/>variable<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_type_dict<sp/>=<sp/>utils.findType(var_el)</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointerness<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>var_type_dict[</highlight><highlight class="stringliteral">&apos;pointerness&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_ref<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>var_type_dict[</highlight><highlight class="stringliteral">&apos;is_reference&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_kw<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>var_type_dict[</highlight><highlight class="stringliteral">&apos;cv_qualifiers&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_array_limits<sp/>=<sp/>var_type_dict[</highlight><highlight class="stringliteral">&apos;array_limits&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_array<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>var_type_dict[</highlight><highlight class="stringliteral">&apos;is_array&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_array_limits_str<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">.join([</highlight><highlight class="stringliteral">&apos;[%i]&apos;</highlight><highlight class="normal"><sp/>%<sp/>i<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>var_array_limits])</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_kw_str<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">.join(var_kw)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*bool(len(var_kw))</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_type<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>var_type_dict[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal">*pointerness<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;&apos;</highlight><highlight class="normal">*is_ref</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_is_loaded_class<sp/>=<sp/>utils.isLoadedClass(var_el)</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_is_known_class<sp/><sp/>=<sp/>utils.isKnownClass(var_el)</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#<sp/>FIXME:<sp/>At<sp/>the<sp/>moment<sp/>there<sp/>are<sp/>problems<sp/>with<sp/>member<sp/>variables<sp/>that<sp/>are<sp/>pointer-to-loaded-class.<sp/>For<sp/>now,<sp/>skip<sp/>them:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>var_is_loaded_class<sp/>and<sp/>pointerness<sp/>&gt;<sp/>0:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>print(&apos;WARNING:<sp/>The<sp/>member<sp/>variable<sp/>%s<sp/>is<sp/>of<sp/>a<sp/>loaded<sp/>type<sp/>and<sp/>has<sp/>pointerness<sp/>&gt;<sp/>0.<sp/>This<sp/>BOSS<sp/>cannot<sp/>yet<sp/>handle.<sp/>Ignored<sp/>for<sp/>now...&apos;<sp/>%<sp/>var_name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>var_is_loaded_class:</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_var_type<sp/>=<sp/>var_type</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>is_ref:</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_var_type<sp/>=<sp/>var_type<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/>var_kw_str<sp/>+<sp/>use_var_type<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>var_name<sp/>+<sp/>var_array_limits_str<sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>var_is_known_class:</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_type<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>var_type</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_ref:</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_var_type<sp/>=<sp/>var_type</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>is_array:</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_var_type<sp/>=<sp/>var_type<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_var_type<sp/>=<sp/>var_type</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_array:</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/>var_kw_str<sp/>+<sp/>use_var_type<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>(&amp;&apos;</highlight><highlight class="normal"><sp/>+<sp/>var_name<sp/>+</highlight><highlight class="stringliteral">&apos;)&apos;</highlight><highlight class="normal"><sp/>+<sp/>var_array_limits_str<sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/>var_kw_str<sp/>+<sp/>use_var_type<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>var_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Functions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>Member<sp/>functions:<sp/>\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>wrappers<sp/>for<sp/>all<sp/>member<sp/>functions,<sp/>including<sp/>operator<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>and<sp/>overloaded<sp/>versions<sp/>of<sp/>functions<sp/>with<sp/>default<sp/>value<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>current_access<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>func_el<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>class_functions:</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Accessor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accessor<sp/>=<sp/>func_el.get(</highlight><highlight class="stringliteral">&apos;access&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>accessor<sp/>!=<sp/>current_access:</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>indent<sp/>+<sp/>accessor<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;:\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_access<sp/>=<sp/>accessor</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>if<sp/>this<sp/>is<sp/>an<sp/>operator<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_operator<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>func_el.tag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;OperatorMethod&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_operator<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>if<sp/>this<sp/>function<sp/>makes<sp/>use<sp/>of<sp/>any<sp/>loaded<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uses_loaded_type<sp/>=<sp/>funcutils.usesLoadedType(func_el)</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Function<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_operator:</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;operator&apos;</highlight><highlight class="normal"><sp/>+<sp/>func_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_name<sp/>=<sp/>func_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Skip<sp/>the<sp/>assignment<sp/>operator<sp/>(we<sp/>implement<sp/>out<sp/>own<sp/>later<sp/>on)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>func_name<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;operator=&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>for<sp/>const<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_const<sp/>=<sp/>utils.isConstFunction(func_el)</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Determine<sp/>return<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type_dict<sp/>=<sp/>utils.findType(func_el)</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type_el<sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;el&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointerness<sp/><sp/><sp/><sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;pointerness&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_ref<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;is_reference&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type_kw<sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;cv_qualifiers&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_kw_str<sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">.join(return_type_kw)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*bool(len(return_type_kw))</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_is_loaded<sp/><sp/><sp/><sp/>=<sp/>utils.isLoadedClass(return_type_el)</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type<sp/><sp/><sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal">*pointerness<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;&apos;</highlight><highlight class="normal">*is_ref</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>return<sp/>type<sp/>is<sp/>a<sp/>known<sp/>class,<sp/>add<sp/>&apos;::&apos;<sp/>for<sp/>absolute<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>return_is_loaded)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>utils.isKnownClass(return_type_el):</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>return_type<sp/></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>return-by-value,<sp/>then<sp/>a<sp/>const<sp/>qualifier<sp/>on<sp/>the<sp/>return<sp/>value<sp/>is<sp/>meaningless</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>(will<sp/>result<sp/>in<sp/>a<sp/>compiler<sp/>warning)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pointerness<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(is_ref<sp/>==<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;const&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>return_type_kw):</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_kw_str<sp/>=<sp/>return_kw_str.replace(</highlight><highlight class="stringliteral">&apos;const&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/>funcutils.getArgs(func_el)</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>One<sp/>function<sp/>for<sp/>each<sp/>set<sp/>of<sp/>default<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_overloads<sp/>=<sp/>funcutils.numberOfDefaultArgs(func_el)</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>remove_n_args<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(n_overloads+1):</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>that<sp/>the<sp/>function<sp/>is<sp/>acceptable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>funcutils.ignoreFunction(func_el,<sp/>remove_n_args=remove_n_args):</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>remove_n_args<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_args<sp/>=<sp/>args</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_args<sp/>=<sp/>args[:-remove_n_args]</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Argument<sp/>bracket</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args_bracket<sp/>=<sp/>funcutils.constrArgsBracket(use_args,<sp/>include_arg_name=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_arg_type=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Name<sp/>of<sp/>function<sp/>to<sp/>call<sp/>(in<sp/>abstract<sp/>class)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_operator:</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>uses_loaded_type:</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_func_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;operator_&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.operator_names[func_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)]<sp/>+<sp/>gb.code_suffix</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_func_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;operator&apos;</highlight><highlight class="normal"><sp/>+<sp/>func_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>call_func_name<sp/>=<sp/>func_name<sp/>+<sp/>gb.code_suffix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>uses_loaded_type<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>(remove_n_args&gt;0):</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_func_name<sp/>=<sp/>func_name<sp/>+<sp/>gb.code_suffix<sp/></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_func_name<sp/>=<sp/>func_name</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Write<sp/>declaration<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/>return_kw_str<sp/>+<sp/>return_type<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>func_name<sp/>+<sp/>args_bracket<sp/>+<sp/>is_const*</highlight><highlight class="stringliteral">&apos;<sp/>const&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>all<sp/>constructors<sp/>here...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>wrappers<sp/>for<sp/>all<sp/>original<sp/>constructors<sp/>except<sp/>the<sp/>copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/>temp_code<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>current_access<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>constr_el<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(class_constructors):</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Accessor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accessor<sp/>=<sp/>constr_el.get(</highlight><highlight class="stringliteral">&apos;access&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>accessor<sp/>!=<sp/>current_access:</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_code<sp/>+=<sp/>indent<sp/>+<sp/>accessor<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;:\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_access<sp/>=<sp/>accessor</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Identify<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/>funcutils.getArgs(constr_el)</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factory_args<sp/>=<sp/>funcutils.constrWrapperArgs(args,<sp/>add_ref=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>default<sp/>arguments<sp/>are<sp/>use,<sp/>we<sp/>need<sp/>overloaded<sp/>constructors<sp/>to<sp/>connect<sp/>to<sp/>the<sp/>overloaded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>factory<sp/>function<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_overloads<sp/>=<sp/>funcutils.numberOfDefaultArgs(constr_el)</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>One<sp/>constructor<sp/>for<sp/>each<sp/>set<sp/>of<sp/>default<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>remove_n_args<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(n_overloads+1):</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>that<sp/>the<sp/>constructor<sp/>is<sp/>acceptable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>funcutils.ignoreFunction(constr_el,<sp/>limit_pointerness=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>remove_n_args=remove_n_args):</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>remove_n_args<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_args<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>args</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factory_use_args<sp/>=<sp/>factory_args</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_args<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>args[:-remove_n_args]</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factory_use_args<sp/>=<sp/>factory_args[:-remove_n_args]</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args_bracket<sp/>=<sp/>funcutils.constrArgsBracket(use_args,<sp/>include_arg_name=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_arg_type=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>use_wrapper_class=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_code<sp/>+=<sp/>2*indent<sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/>args_bracket<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>temp_code<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>Wrappers<sp/>for<sp/>original<sp/>constructors:<sp/>\n&apos;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>temp_code<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>current_access<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;public&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;public:\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>special<sp/>constructor<sp/>based<sp/>on<sp/>abstract<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>Special<sp/>pointer-based<sp/>constructor:<sp/>\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+</highlight><highlight class="stringliteral">&apos;*<sp/>in);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/>class_name[&apos;short&apos;]<sp/>+<sp/>&apos;(const<sp/>&apos;<sp/>+<sp/>abstr_class_name[&apos;long&apos;]<sp/>+&apos;*<sp/>in);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>has_copy_constructor:</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>Copy<sp/>constructor:<sp/>\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(const<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+</highlight><highlight class="stringliteral">&apos;&amp;<sp/>in);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>assignment<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>construct_assignment_operator:</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>Assignment<sp/>operator:<sp/>\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;operator=(const<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+</highlight><highlight class="stringliteral">&apos;&amp;<sp/>in);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>Destructor:<sp/>\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/>&apos;virtual<sp/>~&apos;<sp/>+<sp/>class_name[&apos;short&apos;]<sp/>+<sp/>&apos;();\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;~&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;();\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>get_BEptr<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>decl_code<sp/>+=<sp/>indent<sp/>+<sp/>&apos;private:\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>Returns<sp/>correctly<sp/>casted<sp/>pointer<sp/>to<sp/>Abstract<sp/>class:<sp/>\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/>2*indent<sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+</highlight><highlight class="stringliteral">&apos;*<sp/>get_BEptr()<sp/>const;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Close<sp/>class<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;};\n&apos;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>namespace,<sp/>class_name_short<sp/>=<sp/>utils.removeNamespace(class_name[</highlight><highlight class="stringliteral">&apos;long&apos;</highlight><highlight class="normal">],<sp/>return_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>namespace<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace_list<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace_list<sp/>=<sp/>namespace.split(</highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/>n_indents<sp/>=<sp/>len(namespace_list)</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code_with_ns<sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code_with_ns<sp/>+=<sp/>utils.constrNamespace(namespace_list,</highlight><highlight class="stringliteral">&apos;open&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code_with_ns<sp/>+=<sp/>utils.addIndentation(decl_code,<sp/>cfg.indent*n_indents)</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code_with_ns<sp/>+=<sp/>utils.constrNamespace(namespace_list,</highlight><highlight class="stringliteral">&apos;close&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Return<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decl_code_with_ns</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>constrWrapperDecl<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>constrWrapperDef<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">constrWrapperDef(class_name,<sp/>abstr_class_name,<sp/>loaded_parent_classes,<sp/>class_variables,<sp/>class_functions,<sp/>class_constructors,<sp/>construct_assignment_operator,<sp/>has_copy_constructor,<sp/>indent=&apos;<sp/>&apos;*cfg.indent,<sp/>do_inline=False):</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>short_wrapper_class_name<sp/>=<sp/>toWrapperType(class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>wrapper_class_name<sp/>=<sp/>toWrapperType(class_name[</highlight><highlight class="stringliteral">&apos;long&apos;</highlight><highlight class="normal">],<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Functions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>Member<sp/>functions:<sp/>\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>wrappers<sp/>for<sp/>all<sp/>member<sp/>functions,<sp/>including<sp/>operator<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>and<sp/>overloaded<sp/>versions<sp/>of<sp/>functions<sp/>with<sp/>default<sp/>value<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>func_el<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>class_functions:</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>if<sp/>this<sp/>is<sp/>an<sp/>operator<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_operator<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>func_el.tag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;OperatorMethod&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_operator<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>if<sp/>this<sp/>function<sp/>makes<sp/>use<sp/>of<sp/>any<sp/>loaded<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uses_loaded_type<sp/>=<sp/>funcutils.usesLoadedType(func_el)</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Function<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_operator:</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;operator&apos;</highlight><highlight class="normal"><sp/>+<sp/>func_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_name<sp/>=<sp/>func_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Skip<sp/>the<sp/>assignment<sp/>operator<sp/>(we<sp/>implement<sp/>out<sp/>own<sp/>later<sp/>on)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>func_name<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;operator=&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>for<sp/>const<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_const<sp/>=<sp/>utils.isConstFunction(func_el)</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Determine<sp/>return<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type_dict<sp/>=<sp/>utils.findType(func_el)</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type_el<sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;el&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointerness<sp/><sp/><sp/><sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;pointerness&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_ref<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;is_reference&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type_kw<sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;cv_qualifiers&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_kw_str<sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">.join(return_type_kw)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*bool(len(return_type_kw))</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_is_loaded<sp/><sp/><sp/><sp/>=<sp/>utils.isLoadedClass(return_type_el)</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type<sp/><sp/><sp/>=<sp/>return_type_dict[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal">*pointerness<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;&apos;</highlight><highlight class="normal">*is_ref</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>return<sp/>type<sp/>is<sp/>a<sp/>known<sp/>class,<sp/>add<sp/>&apos;::&apos;<sp/>for<sp/>absolute<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>return_is_loaded)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>utils.isKnownClass(return_type_el):</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>return_type<sp/></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>return-by-value,<sp/>then<sp/>a<sp/>const<sp/>qualifier<sp/>on<sp/>the<sp/>return<sp/>value<sp/>is<sp/>meaningless</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>(will<sp/>result<sp/>in<sp/>a<sp/>compiler<sp/>warning)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pointerness<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(is_ref<sp/>==<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;const&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>return_type_kw):</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_kw_str<sp/>=<sp/>return_kw_str.replace(</highlight><highlight class="stringliteral">&apos;const&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/>funcutils.getArgs(func_el)</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>One<sp/>function<sp/>for<sp/>each<sp/>set<sp/>of<sp/>default<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_overloads<sp/>=<sp/>funcutils.numberOfDefaultArgs(func_el)</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>remove_n_args<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(n_overloads+1):</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>that<sp/>the<sp/>function<sp/>is<sp/>acceptable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>funcutils.ignoreFunction(func_el,<sp/>limit_pointerness=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>remove_n_args=remove_n_args):</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>remove_n_args<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_args<sp/>=<sp/>args</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_args<sp/>=<sp/>args[:-remove_n_args]</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Arguments<sp/>bracket</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args_bracket<sp/>=<sp/>funcutils.constrArgsBracket(use_args,<sp/>include_arg_name=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_arg_type=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Name<sp/>of<sp/>function<sp/>to<sp/>call<sp/>(in<sp/>abstract<sp/>class)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_operator:</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>uses_loaded_type:</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_func_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;operator_&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.operator_names[func_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)]<sp/>+<sp/>gb.code_suffix</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_func_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;operator&apos;</highlight><highlight class="normal"><sp/>+<sp/>func_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>uses_loaded_type<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>(remove_n_args&gt;0):</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_func_name<sp/>=<sp/>func_name<sp/>+<sp/>gb.code_suffix<sp/></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_func_name<sp/>=<sp/>func_name</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Write<sp/>declaration<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>do_inline*</highlight><highlight class="stringliteral">&apos;inline<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>return_kw_str<sp/>+<sp/>return_type<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>func_name<sp/>+<sp/>args_bracket<sp/>+<sp/>is_const*</highlight><highlight class="stringliteral">&apos;<sp/>const&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Write<sp/>function<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>return_type<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;void&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>indent</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;return<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args_bracket_notypes<sp/>=<sp/>funcutils.constrArgsBracket(use_args,<sp/>include_arg_name=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_arg_type=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>wrapper_to_pointer=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>return_is_loaded:<sp/></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs_return_type_simple<sp/>=<sp/>toAbstractType(return_type,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>remove_reference=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>remove_pointers=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_type_simple<sp/><sp/><sp/><sp/><sp/>=<sp/>return_type.replace(</highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">).replace(</highlight><highlight class="stringliteral">&apos;&amp;&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_const:</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_BEptr_call<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;const_cast&lt;const<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+</highlight><highlight class="stringliteral">&apos;*&gt;(get_BEptr())&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_BEptr_call<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;get_BEptr()&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Return-by-reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_ref:</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;const&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>return_type_kw:</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;const_cast&lt;&apos;</highlight><highlight class="normal"><sp/>+<sp/>abs_return_type_simple<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;&gt;(&apos;</highlight><highlight class="normal"><sp/>+<sp/>get_BEptr_call<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;-&gt;&apos;</highlight><highlight class="normal"><sp/>+<sp/>call_func_name<sp/>+<sp/>args_bracket_notypes<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;).get_init_wref();\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>get_BEptr_call<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;-&gt;&apos;</highlight><highlight class="normal"><sp/>+<sp/>call_func_name<sp/>+<sp/>args_bracket_notypes<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;.get_init_wref();\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Return-by-pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>is_ref)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(pointerness<sp/>&gt;<sp/>0):<sp/><sp/></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;const&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>return_type_kw:</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;const_cast&lt;&apos;</highlight><highlight class="normal"><sp/>+<sp/>abs_return_type_simple<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*&gt;(&apos;</highlight><highlight class="normal"><sp/>+<sp/>get_BEptr_call<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;-&gt;&apos;</highlight><highlight class="normal"><sp/>+<sp/>call_func_name<sp/>+<sp/>args_bracket_notypes<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;)-&gt;get_init_wptr();\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>get_BEptr_call<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;-&gt;&apos;</highlight><highlight class="normal"><sp/>+<sp/>call_func_name<sp/>+<sp/>args_bracket_notypes<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;-&gt;get_init_wptr();\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Return-by-value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;const&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>return_type_kw:</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>def_code<sp/>+=<sp/>return_type<sp/>+<sp/>&apos;(<sp/>const_cast&lt;&apos;<sp/>+<sp/>abs_return_type_simple<sp/>+<sp/>&apos;*&gt;(&apos;<sp/>+<sp/>get_BEptr_call<sp/>+<sp/>&apos;-&gt;&apos;<sp/>+<sp/>call_func_name<sp/>+<sp/>args_bracket_notypes<sp/>+<sp/>&apos;)-&gt;get_init_wref()<sp/>);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>return_type<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(<sp/>const_cast&lt;&apos;</highlight><highlight class="normal"><sp/>+<sp/>abs_return_type_simple<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*&gt;(&apos;</highlight><highlight class="normal"><sp/>+<sp/>get_BEptr_call<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;-&gt;&apos;</highlight><highlight class="normal"><sp/>+<sp/>call_func_name<sp/>+<sp/>args_bracket_notypes<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;)<sp/>);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>def_code<sp/>+=<sp/>return_type<sp/>+<sp/>&apos;(<sp/>&apos;<sp/>+<sp/>get_BEptr_call<sp/>+<sp/>&apos;-&gt;&apos;<sp/>+<sp/>call_func_name<sp/>+<sp/>args_bracket_notypes<sp/>+<sp/>&apos;-&gt;get_init_wref()<sp/>);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>return_type<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>get_BEptr_call<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;-&gt;&apos;</highlight><highlight class="normal"><sp/>+<sp/>call_func_name<sp/>+<sp/>args_bracket_notypes<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;get_BEptr()-&gt;&apos;</highlight><highlight class="normal"><sp/>+<sp/>call_func_name<sp/>+<sp/>args_bracket_notypes<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>all<sp/>constructors<sp/>here...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>First<sp/>generate<sp/>some<sp/>code<sp/>common<sp/>to<sp/>all<sp/>constructors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>common_init_list_code<sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>common_constructor_body<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gb.debug_mode:</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common_constructor_body<sp/>+=<sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;std::cerr<sp/>&lt;&lt;<sp/>&quot;DEBUG:<sp/>&quot;<sp/>&lt;&lt;<sp/>this<sp/>&lt;&lt;<sp/>&quot;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>short_wrapper_class_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>ctor&quot;<sp/>&lt;&lt;<sp/>std::endl;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/>common_constructor_body<sp/>+=<sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;get_BEptr()-&gt;set_wptr(this);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/>common_constructor_body<sp/>+=<sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;get_BEptr()-&gt;set_delete_wrapper(false);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>mem_var_init_body<sp/>=<sp/>&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/>has_loaded_class_mem_var<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>var_el<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>class_variables:</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Get<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_name<sp/>=<sp/>var_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_type_dict<sp/>=<sp/>utils.findType(var_el)</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_type_name<sp/>=<sp/>var_type_dict[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_type_el<sp/><sp/><sp/>=<sp/>var_type_dict[</highlight><highlight class="stringliteral">&apos;el&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointerness<sp/><sp/><sp/>=<sp/>var_type_dict[</highlight><highlight class="stringliteral">&apos;pointerness&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_ref<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>var_type_dict[</highlight><highlight class="stringliteral">&apos;is_reference&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_type<sp/>=<sp/>var_type_dict[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*&apos;</highlight><highlight class="normal">*pointerness<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;&apos;</highlight><highlight class="normal">*is_ref</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_is_loaded_class<sp/>=<sp/>utils.isLoadedClass(var_type_el)</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>wrapper_type_name<sp/>=<sp/>toWrapperType(var_type,<sp/>remove_reference=True,<sp/>remove_pointers=True,<sp/>include_namespace=True)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_abstr_class_name<sp/>=<sp/>getClassNameDict(var_type_el,<sp/>abstract=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>var_wrapper_base_class_name<sp/>=<sp/>&apos;WrapperBase&lt;&apos;<sp/>+<sp/>var_abstr_class_name[&apos;long&apos;]<sp/>+<sp/>&apos;&gt;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#<sp/>FIXME:<sp/>At<sp/>the<sp/>moment<sp/>there<sp/>are<sp/>problems<sp/>with<sp/>member<sp/>variables<sp/>that<sp/>are<sp/>pointer-to-loaded-class.<sp/>For<sp/>now,<sp/>skip<sp/>them:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>var_is_loaded_class<sp/>and<sp/>pointerness<sp/>&gt;<sp/>0:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>print(&apos;WARNING:<sp/>The<sp/>member<sp/>variable<sp/>%s<sp/>is<sp/>of<sp/>a<sp/>loaded<sp/>type<sp/>and<sp/>has<sp/>pointerness<sp/>&gt;<sp/>0.<sp/>This<sp/>BOSS<sp/>cannot<sp/>yet<sp/>handle.<sp/>Ignored<sp/>for<sp/>now...&apos;<sp/>%<sp/>var_name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Construct<sp/>common<sp/>initialization<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>var_is_loaded_class:</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>pointerness<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common_init_list_code<sp/>+=<sp/>indent<sp/>+<sp/>var_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(<sp/>get_BEptr()-&gt;&apos;</highlight><highlight class="normal"><sp/>+<sp/>var_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;_ref&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.code_suffix<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;().get_init_wref()),\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>pointerness<sp/>==<sp/>1:</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common_init_list_code<sp/>+=<sp/>indent<sp/>+<sp/>var_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(<sp/>get_BEptr()-&gt;&apos;</highlight><highlight class="normal"><sp/>+<sp/>var_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;_ref&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.code_suffix<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;()-&gt;get_init_wptr()),\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>common_init_list_code<sp/>+=<sp/>indent<sp/>+<sp/>var_name<sp/>+<sp/>&apos;(wrapperbase::BEptr-&gt;&apos;<sp/>+<sp/>var_name<sp/>+<sp/>&apos;_ref&apos;<sp/>+<sp/>gb.code_suffix<sp/>+<sp/>&apos;()),\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>Exception(</highlight><highlight class="stringliteral">&apos;The<sp/>BOSS<sp/>wrapper<sp/>class<sp/>system<sp/>cannot<sp/>presently<sp/>handle<sp/>member<sp/>variables<sp/>that<sp/>have<sp/>a<sp/>pointerness<sp/>&gt;<sp/>1&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common_init_list_code<sp/>+=<sp/>indent<sp/>+<sp/>var_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(<sp/>get_BEptr()-&gt;&apos;</highlight><highlight class="normal"><sp/>+<sp/>var_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;_ref&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.code_suffix<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;()),\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Clean<sp/>up<sp/>initialization<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>common_init_list_code<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>common_init_list_code<sp/>=<sp/>common_init_list_code.rstrip(</highlight><highlight class="stringliteral">&apos;,\n&apos;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>wrappers<sp/>for<sp/>all<sp/>original<sp/>constructors<sp/>except<sp/>the<sp/>copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>temp_code<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>factory_counter<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i,<sp/>constr_el<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(class_constructors):</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Identify<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args<sp/>=<sp/>funcutils.getArgs(constr_el)</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factory_args<sp/>=<sp/>funcutils.constrWrapperArgs(args,<sp/>add_ref=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>If<sp/>default<sp/>arguments<sp/>are<sp/>used,<sp/>we<sp/>need<sp/>overloaded<sp/>constructors<sp/>to<sp/>connect<sp/>to<sp/>the<sp/>overloaded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>factory<sp/>function<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_overloads<sp/>=<sp/>funcutils.numberOfDefaultArgs(constr_el)</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>One<sp/>constructor<sp/>for<sp/>each<sp/>set<sp/>of<sp/>default<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>remove_n_args<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(n_overloads+1):</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>that<sp/>the<sp/>constructor<sp/>is<sp/>acceptable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>funcutils.ignoreFunction(constr_el,<sp/>limit_pointerness=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>remove_n_args=remove_n_args):</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>remove_n_args<sp/>==<sp/>0:</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_args<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>args</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factory_use_args<sp/>=<sp/>factory_args</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_args<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>args[:-remove_n_args]</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factory_use_args<sp/>=<sp/>factory_args[:-remove_n_args]</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args_bracket<sp/>=<sp/>funcutils.constrArgsBracket(use_args,<sp/>include_arg_name=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_arg_type=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>use_wrapper_class=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args_bracket_notypes<sp/>=<sp/>funcutils.constrArgsBracket(use_args,<sp/>include_arg_name=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_arg_type=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>wrapper_to_pointer=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factory_args_bracket<sp/>=<sp/>funcutils.constrArgsBracket(factory_use_args,<sp/>include_arg_name=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>include_arg_type=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Factory<sp/>pointer<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factory_ptr_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;__factory&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(factory_counter)</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;inline<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/>args_bracket<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>:\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_class_init_list<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>parent_class_init_list<sp/>+=<sp/>indent<sp/>+<sp/>&apos;WrapperBase(&apos;<sp/>+<sp/>factory_ptr_name<sp/>+<sp/>args_bracket_notypes<sp/>+<sp/>&apos;),\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>parent_dict<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>loaded_parent_classes:</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_class_init_list<sp/>+=<sp/>indent<sp/>+<sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;class_name&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(&apos;</highlight><highlight class="normal"><sp/>+<sp/>factory_ptr_name<sp/>+<sp/>args_bracket_notypes<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;),\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>parent_class_init_list<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_class_init_list<sp/>+=<sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;WrapperBase(&apos;</highlight><highlight class="normal"><sp/>+<sp/>factory_ptr_name<sp/>+<sp/>args_bracket_notypes<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;),\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>common_init_list_code<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_code<sp/>+=<sp/>parent_class_init_list<sp/>+<sp/>common_init_list_code</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_code<sp/>+=<sp/>parent_class_init_list.rstrip(</highlight><highlight class="stringliteral">&apos;,\n&apos;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_code<sp/>+=<sp/>common_constructor_body</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Increment<sp/>factory<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>factory_counter<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>temp_code<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>Wrappers<sp/>for<sp/>original<sp/>constructors:<sp/>\n&apos;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>temp_code</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>special<sp/>constructor<sp/>based<sp/>on<sp/>abstract<sp/>class<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>Special<sp/>pointer-based<sp/>constructor:<sp/>\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>do_inline*</highlight><highlight class="stringliteral">&apos;inline<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+</highlight><highlight class="stringliteral">&apos;*<sp/>in)<sp/>:\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/>parent_class_init_list<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>parent_class_init_list<sp/>+=<sp/>indent<sp/>+<sp/>&apos;WrapperBase(in),\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>parent_dict<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>loaded_parent_classes:</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_class_init_list<sp/>+=<sp/>indent<sp/>+<sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;class_name&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(in),\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>parent_class_init_list<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_class_init_list<sp/>+=<sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;WrapperBase(in),\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>common_init_list_code<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>parent_class_init_list<sp/>+<sp/>common_init_list_code</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>parent_class_init_list.rstrip(</highlight><highlight class="stringliteral">&apos;,\n&apos;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>common_constructor_body</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>#<sp/>Const<sp/>version<sp/>of<sp/>constructor<sp/>from<sp/>abstract<sp/>class<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>def_code<sp/>+=<sp/>do_inline*&apos;inline<sp/>&apos;<sp/>+<sp/>class_name[&apos;long&apos;]<sp/>+<sp/>&apos;::&apos;<sp/>+<sp/>class_name[&apos;short&apos;]<sp/>+<sp/>&apos;(const<sp/>&apos;<sp/>+<sp/>abstr_class_name[&apos;long&apos;]<sp/>+&apos;*<sp/>in)<sp/>:\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>parent_class_init_list<sp/>=<sp/>&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>for<sp/>parent_dict<sp/>in<sp/>loaded_parent_classes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>parent_class_init_list<sp/>+=<sp/>indent<sp/>+<sp/>parent_dict[&apos;class_name&apos;][&apos;short&apos;]<sp/>+<sp/>&apos;(in),\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>parent_class_init_list<sp/>==<sp/>&apos;&apos;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>parent_class_init_list<sp/>+=<sp/>indent<sp/>+<sp/>&apos;WrapperBase(in),\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>common_init_list_code<sp/>!=<sp/>&apos;&apos;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>parent_class_init_list<sp/>+<sp/>common_init_list_code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>else:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>parent_class_init_list.rstrip(&apos;,\n&apos;)<sp/>+<sp/>&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>def_code<sp/>+=<sp/>&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>def_code<sp/>+=<sp/>common_constructor_body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>def_code<sp/>+=<sp/>&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>has_copy_constructor:</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>Copy<sp/>constructor:<sp/>\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>do_inline*</highlight><highlight class="stringliteral">&apos;inline<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(const<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+</highlight><highlight class="stringliteral">&apos;&amp;<sp/>in)<sp/>:\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_class_init_list<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>parent_class_init_list<sp/>+=<sp/>indent<sp/>+<sp/>&apos;WrapperBase(in.get_BEptr()-&gt;pointer_copy&apos;<sp/>+<sp/>gb.code_suffix<sp/>+<sp/>&apos;()),\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>parent_dict<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>loaded_parent_classes:</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_class_init_list<sp/>+=<sp/>indent<sp/>+<sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;class_name&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(in.get_BEptr()-&gt;pointer_copy&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.code_suffix<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;()),\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>parent_class_init_list<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_class_init_list<sp/>+=<sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;WrapperBase(in.get_BEptr()-&gt;pointer_copy&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.code_suffix<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;()),\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>common_init_list_code<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>parent_class_init_list<sp/>+<sp/>common_init_list_code</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>parent_class_init_list.rstrip(</highlight><highlight class="stringliteral">&apos;,\n&apos;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>common_constructor_body</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>assignment<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>construct_assignment_operator:</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>Assignment<sp/>operator:<sp/>\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>do_inline*</highlight><highlight class="stringliteral">&apos;inline<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&amp;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::operator=(const<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+</highlight><highlight class="stringliteral">&apos;&amp;<sp/>in)\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/><sp/><sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;if<sp/>(this<sp/>!=<sp/>&amp;in)\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/><sp/><sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>2*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;get_BEptr()-&gt;pointer_assign&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.code_suffix<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;(in.get_BEptr());\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/><sp/><sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/><sp/><sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;return<sp/>*this;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;}\n\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>Destructor:<sp/>\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>do_inline*</highlight><highlight class="stringliteral">&apos;inline<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::~&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;()\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gb.debug_mode:</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;std::cerr<sp/>&lt;&lt;<sp/>&quot;DEBUG:<sp/>&quot;<sp/>&lt;&lt;<sp/>this<sp/>&lt;&lt;<sp/>&quot;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>short_wrapper_class_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>dtor<sp/>(BEGIN)&quot;<sp/>&lt;&lt;<sp/>std::endl;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/><sp/><sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;if<sp/>(get_BEptr()<sp/>!=<sp/>0)\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/><sp/><sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>2*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;get_BEptr()-&gt;set_delete_wrapper(false);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>2*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;if<sp/>(can_delete_BEptr())\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>2*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>3*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;delete<sp/>BEptr;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>3*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;BEptr<sp/>=<sp/>0;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>2*indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/><sp/><sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/><sp/><sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;set_delete_BEptr(false);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gb.debug_mode:</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;std::cerr<sp/>&lt;&lt;<sp/>&quot;DEBUG:<sp/>&quot;<sp/>&lt;&lt;<sp/>this<sp/>&lt;&lt;<sp/>&quot;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>short_wrapper_class_name<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/>dtor<sp/>(END)&quot;<sp/>&lt;&lt;<sp/>std::endl;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>get_BEptr<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;//<sp/>Returns<sp/>correctly<sp/>casted<sp/>pointer<sp/>to<sp/>Abstract<sp/>class:<sp/>\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>do_inline*</highlight><highlight class="stringliteral">&apos;inline<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+</highlight><highlight class="stringliteral">&apos;*<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>class_name[</highlight><highlight class="stringliteral">&apos;long&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;::get_BEptr()<sp/>const\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;{\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/>indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;return<sp/>dynamic_cast&lt;&apos;</highlight><highlight class="normal"><sp/>+<sp/>abstr_class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;*&gt;(BEptr);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/>namespace,<sp/>class_name_short<sp/>=<sp/>utils.removeNamespace(class_name[</highlight><highlight class="stringliteral">&apos;long&apos;</highlight><highlight class="normal">],<sp/>return_namespace=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>namespace<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace_list<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace_list<sp/>=<sp/>namespace.split(</highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/>n_indents<sp/>=<sp/>len(namespace_list)</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code_with_ns<sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code_with_ns<sp/>+=<sp/>utils.constrNamespace(namespace_list,</highlight><highlight class="stringliteral">&apos;open&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code_with_ns<sp/>+=<sp/>utils.addIndentation(def_code,<sp/>cfg.indent*n_indents)</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code_with_ns<sp/>+=<sp/>utils.constrNamespace(namespace_list,</highlight><highlight class="stringliteral">&apos;close&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Return<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>def_code_with_ns</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>constrWrapperDef<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>pureVirtualMembers<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">pureVirtualMembers(class_el):</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Return<sp/>a<sp/>list<sp/>with<sp/>the<sp/>names<sp/>of<sp/>all<sp/>pure<sp/>virtual<sp/>member<sp/>functions<sp/>of<sp/>a<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/>check_member_elements<sp/>=<sp/>utils.getMemberElements(class_el)</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/>pure_virtual_members<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>mem_el<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>check_member_elements:</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>mem_el.tag<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[</highlight><highlight class="stringliteral">&apos;Constructor&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Destructor&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Method&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;OperatorMethod&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;pure_virtual&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>mem_el.keys())<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(mem_el.get(</highlight><highlight class="stringliteral">&apos;pure_virtual&apos;</highlight><highlight class="normal">)==</highlight><highlight class="stringliteral">&apos;1&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pure_virtual_members.append(mem_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pure_virtual_members</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>pureVirtualMembers<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>generateWrapperHeaderCode<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Generate<sp/>a<sp/>header<sp/>file<sp/>with<sp/>a<sp/>GAMBIT<sp/>wrapper<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">generateWrapperHeaderCode(class_el,<sp/>class_name,<sp/>abstr_class_name,<sp/>namespaces,<sp/></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short_abstr_class_fname,</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>construct_assignment_operator,<sp/>has_copy_constructor,</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_constructor_id=&apos;&apos;):</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Useful<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/>indent<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">*cfg.indent</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Useful<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/>class_variables<sp/><sp/><sp/><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/>class_functions<sp/><sp/><sp/><sp/>=<sp/>utils.getMemberFunctions(class_el,<sp/>include_artificial=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>include_inherited=cfg.wrap_inherited_members,<sp/></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>only_accepted=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>limit_pointerness=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>include_operators=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/>class_constructors<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/>class_members<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>utils.getMemberElements(class_el,<sp/>include_artificial=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/>class_members_full<sp/>=<sp/>utils.getMemberElements(class_el,<sp/>include_artificial=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>mem_el<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>class_members:</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem_el.tag<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;Field&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Variable&apos;</highlight><highlight class="normal">))<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(mem_el.get(</highlight><highlight class="stringliteral">&apos;access&apos;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;public&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isAcceptedMemberVariable(mem_el):</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_variables.append(mem_el)</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>mem_el<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>class_members_full:</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Skip<sp/>the<sp/>copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>has_copy_constructor<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(mem_el.get(</highlight><highlight class="stringliteral">&apos;id&apos;</highlight><highlight class="normal">)<sp/>==<sp/>copy_constructor_id):</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Store<sp/>constructor<sp/>if<sp/>acceptable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem_el.tag<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;Constructor&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(mem_el.get(</highlight><highlight class="stringliteral">&apos;access&apos;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;public&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_constructors.append(mem_el)</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Create<sp/>a<sp/>list<sp/>of<sp/>dicts<sp/>with<sp/>info<sp/>on<sp/>the<sp/>(loaded)<sp/>parent<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/>loaded_parent_classes<sp/>=<sp/>utils.getParentClasses(class_el,<sp/>only_loaded_classes=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Start<sp/>code<sp/>generation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>=<sp/>constrWrapperDecl(class_name,<sp/>abstr_class_name,<sp/>loaded_parent_classes,<sp/>class_variables,<sp/>class_functions,<sp/>class_constructors,<sp/>construct_assignment_operator,<sp/>has_copy_constructor,<sp/>indent=indent)</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/><sp/>=<sp/>constrWrapperDef(class_name,<sp/>abstr_class_name,<sp/>loaded_parent_classes,<sp/>class_variables,<sp/>class_functions,<sp/>class_constructors,<sp/>construct_assignment_operator,<sp/>has_copy_constructor,<sp/>indent=indent,<sp/>do_inline=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Insert<sp/>tags<sp/>for<sp/>the<sp/>GAMBIT<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;\n__START_GAMBIT_NAMESPACE__\n&apos;</highlight><highlight class="normal"><sp/>+<sp/>decl_code<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n__END_GAMBIT_NAMESPACE__\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;\n__START_GAMBIT_NAMESPACE__\n&apos;</highlight><highlight class="normal"><sp/>+<sp/>def_code<sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n__END_GAMBIT_NAMESPACE__\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Insert<sp/>include<sp/>statements<sp/>needed<sp/>by<sp/>GAMBIT<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/>backend_undef_incl_statement<sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;&apos;</highlight><highlight class="normal"><sp/>+<sp/>os.path.join(gb.gambit_backend_incl_dir,<sp/></highlight><highlight class="stringliteral">&apos;backend_undefs.hpp&apos;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&quot;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/>identification_incl_statement<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;identification.hpp&apos;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&quot;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>=<sp/>identification_incl_statement<sp/>+<sp/>decl_code<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>+<sp/>backend_undef_incl_statement</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/><sp/>=<sp/>identification_incl_statement<sp/>+<sp/>def_code<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>+<sp/>backend_undef_incl_statement</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>#include<sp/>statements<sp/>for<sp/>the<sp/>declaration<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code_include_statements<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Header<sp/>where<sp/>NULL<sp/>is<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code_include_statements.append(<sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&lt;cstddef&gt;&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>If<sp/>debug_mode,<sp/>include<sp/>&lt;iostream&gt;<sp/>for<sp/>some<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>gb.debug_mode:</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code_include_statements.append(<sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&lt;iostream&gt;&apos;</highlight><highlight class="normal"><sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Header<sp/>with<sp/>forward<sp/>declarations<sp/>to<sp/>all<sp/>wrapper<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code_include_statements.append(<sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.frwd_decls_wrp_fname<sp/>+<sp/>cfg.header_extension<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Base<sp/>class<sp/>for<sp/>all<sp/>wrapper<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code_include_statements.append(<sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;&apos;</highlight><highlight class="normal"><sp/>+<sp/>os.path.join(gb.gambit_backend_incl_dir,<sp/></highlight><highlight class="stringliteral">&apos;wrapperbase.hpp&apos;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Abstract<sp/>class<sp/>for<sp/>the<sp/>original<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code_include_statements.append(<sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.new_header_files[class_name[</highlight><highlight class="stringliteral">&apos;long&apos;</highlight><highlight class="normal">]][</highlight><highlight class="stringliteral">&apos;abstract&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Wrapper<sp/>parent<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>parent_dict<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>loaded_parent_classes:</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>decl_code_include_statements.append(</highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;&apos;</highlight><highlight class="normal"><sp/>+<sp/>gb.new_header_files[<sp/>parent_dict[</highlight><highlight class="stringliteral">&apos;class_name&apos;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&apos;long&apos;</highlight><highlight class="normal">]<sp/>][</highlight><highlight class="stringliteral">&apos;wrapper_decl&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Any<sp/>other<sp/>types<sp/>(excluding<sp/>the<sp/>current<sp/>wrapper<sp/>class)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code_include_statements<sp/>+=<sp/>utils.getIncludeStatements(class_el,<sp/>convert_loaded_to=</highlight><highlight class="stringliteral">&apos;wrapper_decl&apos;</highlight><highlight class="normal">,<sp/>exclude_types=[class_name],<sp/>use_full_path=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>forward_declared=</highlight><highlight class="stringliteral">&apos;exclude&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Remove<sp/>duplicates<sp/>and<sp/>construct<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code_include_statements<sp/>=<sp/>list(<sp/>OrderedDict.fromkeys(decl_code_include_statements)<sp/>)</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code_include_statements<sp/>=<sp/>utils.orderIncludeStatements(decl_code_include_statements)</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_include_statements_code<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">.join(decl_code_include_statements)<sp/>+<sp/>2*</highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/>decl_code<sp/>=<sp/>decl_include_statements_code<sp/>+<sp/>decl_code</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Add<sp/>#include<sp/>statements<sp/>for<sp/>the<sp/>definition<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code_include_statements<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>-<sp/>Any<sp/>other<sp/>types<sp/>(excluding<sp/>the<sp/>current<sp/>wrapper<sp/>class)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code_include_statements<sp/>+=<sp/>utils.getIncludeStatements(class_el,<sp/>convert_loaded_to=</highlight><highlight class="stringliteral">&apos;wrapper_decl&apos;</highlight><highlight class="normal">,<sp/>exclude_types=[class_name],<sp/>use_full_path=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>forward_declared=</highlight><highlight class="stringliteral">&apos;include&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Remove<sp/>duplicates<sp/>and<sp/>construct<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code_include_statements<sp/>=<sp/>list(<sp/>OrderedDict.fromkeys(def_code_include_statements)<sp/>)</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code_include_statements<sp/>=<sp/>utils.orderIncludeStatements(def_code_include_statements)</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/>def_include_statements_code<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">.join(def_code_include_statements)<sp/>+<sp/>2*</highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/>def_code<sp/>=<sp/>def_include_statements_code<sp/>+<sp/>def_code</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Return<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decl_code,<sp/>def_code</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>generateWrapperHeaderCode<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>findClassNamePosition<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Find<sp/>the<sp/>position<sp/>of<sp/>a<sp/>class<sp/>name<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">findClassNamePosition(class_el,<sp/>file_content_nocomments):</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/>class_name<sp/>=<sp/>getClassNameDict(class_el)</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Find<sp/>the<sp/>index<sp/>of<sp/>the<sp/>\n<sp/>after<sp/>the<sp/>first<sp/>line<sp/>of<sp/>the<sp/>class<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/>line_number<sp/>=<sp/>int(class_el.get(</highlight><highlight class="stringliteral">&apos;line&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/>newline_pos<sp/>=<sp/>utils.findNewLinePos(file_content_nocomments,<sp/>line_number)</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Find<sp/>position<sp/>of<sp/>class<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/>search_limit<sp/>=<sp/>newline_pos</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>search_limit<sp/>&gt;<sp/>-1:</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>class_name_pos<sp/>=<sp/>file_content_nocomments[:search_limit].rfind(class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pre_char<sp/><sp/>=<sp/>file_content_nocomments[class_name_pos-1]</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>post_char<sp/>=<sp/>file_content_nocomments[class_name_pos+len(class_name[</highlight><highlight class="stringliteral">&apos;short&apos;</highlight><highlight class="normal">])]</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pre_char<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[</highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;\t&apos;</highlight><highlight class="normal">])<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>(post_char<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[</highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;:&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&lt;&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;{&apos;</highlight><highlight class="normal">]):</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>search_limit<sp/>=<sp/>class_name_pos</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>class_name_pos</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>findClassNamePosition<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>isAcceptedMemberVariable<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">isAcceptedMemberVariable(mem_el):</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/>is_accepted<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>utils.isAcceptedType(mem_el):</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Non-accepted<sp/>type.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infomsg.IgnoredMemberVariable(mem_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">),<sp/>reason).printMessage()</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_accepted<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_accepted</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Should<sp/>this<sp/>member<sp/>be<sp/>ditched?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>mem_el.keys():</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespaces_list<sp/>=<sp/>utils.getNamespaces(mem_el,<sp/>include_self=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>full_name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;::&apos;</highlight><highlight class="normal">.join(namespaces_list)</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>full_name<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>cfg.ditch:</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_accepted<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_accepted</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>BOSS<sp/>cannot<sp/>yet<sp/>handle<sp/>member<sp/>variables<sp/>that<sp/>are<sp/>pointer-to-loaded-class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/>type_dict<sp/>=<sp/>utils.findType(mem_el)</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/>type_name<sp/>=<sp/>type_dict[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/>pointerness<sp/>=<sp/>type_dict[</highlight><highlight class="stringliteral">&apos;pointerness&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>utils.isLoadedClass(mem_el)<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>pointerness<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;BOSS<sp/>cannot<sp/>yet<sp/>handle<sp/>member<sp/>variables<sp/>of<sp/>type<sp/>pointer-to-loaded-class.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infomsg.IgnoredMemberVariable(mem_el.get(</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">),<sp/>reason).printMessage()</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_accepted<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_accepted</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_accepted</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight><highlight class="comment">#<sp/>======<sp/>END:<sp/>isAcceptedMemberVariable<sp/>========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/scripts/BOSS/modules/classutils.py"/>
  </compounddef>
</doxygen>
