<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="Xray_8cpp" kind="file" language="C++">
    <compoundname>Xray.cpp</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>GAMBIT: Global and Modular BSM Inference Tool</para>
<para><hruler/>
</para>
<para>Xray likelihoods for DarkBit.</para>
<para><hruler/>
</para>
<para>Authors (add name and date if you modify):</para>
<para><simplesect kind="author"><para>Patrick Stöcker (<ulink url="mailto:stoecker@physik.rwth-aachen.de">stoecker@physik.rwth-aachen.de</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2019 Sep</para>
</simplesect>
<simplesect kind="author"><para>Iñigo Saez Casares (<ulink url="mailto:inigo.saez_casares@ens-paris-saclay.fr">inigo.saez_casares@ens-paris-saclay.fr</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2021 April, May</para>
</simplesect>
<hruler/>
 </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>Temporarily<sp/>disabled<sp/>until<sp/>project<sp/>is<sp/>ready</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="23"><highlight class="comment">#include<sp/>&lt;gsl/gsl_math.h&gt;</highlight></codeline>
<codeline lineno="24"><highlight class="comment">#include<sp/>&lt;gsl/gsl_spline.h&gt;</highlight></codeline>
<codeline lineno="25"><highlight class="comment">#include<sp/>&lt;gsl/gsl_errno.h&gt;</highlight></codeline>
<codeline lineno="26"><highlight class="comment">#include<sp/>&lt;gsl/gsl_monte_plain.h&gt;</highlight></codeline>
<codeline lineno="27"><highlight class="comment">#include<sp/>&lt;gsl/gsl_rng.h&gt;</highlight></codeline>
<codeline lineno="28"><highlight class="comment">#include<sp/>&lt;gsl/gsl_min.h&gt;</highlight></codeline>
<codeline lineno="29"><highlight class="comment"></highlight></codeline>
<codeline lineno="30"><highlight class="comment">#include<sp/>&quot;gambit/Elements/gambit_module_headers.hpp&quot;</highlight></codeline>
<codeline lineno="31"><highlight class="comment">#include<sp/>&quot;gambit/Utils/ascii_table_reader.hpp&quot;</highlight></codeline>
<codeline lineno="32"><highlight class="comment">#include<sp/>&quot;gambit/Utils/statistics.hpp&quot;</highlight></codeline>
<codeline lineno="33"><highlight class="comment"></highlight></codeline>
<codeline lineno="34"><highlight class="comment">#include<sp/>&quot;gambit/DarkBit/DarkBit_rollcall.hpp&quot;</highlight></codeline>
<codeline lineno="35"><highlight class="comment">#include<sp/>&quot;gambit/DarkBit/DarkBit_utils.hpp&quot;</highlight></codeline>
<codeline lineno="36"><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment">namespace<sp/>Gambit</highlight></codeline>
<codeline lineno="38"><highlight class="comment">{</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/>namespace<sp/>DarkBit</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/>Auxillary<sp/>functions<sp/>and<sp/>classes<sp/>for<sp/>interpolation<sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="44"><highlight class="comment"></highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>\brief<sp/>Generic<sp/>one-dimensional<sp/>integration<sp/>container<sp/>for<sp/>linear<sp/>interpolation<sp/>and<sp/>cubic<sp/>splines.</highlight></codeline>
<codeline lineno="46"><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>XrayInterpolator<sp/>class:<sp/>Provides<sp/>a<sp/>general<sp/>1-D<sp/>interpolation<sp/>container<sp/>based<sp/>on<sp/>the<sp/>gsl<sp/>library.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Can<sp/>be<sp/>declared<sp/>static<sp/>for<sp/>efficiency<sp/>&amp;<sp/>easy<sp/>one-time<sp/>initialisation<sp/>of<sp/>interpolating<sp/>functions.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>(This<sp/>is<sp/>the<sp/>twin<sp/>sibling<sp/>of<sp/>AxionInterpolator<sp/>in<sp/>DarkBit/src/Axions.cpp)</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/>class<sp/>XrayInterpolator</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Overloaded<sp/>class<sp/>creators<sp/>for<sp/>the<sp/>XrayInterpolator<sp/>class<sp/>using<sp/>the<sp/>init<sp/>function<sp/>below.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XrayInterpolator();</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XrayInterpolator(const<sp/>std::vector&lt;double&gt;<sp/>x,<sp/>const<sp/>std::vector&lt;double&gt;<sp/>y,<sp/>std::string<sp/>type);</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XrayInterpolator(const<sp/>std::vector&lt;double&gt;<sp/>x,<sp/>const<sp/>std::vector&lt;double&gt;<sp/>y);</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XrayInterpolator(std::string<sp/>file,<sp/>std::string<sp/>type);</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XrayInterpolator(std::string<sp/>file);</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XrayInterpolator&amp;<sp/>operator=(XrayInterpolator&amp;&amp;);</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Destructor.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~XrayInterpolator();</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Delete<sp/>copy<sp/>constructor<sp/>and<sp/>assignment<sp/>operator<sp/>to<sp/>avoid<sp/>shallow<sp/>copies.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XrayInterpolator(const<sp/>XrayInterpolator&amp;)<sp/>=<sp/>delete;</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XrayInterpolator<sp/>operator=(const<sp/>XrayInterpolator&amp;)<sp/>=<sp/>delete;</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Routine<sp/>to<sp/>access<sp/>interpolated<sp/>values.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>interpolate(double<sp/>x);</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Routine<sp/>to<sp/>access<sp/>upper<sp/>and<sp/>lower<sp/>boundaries<sp/>of<sp/>available<sp/>data.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>lower();</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>upper();</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>private:</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Initialiser<sp/>for<sp/>the<sp/>XrayInterpolator<sp/>class.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>init(std::string<sp/>file,<sp/>std::string<sp/>type);</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>init(const<sp/>std::vector&lt;double&gt;<sp/>x,<sp/>const<sp/>std::vector&lt;double&gt;<sp/>y,<sp/>std::string<sp/>type);</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>gsl<sp/>objects<sp/>for<sp/>the<sp/>interpolating<sp/>functions.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gsl_interp_accel<sp/>*acc;</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gsl_spline<sp/>*spline;</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Upper<sp/>and<sp/>lower<sp/>boundaries<sp/>available<sp/>for<sp/>the<sp/>interpolating<sp/>function.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>lo;</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>up;</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="81"><highlight class="comment"></highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Default<sp/>constructor.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/>XrayInterpolator::XrayInterpolator()<sp/>{};</highlight></codeline>
<codeline lineno="84"><highlight class="comment"></highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Initialiser<sp/>for<sp/>the<sp/>XrayInterpolator<sp/>class.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>XrayInterpolator::init(const<sp/>std::vector&lt;double&gt;<sp/>x,<sp/>const<sp/>std::vector&lt;double&gt;<sp/>y,<sp/>std::string<sp/>type)</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>pts<sp/>=<sp/>x.size();</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>first<sp/>and<sp/>last<sp/>value<sp/>of<sp/>the<sp/>&quot;x&quot;<sp/>component.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>lo<sp/>=<sp/>x.front();</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>up<sp/>=<sp/>x.back();</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>gsl_interp_accel_alloc<sp/>();</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(type<sp/>==<sp/>&quot;cspline&quot;)</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spline<sp/>=<sp/>gsl_spline_alloc<sp/>(gsl_interp_cspline,<sp/>pts);</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(type<sp/>==<sp/>&quot;linear&quot;)</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spline<sp/>=<sp/>gsl_spline_alloc<sp/>(gsl_interp_linear,<sp/>pts);</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DarkBit_error().raise(LOCAL_INFO,<sp/>&quot;ERROR!<sp/>Interpolation<sp/>type<sp/>&apos;&quot;+type+&quot;&apos;<sp/>not<sp/>known<sp/>to<sp/>class<sp/>XrayInterpolator.\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Available<sp/>types:<sp/>&apos;linear&apos;<sp/>and<sp/>&apos;cspline&apos;.&quot;);</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="105"><highlight class="comment"></highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_spline_init<sp/>(spline,<sp/>&amp;x[0],<sp/>&amp;y[0],<sp/>pts);</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="108"><highlight class="comment"></highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Overloaded<sp/>class<sp/>creators<sp/>for<sp/>the<sp/>XrayInterpolator<sp/>class<sp/>using<sp/>the<sp/>init<sp/>function<sp/>above.</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/>XrayInterpolator::XrayInterpolator(const<sp/>std::vector&lt;double&gt;<sp/>x,<sp/>const<sp/>std::vector&lt;double&gt;<sp/>y,<sp/>std::string<sp/>type)<sp/>{<sp/>init(x,<sp/>y,<sp/>type);<sp/>};</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/>XrayInterpolator::XrayInterpolator(const<sp/>std::vector&lt;double&gt;<sp/>x,<sp/>const<sp/>std::vector&lt;double&gt;<sp/>y)<sp/>{<sp/>init(x,<sp/>y,<sp/>&quot;linear&quot;);<sp/>};</highlight></codeline>
<codeline lineno="112"><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Initialiser<sp/>for<sp/>the<sp/>XrayInterpolator<sp/>class.</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>XrayInterpolator::init(std::string<sp/>file,<sp/>std::string<sp/>type)</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>if<sp/>file<sp/>exists.</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(not(Utils::file_exists(file)))</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DarkBit_error().raise(LOCAL_INFO,<sp/>&quot;ERROR!<sp/>File<sp/>&apos;&quot;+file+&quot;&apos;<sp/>not<sp/>found!&quot;);</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger()<sp/>&lt;&lt;<sp/>LogTags::debug<sp/>&lt;&lt;<sp/>&quot;Reading<sp/>data<sp/>from<sp/>file<sp/>&apos;&quot;+file+&quot;&apos;<sp/>and<sp/>interpolating<sp/>it<sp/>with<sp/>&apos;&quot;+type+&quot;&apos;<sp/>method.&quot;<sp/>&lt;&lt;<sp/>EOM;</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Read<sp/>numerical<sp/>values<sp/>from<sp/>data<sp/>file.</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ASCIItableReader<sp/>tab<sp/>(file);</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>tab.setcolnames(&quot;x&quot;,<sp/>&quot;y&quot;);</highlight></codeline>
<codeline lineno="126"><highlight class="comment"></highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>for<sp/>(int<sp/>idx=1;<sp/>idx<sp/>&lt;<sp/>tab[&quot;x&quot;].size();<sp/>idx++)</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;x[&quot;<sp/>&lt;&lt;<sp/>idx<sp/>&lt;&lt;<sp/>&quot;]<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>tab[&quot;x&quot;][idx]<sp/>&lt;&lt;<sp/>&quot;;<sp/>dx<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>tab[&quot;x&quot;][idx]<sp/>-tab[&quot;x&quot;][idx-1]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/>if<sp/>(tab[&quot;x&quot;][idx]<sp/>-tab[&quot;x&quot;][idx-1]<sp/>&lt;=<sp/>0.0)<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;OH<sp/>NO&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="comment"></highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>init(tab[&quot;x&quot;],tab[&quot;y&quot;],type);</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="135"><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Overloaded<sp/>class<sp/>creators<sp/>for<sp/>the<sp/>XrayInterpolator<sp/>class<sp/>using<sp/>the<sp/>init<sp/>function<sp/>above.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/>XrayInterpolator::XrayInterpolator(std::string<sp/>file,<sp/>std::string<sp/>type)<sp/>{<sp/>init(file,<sp/>type);<sp/>};</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/>XrayInterpolator::XrayInterpolator(std::string<sp/>file)<sp/>{<sp/>init(file,<sp/>&quot;linear&quot;);<sp/>};</highlight></codeline>
<codeline lineno="139"><highlight class="comment"></highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Move<sp/>assignment<sp/>operator</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/>XrayInterpolator&amp;<sp/>XrayInterpolator::operator=(XrayInterpolator&amp;&amp;<sp/>interp)</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if(this<sp/>!=<sp/>&amp;interp)</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(acc,interp.acc);</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(spline,interp.spline);</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(lo,interp.lo);</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(up,interp.up);</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*this;</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="comment"></highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Destructor</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/>XrayInterpolator::~XrayInterpolator()</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_spline_free<sp/>(spline);</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_interp_accel_free<sp/>(acc);</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="comment"></highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Routine<sp/>to<sp/>access<sp/>interpolated<sp/>values.</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>XrayInterpolator::interpolate(double<sp/>x)<sp/>{<sp/>return<sp/>gsl_spline_eval(spline,<sp/>x,<sp/>acc);<sp/>};</highlight></codeline>
<codeline lineno="162"><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Routines<sp/>to<sp/>return<sp/>upper<sp/>and<sp/>lower<sp/>boundaries<sp/>of<sp/>interpolating<sp/>function</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>XrayInterpolator::lower()<sp/>{<sp/>return<sp/>lo;<sp/>};</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>XrayInterpolator::upper()<sp/>{<sp/>return<sp/>up;<sp/>};</highlight></codeline>
<codeline lineno="166"><highlight class="comment"></highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xray<sp/>likelihoods<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>--<sp/>based<sp/>on<sp/>likehoods<sp/>for<sp/>sterile<sp/>neutrinos<sp/>--<sp/>//</highlight></codeline>
<codeline lineno="171"><highlight class="comment"></highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>compute_lnL_Xray_WISPy(double&amp;<sp/>result)</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>Pipes::compute_lnL_Xray_WISPy;</highlight></codeline>
<codeline lineno="175"><highlight class="comment"></highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>XrayInterpolator<sp/>WISPy_bound;</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>first<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>std::pair&lt;double,double&gt;<sp/>xlim;</highlight></codeline>
<codeline lineno="179"><highlight class="comment"></highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(first)</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WISPy_bound<sp/>=<sp/>std::move(XrayInterpolator(GAMBIT_DIR<sp/>&quot;/DarkBit/data/WISPy_bound.dat&quot;,&quot;linear&quot;));</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xlim.first<sp/>=<sp/>WISPy_bound.lower();</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xlim.second<sp/>=<sp/>WISPy_bound.upper();</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="comment"></highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>t_universe<sp/>=<sp/>*Dep::age_universe;<sp/>//<sp/>Age<sp/>of<sp/>the<sp/>Universe<sp/>in<sp/>seconds</highlight></codeline>
<codeline lineno="189"><highlight class="comment"></highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>logm<sp/>=<sp/>log10(*Param[&quot;mass&quot;])<sp/>+<sp/>9;<sp/>//<sp/>In<sp/>&quot;DecayingDM_mixture&quot;,<sp/>the<sp/>mass<sp/>is<sp/>given<sp/>in<sp/>GeV.<sp/>Need<sp/>to<sp/>convert<sp/>it<sp/>into<sp/>eV</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tau<sp/>=<sp/>*Param[&quot;lifetime&quot;];<sp/><sp/><sp/>//<sp/>lifetime<sp/>is<sp/>already<sp/>in<sp/>untis<sp/>of<sp/>s.<sp/>No<sp/>tranformation<sp/>needed.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>frac<sp/>=<sp/>*Param[&quot;fraction&quot;];</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>BR_ph<sp/>=<sp/>*Param[&quot;BR_ph&quot;];</highlight></codeline>
<codeline lineno="194"><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(logm<sp/>&lt;=<sp/>xlim.first<sp/>||<sp/>logm<sp/>&gt;=<sp/>xlim.second)</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Bound<sp/>can<sp/>only<sp/>be<sp/>applied<sp/>if<sp/>log10(mass)<sp/>is<sp/>within<sp/>the<sp/>range<sp/>of<sp/>the<sp/>table.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tau_bound<sp/>=<sp/>pow(10.,WISPy_bound.interpolate(logm));</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>excluded<sp/>=<sp/>((1./frac)*exp(t_universe/tau)*BR_ph*tau<sp/>&lt;<sp/>tau_bound);</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(excluded<sp/>?<sp/>-9.0<sp/>:<sp/>0.0);</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="comment"></highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>compute_lnL_Xray_Integral_SPI_sterile_nu(double&amp;<sp/>result)</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>Pipes::compute_lnL_Xray_Integral_SPI_sterile_nu;</highlight></codeline>
<codeline lineno="211"><highlight class="comment"></highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>XrayInterpolator<sp/>sin2_2t_bound;</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>first<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>std::pair&lt;double,double&gt;<sp/>xlim;</highlight></codeline>
<codeline lineno="215"><highlight class="comment"></highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(first)</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sin2_2t_bound<sp/>=<sp/>std::move(XrayInterpolator(GAMBIT_DIR<sp/>&quot;/DarkBit/data/Integral_sterile_nu_bound.dat&quot;,&quot;linear&quot;));</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xlim.first<sp/>=<sp/>sin2_2t_bound.lower();</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xlim.second<sp/>=<sp/>sin2_2t_bound.upper();</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="comment"></highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>t_universe<sp/>=<sp/>*Dep::age_universe;<sp/>//<sp/>Age<sp/>of<sp/>the<sp/>Universe<sp/>in<sp/>seconds</highlight></codeline>
<codeline lineno="225"><highlight class="comment"></highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>mass<sp/>=<sp/>*Param[&quot;mass&quot;]<sp/>*<sp/>1e6;<sp/>//<sp/>In<sp/>&quot;DecayingDM_mixture&quot;,<sp/>the<sp/>mass<sp/>is<sp/>given<sp/>in<sp/>GeV.<sp/>Need<sp/>to<sp/>convert<sp/>it<sp/>into<sp/>keV</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tau<sp/>=<sp/>*Param[&quot;lifetime&quot;];<sp/><sp/><sp/>//<sp/>lifetime<sp/>is<sp/>already<sp/>in<sp/>untis<sp/>of<sp/>s.<sp/>No<sp/>tranformation<sp/>needed.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>frac<sp/>=<sp/>*Param[&quot;fraction&quot;];</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>BR_ph<sp/>=<sp/>*Param[&quot;BR_ph&quot;];</highlight></codeline>
<codeline lineno="230"><highlight class="comment"></highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(mass<sp/>&lt;=<sp/>xlim.first<sp/>||<sp/>mass<sp/>&gt;=<sp/>xlim.second)</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Bound<sp/>can<sp/>only<sp/>be<sp/>applied<sp/>if<sp/>the<sp/>mass<sp/>is<sp/>within<sp/>the<sp/>range<sp/>of<sp/>the<sp/>table.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>sin2_2t<sp/>=<sp/>sin2_2t_bound.interpolate(mass);</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tau_bound<sp/>=<sp/>2./1.36038e-32<sp/>*<sp/>pow(1e10*sin2_2t,-1.)*pow(mass,-5.);</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>excluded<sp/>=<sp/>((1./frac)*exp(t_universe/tau)*BR_ph*tau<sp/>&lt;<sp/>tau_bound);</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(excluded<sp/>?<sp/>-9.0<sp/>:<sp/>0.0);</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="comment"></highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>compute_lnL_Xray_M31_sterile_nu(double&amp;<sp/>result)</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>Pipes::compute_lnL_Xray_M31_sterile_nu;</highlight></codeline>
<codeline lineno="248"><highlight class="comment"></highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>XrayInterpolator<sp/>sin2_2t_bound;</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>first<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>std::pair&lt;double,double&gt;<sp/>xlim;</highlight></codeline>
<codeline lineno="252"><highlight class="comment"></highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(first)</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sin2_2t_bound<sp/>=<sp/>std::move(XrayInterpolator(GAMBIT_DIR<sp/>&quot;/DarkBit/data/M31_sterile_nu_bound.dat&quot;,&quot;linear&quot;));</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xlim.first<sp/>=<sp/>sin2_2t_bound.lower();</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xlim.second<sp/>=<sp/>sin2_2t_bound.upper();</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="comment"></highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>t_universe<sp/>=<sp/>*Dep::age_universe;<sp/>//<sp/>Age<sp/>of<sp/>the<sp/>Universe<sp/>in<sp/>seconds</highlight></codeline>
<codeline lineno="262"><highlight class="comment"></highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>mass<sp/>=<sp/>*Param[&quot;mass&quot;]<sp/>*<sp/>1e6;<sp/>//<sp/>In<sp/>&quot;DecayingDM_mixture&quot;,<sp/>the<sp/>mass<sp/>is<sp/>given<sp/>in<sp/>GeV.<sp/>Need<sp/>to<sp/>convert<sp/>it<sp/>into<sp/>keV</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tau<sp/>=<sp/>*Param[&quot;lifetime&quot;];<sp/><sp/><sp/>//<sp/>lifetime<sp/>is<sp/>already<sp/>in<sp/>untis<sp/>of<sp/>s.<sp/>No<sp/>tranformation<sp/>needed.</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>frac<sp/>=<sp/>*Param[&quot;fraction&quot;];</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>BR_ph<sp/>=<sp/>*Param[&quot;BR_ph&quot;];</highlight></codeline>
<codeline lineno="267"><highlight class="comment"></highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(mass<sp/>&lt;=<sp/>xlim.first<sp/>||<sp/>mass<sp/>&gt;=<sp/>xlim.second)</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Bound<sp/>can<sp/>only<sp/>be<sp/>applied<sp/>if<sp/>the<sp/>mass<sp/>is<sp/>within<sp/>the<sp/>range<sp/>of<sp/>the<sp/>table.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>sin2_2t<sp/>=<sp/>sin2_2t_bound.interpolate(mass);</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tau_bound<sp/>=<sp/>2./1.36038e-32<sp/>*<sp/>pow(1e10*sin2_2t,-1.)*pow(mass,-5.);</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>excluded<sp/>=<sp/>((1./frac)*exp(t_universe/tau)*BR_ph*tau<sp/>&lt;<sp/>tau_bound);</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(excluded<sp/>?<sp/>-9.0<sp/>:<sp/>0.0);</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="comment"></highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>compute_lnL_Xray_NuSTAR_sterile_nu(double&amp;<sp/>result)</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>Pipes::compute_lnL_Xray_NuSTAR_sterile_nu;</highlight></codeline>
<codeline lineno="285"><highlight class="comment"></highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>XrayInterpolator<sp/>sin2_2t_bound;</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>first<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>std::pair&lt;double,double&gt;<sp/>xlim;</highlight></codeline>
<codeline lineno="289"><highlight class="comment"></highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(first)</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sin2_2t_bound<sp/>=<sp/>std::move(XrayInterpolator(GAMBIT_DIR<sp/>&quot;/DarkBit/data/NuSTAR_sterile_nu_bound.dat&quot;,&quot;linear&quot;));</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xlim.first<sp/>=<sp/>sin2_2t_bound.lower();</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xlim.second<sp/>=<sp/>sin2_2t_bound.upper();</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="comment"></highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>t_universe<sp/>=<sp/>*Dep::age_universe;<sp/>//<sp/>Age<sp/>of<sp/>the<sp/>Universe<sp/>in<sp/>seconds</highlight></codeline>
<codeline lineno="299"><highlight class="comment"></highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>mass<sp/>=<sp/>*Param[&quot;mass&quot;]<sp/>*<sp/>1e6;<sp/>//<sp/>In<sp/>&quot;DecayingDM_mixture&quot;,<sp/>the<sp/>mass<sp/>is<sp/>given<sp/>in<sp/>GeV.<sp/>Need<sp/>to<sp/>convert<sp/>it<sp/>into<sp/>keV</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tau<sp/>=<sp/>*Param[&quot;lifetime&quot;];<sp/><sp/><sp/>//<sp/>lifetime<sp/>is<sp/>already<sp/>in<sp/>untis<sp/>of<sp/>s.<sp/>No<sp/>tranformation<sp/>needed.</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>frac<sp/>=<sp/>*Param[&quot;fraction&quot;];</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>BR_ph<sp/>=<sp/>*Param[&quot;BR_ph&quot;];</highlight></codeline>
<codeline lineno="304"><highlight class="comment"></highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(mass<sp/>&lt;=<sp/>xlim.first<sp/>||<sp/>mass<sp/>&gt;=<sp/>xlim.second)</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Bound<sp/>can<sp/>only<sp/>be<sp/>applied<sp/>if<sp/>the<sp/>mass<sp/>is<sp/>within<sp/>the<sp/>range<sp/>of<sp/>the<sp/>table.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>sin2_2t<sp/>=<sp/>sin2_2t_bound.interpolate(mass);</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tau_bound<sp/>=<sp/>2./1.36038e-32<sp/>*<sp/>pow(1e10*sin2_2t,-1.)*pow(mass,-5.);</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>excluded<sp/>=<sp/>((1./frac)*exp(t_universe/tau)*BR_ph*tau<sp/>&lt;<sp/>tau_bound);</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(excluded<sp/>?<sp/>-9.0<sp/>:<sp/>0.0);</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="comment"></highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/>//-------------<sp/>Numerical<sp/>constants<sp/>and<sp/>other<sp/>useful<sp/>things<sp/>-------------//</highlight></codeline>
<codeline lineno="320"><highlight class="comment"></highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>masses</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>double<sp/>Mp<sp/>=<sp/>Gambit::m_planck;<sp/>//<sp/>Planck<sp/>mass<sp/>[GeV]</highlight></codeline>
<codeline lineno="323"><highlight class="comment"></highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>mathematical<sp/>constants</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>double<sp/>pi=Gambit::pi;</highlight></codeline>
<codeline lineno="326"><highlight class="comment"></highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>physical<sp/>constants</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>double<sp/>hbar_GeV<sp/>=<sp/>Gambit::hbar;<sp/>//<sp/>reduced<sp/>Planck<sp/>constant<sp/>[GeV.s]</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>double<sp/>cs<sp/>=<sp/>Gambit::s2cm;<sp/>//<sp/>speed<sp/>of<sp/>light<sp/>[cm/s]</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>double<sp/>Mpc_2_km<sp/>=<sp/>3.0857e19;<sp/>//<sp/>Mpc<sp/>to<sp/>km</highlight></codeline>
<codeline lineno="331"><highlight class="comment"></highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Minimum<sp/>finite<sp/>result<sp/>returnable<sp/>from<sp/>log(double<sp/>x);</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>double<sp/>logmin<sp/>=<sp/>log(std::numeric_limits&lt;double&gt;::min());</highlight></codeline>
<codeline lineno="334"><highlight class="comment"></highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Support<sp/>class<sp/>to<sp/>handle<sp/>X-ray<sp/>experiments<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="338"><highlight class="comment"></highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/><sp/><sp/><sp/>//-------------<sp/>Class<sp/>declaration<sp/>-------------//</highlight></codeline>
<codeline lineno="340"><highlight class="comment"></highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/><sp/>class<sp/>Xray</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline lineno="344"><highlight class="comment"></highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Xray(std::string<sp/>experiment,<sp/>double<sp/>J_factor);</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>solidAngle(std::vector&lt;double&gt;<sp/>lRange,<sp/>std::vector&lt;double&gt;<sp/>bRange);</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>set_deltaOmega();</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>getDeltaOmega()<sp/>const;</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>getJ()<sp/>const;</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>getEmin()<sp/>const;</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>getEmax()<sp/>const;</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>getDeltaE()<sp/>const;</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>getFluxOrigin()<sp/>const;</highlight></codeline>
<codeline lineno="354"><highlight class="comment"></highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>flux(double<sp/>const&amp;<sp/>E);</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>sigma(double<sp/>const&amp;<sp/>E);</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>fluxIntegrated(double<sp/>const&amp;<sp/>E);</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>sigmaIntegrated(double<sp/>const&amp;<sp/>E);</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>deltaE(double<sp/>const&amp;<sp/>E);</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~Xray();</highlight></codeline>
<codeline lineno="361"><highlight class="comment"></highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>protected:</highlight></codeline>
<codeline lineno="363"><highlight class="comment"></highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>m_J;<sp/>//<sp/>astrophysical<sp/>factor<sp/>for<sp/>the<sp/>predicted<sp/>photon<sp/>flux<sp/>from<sp/>decaying<sp/>DM</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>m_Emin;<sp/>//<sp/>minimum<sp/>energy<sp/>of<sp/>the<sp/>observations</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>m_Emax;<sp/>//<sp/>maximum<sp/>energy<sp/>of<sp/>the<sp/>observations</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>m_deltaOmega;<sp/>//<sp/>total<sp/>solid<sp/>angle<sp/>of<sp/>observation</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>m_deltaE;<sp/>//<sp/>energy<sp/>resolution<sp/>in<sp/>percentage<sp/>of<sp/>the<sp/>energy<sp/>scale</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m_fluxOrigin;<sp/>//<sp/>origin<sp/>of<sp/>observed<sp/>flux:<sp/>galactic<sp/>(1),<sp/>extra-galactic<sp/>(2)<sp/>or<sp/>both<sp/>(3)</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;<sp/>m_lRange;<sp/>//<sp/>observation<sp/>region<sp/>in<sp/>galactic<sp/>coordinates<sp/>(degrees)</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;double&gt;<sp/>&gt;<sp/>m_bRange;</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_experiment;</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>int&gt;<sp/>m_experimentMap;</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="375"><highlight class="comment"></highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>constructor</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/><sp/><sp/>Xray::Xray(std::string<sp/>experiment,<sp/>double<sp/>J_factor)<sp/>:<sp/>m_J(J_factor),<sp/>m_experiment(experiment),<sp/>m_experimentMap({{&quot;INTEGRAL&quot;,<sp/>1},<sp/>{&quot;HEAO&quot;,<sp/>2}})</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>switch(m_experimentMap[m_experiment])</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>1<sp/>:</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_Emin<sp/>=<sp/>20e3;</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_Emax<sp/>=<sp/>2e6;</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lRange<sp/>=<sp/>{<sp/>{-30.,<sp/>30.}<sp/>};</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bRange<sp/>=<sp/>{<sp/>{-15.,<sp/>15.}<sp/>};</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_deltaE<sp/>=<sp/>8e3;</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_deltaOmega<sp/>=<sp/>0.542068;</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_fluxOrigin<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="390"><highlight class="comment"></highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>2<sp/>:</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_Emin<sp/>=<sp/>3e3;</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_Emax<sp/>=<sp/>60e3;</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lRange<sp/>=<sp/>{<sp/>{58.,<sp/>109.},<sp/>{238.,<sp/>289.}<sp/>};</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_bRange<sp/>=<sp/>{<sp/>{-90.,<sp/>-20.},<sp/>{20.,<sp/>90.}<sp/>};</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_deltaE<sp/>=<sp/>0.3;</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_deltaOmega<sp/>=<sp/>1.17135;</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_fluxOrigin<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="400"><highlight class="comment"></highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default<sp/>:</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(&quot;Wrong<sp/>experiment<sp/>name<sp/>in<sp/>Xray<sp/>object&quot;);</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//set_deltaOmega();</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="comment"></highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/><sp/><sp/>//-------------<sp/>Function<sp/>returning<sp/>the<sp/>energy<sp/>dispersion<sp/>of<sp/>the<sp/>instrument<sp/>-------------//</highlight></codeline>
<codeline lineno="409"><highlight class="comment"></highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>Xray::deltaE<sp/>(double<sp/>const&amp;<sp/>E)</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>switch(m_experimentMap[m_experiment])</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>1<sp/>:</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>m_deltaE;</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="417"><highlight class="comment"></highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>2<sp/>:</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>m_deltaE*E;</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="421"><highlight class="comment"></highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default<sp/>:</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>1.;</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="comment"></highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>-----------<sp/>Functions<sp/>to<sp/>compute<sp/>the<sp/>solid<sp/>angle<sp/>of<sp/>observation<sp/>-------------//</highlight></codeline>
<codeline lineno="429"><highlight class="comment"></highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>auxiliary<sp/>function<sp/>for<sp/>gsl<sp/>integration</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>deltaOmega<sp/>(double<sp/>x[],<sp/>size_t<sp/>dim,<sp/>void<sp/>*p)</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>(void)(p);</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>(void)(dim);</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>cos(x[1]);</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="comment"></highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>computes<sp/>the<sp/>solide<sp/>angle<sp/>for<sp/>a<sp/>given<sp/>galactic<sp/>coordinates<sp/>range<sp/>(in<sp/>degrees)</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>Xray::solidAngle(std::vector&lt;double&gt;<sp/>lRange,<sp/>std::vector&lt;double&gt;<sp/>bRange)</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>size_t<sp/>dim<sp/>=<sp/>2,<sp/>calls<sp/>=<sp/>1e8;</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>double<sp/>xl[dim]<sp/>=<sp/>{lRange[0]*pi/180.,<sp/>bRange[0]*pi/180.},<sp/>xu[dim]<sp/>=<sp/>{lRange[1]*pi/180.,<sp/>bRange[1]*pi/180.};</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>result,<sp/>abserr;</highlight></codeline>
<codeline lineno="444"><highlight class="comment"></highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_monte_plain_state<sp/>*s<sp/>=<sp/>gsl_monte_plain_alloc(dim);</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_monte_plain_init(s);</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_rng<sp/>*r<sp/>=<sp/>gsl_rng_alloc(gsl_rng_taus2);</highlight></codeline>
<codeline lineno="448"><highlight class="comment"></highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_monte_function<sp/>F;</highlight></codeline>
<codeline lineno="450"><highlight class="comment"></highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>F.f<sp/>=<sp/>&amp;deltaOmega;</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>F.dim<sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>F.params<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="454"><highlight class="comment"></highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_monte_plain_integrate(&amp;F,<sp/>xl,<sp/>xu,<sp/>dim,<sp/>calls,<sp/>r,<sp/>s,<sp/>&amp;result,<sp/>&amp;abserr);</highlight></codeline>
<codeline lineno="456"><highlight class="comment"></highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_monte_plain_free(s);<sp/><sp/></highlight></codeline>
<codeline lineno="458"><highlight class="comment"></highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="comment"></highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>sets<sp/>the<sp/>total<sp/>solid<sp/>angle<sp/>of<sp/>observation<sp/>for<sp/>the<sp/>experiment</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>Xray::set_deltaOmega()</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>result(0);</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i=0;<sp/>i&lt;m_lRange.size();<sp/>++i)</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>solidAngle(m_lRange[i],<sp/>m_bRange[i]);</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>m_deltaOmega<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="comment"></highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/><sp/><sp/>//-------------<sp/>Functions<sp/>to<sp/>compute<sp/>the<sp/>photon<sp/>flux<sp/>and<sp/>its<sp/>standard<sp/>deviation<sp/>-------------//</highlight></codeline>
<codeline lineno="474"><highlight class="comment"></highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>differential<sp/>photon<sp/>flux<sp/>[photons/keV/cm²/s]</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>Xray::flux(double<sp/>const&amp;<sp/>E)</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>switch(m_experimentMap[m_experiment])</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>1<sp/>:</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>return<sp/>4.8e-8*pow(E/100e3,-1.55)<sp/>+<sp/>6.6e-8*exp(-(E-50e3)/7.5e3);</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>1.6e-7*exp(-(E-50e3)/7.7e3)<sp/>+<sp/>0.92e-7*pow(E/100e3,<sp/>-1.79)<sp/>+<sp/>0.34e-7*pow(E/100e3,<sp/>-0.95)*exp(-(E-100e3)/3411e3)<sp/>+<sp/>67.3e-7/E;</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="484"><highlight class="comment"></highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>2<sp/>:</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>7.877*pow(10.,<sp/>0.87)*pow(E,<sp/>-0.29)*exp(-(E/41.13e3))/E*m_deltaOmega;</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="488"><highlight class="comment"></highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default<sp/>:</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0.;</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="comment"></highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>auxiliary<sp/>function<sp/>for<sp/>gsl<sp/>integration</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>flux_gsl(double<sp/>x,<sp/>void<sp/>*p)</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Xray<sp/>*experiment<sp/>=<sp/>static_cast&lt;Xray*&gt;(p);</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>experiment-&gt;flux(x);</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="comment"></highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>double<sp/>int_factor(1.1);<sp/>//<sp/>integration<sp/>range<sp/>=<sp/>int_factor*energy<sp/>dispersion<sp/>instrument</highlight></codeline>
<codeline lineno="503"><highlight class="comment"></highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>Xray::fluxIntegrated(double<sp/>const&amp;<sp/>E)</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>n<sp/>=<sp/>1e4;</highlight></codeline>
<codeline lineno="507"><highlight class="comment"></highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_integration_workspace<sp/>*w<sp/>=<sp/>gsl_integration_workspace_alloc(n);</highlight></codeline>
<codeline lineno="509"><highlight class="comment"></highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>epsabs<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>epsrel<sp/>=<sp/>1e-2;</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>limit<sp/>=<sp/>1e3;</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>result,<sp/>abserr;</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>key<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>delta<sp/>=<sp/>int_factor*deltaE(E);</highlight></codeline>
<codeline lineno="516"><highlight class="comment"></highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_function<sp/>F;</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>F.function<sp/>=<sp/>&amp;flux_gsl;</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>F.params<sp/>=<sp/>this;</highlight></codeline>
<codeline lineno="520"><highlight class="comment"></highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_integration_qag(&amp;F,<sp/>E-delta/2.,<sp/>E+delta/2.,<sp/>epsabs,<sp/>epsrel,<sp/>limit,<sp/>key,<sp/>w,<sp/>&amp;result,<sp/>&amp;abserr);</highlight></codeline>
<codeline lineno="522"><highlight class="comment"></highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_integration_workspace_free(w);</highlight></codeline>
<codeline lineno="524"><highlight class="comment"></highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="comment"></highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>standard<sp/>deviation<sp/>of<sp/>the<sp/>differential<sp/>photon<sp/>flux<sp/>[photons/keV/cm²/s]</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>Xray::sigma(double<sp/>const&amp;<sp/>E)</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="comment"></highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>switch(m_experimentMap[m_experiment])</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>1<sp/>:</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>return<sp/>sqrt(pow(pow(E/100e3,-1.55),2)*pow(0.6e-5,2)<sp/>+<sp/>pow(4.8e-8*1.55*pow(E/100e3,-2.55),2)*pow(0.25,2)<sp/>+<sp/>exp(-2*(E-50e3)/7.5e3)*pow(0.5e-8,<sp/>2.)<sp/>+<sp/>pow(6.6e-8,<sp/>2.)*pow((E-50e3)/pow(7.5e3,<sp/>2.),<sp/>2.)*exp(-2*(E-50e3)/7.5e3)*pow(1e3,<sp/>2.));</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>sqrt(<sp/>pow(14.6e-4/E,<sp/>2)<sp/>+<sp/>pow(1.6e-7*(E-50e3)/7.7e3,<sp/>2)<sp/>*<sp/>pow(0.7e3,<sp/>2)<sp/>*<sp/>exp(-2.*(E-50e3)/7.7e3)<sp/>+<sp/>pow(0.4e-7,<sp/>2)<sp/>*<sp/>exp(-2.*(E-50e3)/7.7e3)<sp/>+<sp/>pow(0.34e-7*pow(E/100e3,<sp/>-0.95),<sp/>2)<sp/>*<sp/>pow((E-100e3)/3411e3,<sp/>2)<sp/>*<sp/>exp(-(E-100e3)/3411e3)<sp/>*<sp/>pow(2371e3,<sp/>2));</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="538"><highlight class="comment"></highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>2<sp/>:</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(flux(E)*E/m_deltaOmega)*0.02*m_deltaOmega/E;</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="542"><highlight class="comment"></highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default<sp/>:</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0.;</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="comment"></highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>auxiliary<sp/>function<sp/>for<sp/>gsl<sp/>integration</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>sigma_gsl<sp/>(double<sp/>x,<sp/>void<sp/>*p)</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Xray<sp/>*experiment<sp/>=<sp/>static_cast&lt;Xray*&gt;(p);</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>pow(experiment-&gt;sigma(x),<sp/>2.);</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="comment"></highlight></codeline>
<codeline lineno="556"><highlight class="comment"></highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>Xray::sigmaIntegrated(double<sp/>const&amp;<sp/>E)</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>n<sp/>=<sp/>1e4;</highlight></codeline>
<codeline lineno="560"><highlight class="comment"></highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_integration_workspace<sp/>*w<sp/>=<sp/>gsl_integration_workspace_alloc(n);</highlight></codeline>
<codeline lineno="562"><highlight class="comment"></highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>epsabs<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>epsrel<sp/>=<sp/>1e-2;</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>limit<sp/>=<sp/>1e3;</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>result,<sp/>abserr;</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>key<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>delta<sp/>=<sp/>int_factor*deltaE(E);</highlight></codeline>
<codeline lineno="569"><highlight class="comment"></highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_function<sp/>F;</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>F.function<sp/>=<sp/>&amp;sigma_gsl;</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>F.params<sp/>=<sp/>this;</highlight></codeline>
<codeline lineno="573"><highlight class="comment"></highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_integration_qag(&amp;F,<sp/>E-delta/2.,<sp/>E+delta/2.,<sp/>epsabs,<sp/>epsrel,<sp/>limit,<sp/>key,<sp/>w,<sp/>&amp;result,<sp/>&amp;abserr);</highlight></codeline>
<codeline lineno="575"><highlight class="comment"></highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_integration_workspace_free(w);</highlight></codeline>
<codeline lineno="577"><highlight class="comment"></highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="comment"></highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/><sp/><sp/><sp/>//-------------<sp/>Elevator<sp/>functions<sp/>-------------//<sp/></highlight></codeline>
<codeline lineno="582"><highlight class="comment"></highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>Xray::getDeltaOmega()<sp/>const<sp/>{<sp/>return<sp/>m_deltaOmega;<sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="comment"></highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>Xray::getJ()<sp/>const<sp/>{<sp/>return<sp/>m_J;<sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="comment"></highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>Xray::getEmin()<sp/>const<sp/>{<sp/>return<sp/>m_Emin;<sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="comment"></highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>Xray::getEmax()<sp/>const<sp/>{<sp/>return<sp/>m_Emax;<sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="comment"></highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>Xray::getDeltaE()<sp/>const<sp/>{<sp/>return<sp/>m_deltaE;<sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="comment"></highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>Xray::getFluxOrigin()<sp/>const<sp/>{<sp/>return<sp/>m_fluxOrigin;<sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="comment"></highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>destructor</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/><sp/><sp/><sp/>Xray::~Xray()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="comment"></highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/><sp/><sp/><sp/>//-------------<sp/>Functions<sp/>to<sp/>compute<sp/>the<sp/>age<sp/>of<sp/>the<sp/>Universe<sp/>at<sp/>a<sp/>given<sp/>redshift<sp/>-------------//</highlight></codeline>
<codeline lineno="599"><highlight class="comment"></highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>useful<sp/>structure</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>cosmology_params<sp/>{double<sp/>OmegaM;<sp/>double<sp/>OmegaR;<sp/>double<sp/>OmegaLambda;<sp/>double<sp/>H0;};</highlight></codeline>
<codeline lineno="602"><highlight class="comment"></highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>auxiliary<sp/>function<sp/>for<sp/>gsl<sp/>integration</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>age_f<sp/>(double<sp/>x,<sp/>void<sp/>*p)</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>cosmology_params<sp/>*params<sp/>=<sp/>static_cast&lt;cosmology_params*&gt;(p);</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>OmegaM<sp/>=<sp/>params-&gt;OmegaM;</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>OmegaLambda<sp/>=<sp/>params-&gt;OmegaLambda;</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>OmegaR<sp/>=<sp/>params-&gt;OmegaR;</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>OmegaK<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="611"><highlight class="comment"></highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>1./sqrt(<sp/>OmegaM*pow(1+x,<sp/>5.)<sp/>+<sp/>OmegaLambda*pow(1+x,<sp/>2.)<sp/>+<sp/>OmegaK*pow(1+x,<sp/>4.)<sp/>+<sp/>OmegaR*pow(1+x,<sp/>6.)<sp/>);</highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="comment"></highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>computes<sp/>the<sp/>age<sp/>of<sp/>the<sp/>Universe<sp/>at<sp/>a<sp/>given<sp/>redshift<sp/>([0]<sp/>age,<sp/>[1]<sp/>abserr)</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>ageUniverse<sp/>(double<sp/>redshift,<sp/>double<sp/>OmegaM,<sp/>double<sp/>OmegaR,<sp/>double<sp/>OmegaLambda,<sp/>double<sp/>H0)</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>n<sp/>=<sp/>1e4;<sp/></highlight></codeline>
<codeline lineno="619"><highlight class="comment"></highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_integration_workspace<sp/>*w<sp/>=<sp/><sp/>gsl_integration_workspace_alloc(n);</highlight></codeline>
<codeline lineno="621"><highlight class="comment"></highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>epsabs<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>epsrel<sp/>=<sp/>1e-3;</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>limit<sp/>=<sp/>1e3;</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>result,<sp/>abserr;</highlight></codeline>
<codeline lineno="626"><highlight class="comment"></highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>cosmology_params<sp/>params<sp/>=<sp/>{OmegaM,<sp/>OmegaR,<sp/>OmegaLambda,<sp/>H0};</highlight></codeline>
<codeline lineno="628"><highlight class="comment"></highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_function<sp/>F;</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>F.function<sp/>=<sp/>&amp;age_f;</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>F.params<sp/>=<sp/>&amp;params;</highlight></codeline>
<codeline lineno="632"><highlight class="comment"></highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_integration_qagiu(&amp;F,<sp/>redshift,<sp/>epsabs,<sp/>epsrel,<sp/>limit,<sp/>w,<sp/>&amp;result,<sp/>&amp;abserr);</highlight></codeline>
<codeline lineno="634"><highlight class="comment"></highlight></codeline>
<codeline lineno="635"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_integration_workspace_free(w);</highlight></codeline>
<codeline lineno="636"><highlight class="comment"></highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>{result/H0,<sp/>abserr/H0};</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="comment"></highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/><sp/><sp/><sp/>//-------------<sp/>Functions<sp/>to<sp/>compute<sp/>X-ray<sp/>likelihoods<sp/>-------------//</highlight></codeline>
<codeline lineno="641"><highlight class="comment"></highlight></codeline>
<codeline lineno="642"><highlight class="comment"></highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>useful<sp/>structure</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>XrayLikelihood_params<sp/>{double<sp/>mass;<sp/>double<sp/>tau;<sp/>double<sp/>gamma_ph;<sp/>double<sp/>fraction;<sp/>Xray<sp/>experiment;<sp/>double<sp/>OmegaDM;<sp/>daFunk::Funk<sp/>H_z;<sp/>daFunk::Funk<sp/>t_z;<sp/>double<sp/>ageUniverse;};</highlight></codeline>
<codeline lineno="645"><highlight class="comment"></highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>extra-galactic<sp/>contribution<sp/>to<sp/>the<sp/>differential<sp/>photon<sp/>flux<sp/>[photons/eV/cm²/s]</highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>dPhiEG(double<sp/>const&amp;<sp/>E,<sp/>XrayLikelihood_params<sp/>*params)</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>mass<sp/>=<sp/>params-&gt;mass;<sp/></highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>x<sp/>=<sp/>mass/2./E;</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>z<sp/>=<sp/>x<sp/>-<sp/>1.;</highlight></codeline>
<codeline lineno="652"><highlight class="comment"></highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(z&lt;0)<sp/>{<sp/>return<sp/>0.;<sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="comment"></highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Xray<sp/>experiment<sp/>=<sp/>params-&gt;experiment;</highlight></codeline>
<codeline lineno="658"><highlight class="comment"></highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tau<sp/>=<sp/>params-&gt;tau,<sp/>gamma_ph<sp/>=<sp/>params-&gt;gamma_ph,<sp/>fraction<sp/>=<sp/>params-&gt;fraction;</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>OmegaDM<sp/>=<sp/>params-&gt;OmegaDM;</highlight></codeline>
<codeline lineno="661"><highlight class="comment"></highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>daFunk::Funk<sp/>H_z<sp/>=<sp/>params-&gt;H_z;</highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>boost::shared_ptr&lt;daFunk::FunkBound&gt;<sp/>H_z_bound<sp/>=<sp/>H_z-&gt;bind(&quot;z&quot;);</highlight></codeline>
<codeline lineno="664"><highlight class="comment"></highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>H0<sp/>=<sp/>H_z_bound-&gt;eval(0)/Mpc_2_km;<sp/>//<sp/>H0<sp/>in<sp/>1/s</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>rhoC<sp/>=<sp/>3*pow(H0,<sp/>2)*pow(Mp,<sp/>2)/(8*pi)/hbar_GeV/pow(cs,<sp/>3)*1e9;<sp/>//<sp/>critical<sp/>density<sp/>un<sp/>ev/cm^3</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>density<sp/>=<sp/>fraction*OmegaDM*rhoC;</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>H<sp/>=<sp/>H_z_bound-&gt;eval(x)/Mpc_2_km;<sp/>//<sp/>H(x)<sp/>in<sp/>1/s</highlight></codeline>
<codeline lineno="669"><highlight class="comment"></highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>daFunk::Funk<sp/>t_z<sp/>=<sp/>params-&gt;t_z;</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>boost::shared_ptr&lt;daFunk::FunkBound&gt;<sp/>t_z_bound<sp/>=<sp/>t_z-&gt;bind(&quot;z&quot;);</highlight></codeline>
<codeline lineno="672"><highlight class="comment"></highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>t<sp/>=<sp/>t_z_bound-&gt;eval(z);</highlight></codeline>
<codeline lineno="674"><highlight class="comment"></highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>experiment.getDeltaOmega()*2.*1./(4*pi)*(gamma_ph*density*cs*exp(-t/tau))/(mass*E)/H;</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="comment"></highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/><sp/><sp/><sp/>const<sp/>double<sp/>s(1./3.);<sp/>//<sp/>standard<sp/>deviation<sp/>of<sp/>the<sp/>gaussian<sp/>for<sp/>the<sp/>galactic<sp/>emission<sp/>line<sp/>=<sp/>s*energy<sp/>dispersion<sp/>instrument</highlight></codeline>
<codeline lineno="680"><highlight class="comment"></highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>galactic<sp/>(Milky<sp/>Way)<sp/>contribution<sp/>to<sp/>the<sp/>differential<sp/>photon<sp/>flux<sp/>[photons/eV/cm²/s]</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>dPhiG(double<sp/>const&amp;<sp/>E,<sp/>XrayLikelihood_params<sp/>*params)</highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>mass<sp/>=<sp/>params-&gt;mass,<sp/>tau<sp/>=<sp/>params-&gt;tau,<sp/>gamma_ph<sp/>=<sp/>params-&gt;gamma_ph,<sp/>fraction<sp/>=<sp/>params-&gt;fraction;</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Xray<sp/>experiment<sp/>=<sp/>params-&gt;experiment;</highlight></codeline>
<codeline lineno="686"><highlight class="comment"></highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>J<sp/>=<sp/>experiment.getJ();</highlight></codeline>
<codeline lineno="688"><highlight class="comment"></highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>t0<sp/>=<sp/>params-&gt;ageUniverse;</highlight></codeline>
<codeline lineno="690"><highlight class="comment"></highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>sigma<sp/>=<sp/>s*experiment.deltaE(E);<sp/>//<sp/>standard<sp/>deviation<sp/>of<sp/>the<sp/>gaussian<sp/>modelling<sp/>the<sp/>enery<sp/>dispersion<sp/>of<sp/>the<sp/>instrument</highlight></codeline>
<codeline lineno="692"><highlight class="comment"></highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>2.*(gamma_ph*J*fraction*exp(-t0/tau))/(4.*pi*mass)/sqrt(2*pi*sigma*sigma)*exp(-pow(E-mass/2.,2)/(2*sigma*sigma));</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="comment"></highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>total<sp/>predicted<sp/>differential<sp/>photon<sp/>flux<sp/>for<sp/>a<sp/>given<sp/>X-ray<sp/>experiment<sp/>[photons/eV/cm²/s]</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>XrayPrediction(double<sp/>const&amp;<sp/>E,<sp/>XrayLikelihood_params<sp/>*params)</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Xray<sp/>experiment<sp/>=<sp/>params-&gt;experiment;</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>switch(experiment.getFluxOrigin())</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>1<sp/>:</highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>dPhiG(E,<sp/>params);</highlight></codeline>
<codeline lineno="704"><highlight class="comment"></highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>2<sp/>:</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>dPhiEG(E,<sp/>params);</highlight></codeline>
<codeline lineno="707"><highlight class="comment"></highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>3<sp/>:</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>dPhiG(E,<sp/>params)<sp/>+<sp/>dPhiEG(E,<sp/>params);</highlight></codeline>
<codeline lineno="710"><highlight class="comment"></highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default<sp/>:</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(&quot;Wrong<sp/>value<sp/>for<sp/>m_fluxOrigin<sp/>in<sp/>Xray<sp/>class,<sp/>allowed<sp/>values<sp/>are<sp/>1<sp/>(galactic<sp/>flux),<sp/>2<sp/>(extra-galactic<sp/>flux)<sp/>and<sp/>3<sp/>(both)&quot;);</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="comment"></highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>auxiliary<sp/>function<sp/>for<sp/>gsl<sp/>integration</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>XrayPredictionIntegrated_gsl(double<sp/>x,<sp/>void<sp/>*p)</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>XrayLikelihood_params<sp/>*params<sp/>=<sp/>static_cast&lt;XrayLikelihood_params*&gt;(p);</highlight></codeline>
<codeline lineno="721"><highlight class="comment"></highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>XrayPrediction(x,<sp/>params);</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="comment"></highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>total<sp/>predicted<sp/>photon<sp/>flux<sp/>integrated<sp/>over<sp/>an<sp/>interval<sp/>deltaE,<sp/>centered<sp/>around<sp/>E<sp/>[photons/cm²/s]</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>XrayPredictionIntegrated(double<sp/>const&amp;<sp/>E,<sp/>XrayLikelihood_params<sp/>*params)</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>n<sp/>=<sp/>1e4;</highlight></codeline>
<codeline lineno="729"><highlight class="comment"></highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_integration_workspace<sp/>*w<sp/>=<sp/><sp/>gsl_integration_workspace_alloc(n);</highlight></codeline>
<codeline lineno="731"><highlight class="comment"></highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>epsabs<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>epsrel<sp/>=<sp/>1e-2;</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>limit<sp/>=<sp/>1e3;</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>result,<sp/>abserr;</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>key<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Xray<sp/>experiment<sp/>=<sp/>params-&gt;experiment;</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>delta<sp/>=<sp/>int_factor*experiment.deltaE(E);</highlight></codeline>
<codeline lineno="739"><highlight class="comment"></highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_function<sp/>F;</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>F.function<sp/>=<sp/>&amp;XrayPredictionIntegrated_gsl;</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>F.params<sp/>=<sp/>params;</highlight></codeline>
<codeline lineno="743"><highlight class="comment"></highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_integration_qag(&amp;F,<sp/>E-delta/2.,<sp/>E+delta/2.,<sp/>epsabs,<sp/>epsrel,<sp/>limit,<sp/>key,<sp/>w,<sp/>&amp;result,<sp/>&amp;abserr);</highlight></codeline>
<codeline lineno="745"><highlight class="comment"></highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_integration_workspace_free(w);</highlight></codeline>
<codeline lineno="747"><highlight class="comment"></highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="comment"></highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>auxiliary<sp/>function<sp/>for<sp/>gsl<sp/>minimization<sp/>returning<sp/>the<sp/>log-likelihood<sp/>for<sp/>a<sp/>given<sp/>X-ray<sp/>experiment</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>XrayLogLikelihood(double<sp/>E,<sp/>void<sp/>*p)</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>XrayLikelihood_params<sp/>*params<sp/>=<sp/>static_cast&lt;XrayLikelihood_params*&gt;(p);</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Xray<sp/>experiment<sp/>=<sp/>params-&gt;experiment;</highlight></codeline>
<codeline lineno="756"><highlight class="comment"></highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>data<sp/>=<sp/>experiment.fluxIntegrated(E);</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>sigma<sp/>=<sp/>experiment.sigmaIntegrated(E);</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>prediction<sp/>=<sp/>XrayPredictionIntegrated(E,<sp/>params);</highlight></codeline>
<codeline lineno="760"><highlight class="comment"></highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(prediction&gt;=data)<sp/>?<sp/>-pow(data-prediction,2.)/(2.*sigma*sigma)<sp/>:<sp/>0.;</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="comment"></highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>computes<sp/>the<sp/>energy<sp/>E<sp/>which<sp/>minimizes<sp/>the<sp/>log-likelihood</highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>minimizeLogLikelihood(XrayLikelihood_params<sp/>*params)</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>status;</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>iter<sp/>=<sp/>0,<sp/>max_iter<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>gsl_min_fminimizer_type<sp/>*T;</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_min_fminimizer<sp/>*s;</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Xray<sp/>experiment<sp/>=<sp/>params-&gt;experiment;</highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>mass<sp/>=<sp/>params-&gt;mass;</highlight></codeline>
<codeline lineno="773"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>Emin<sp/>=<sp/>experiment.getEmin(),<sp/>Emax<sp/>=<sp/>experiment.getEmax();</highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>a<sp/>=<sp/>Emin+experiment.deltaE(Emin),<sp/>b<sp/>=<sp/>fmin(mass/2.,<sp/>Emax-experiment.deltaE(Emax));</highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>m<sp/>=<sp/>(a+b)/2.;</highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_function<sp/>F;</highlight></codeline>
<codeline lineno="777"><highlight class="comment"></highlight></codeline>
<codeline lineno="778"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>F.function<sp/>=<sp/>&amp;XrayLogLikelihood;</highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>F.params<sp/>=<sp/>params;</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>=<sp/>gsl_min_fminimizer_brent;</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>gsl_min_fminimizer_alloc(T);</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_min_fminimizer_set<sp/>(s,<sp/>&amp;F,<sp/>m,<sp/>a,<sp/>b);</highlight></codeline>
<codeline lineno="783"><highlight class="comment"></highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>do</highlight></codeline>
<codeline lineno="785"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter++;</highlight></codeline>
<codeline lineno="787"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>gsl_min_fminimizer_iterate<sp/>(s);</highlight></codeline>
<codeline lineno="788"><highlight class="comment"></highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>gsl_min_fminimizer_x_minimum<sp/>(s);</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>gsl_min_fminimizer_x_lower<sp/>(s);</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>gsl_min_fminimizer_x_upper<sp/>(s);</highlight></codeline>
<codeline lineno="792"><highlight class="comment"></highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>gsl_min_test_interval<sp/>(a,<sp/>b,<sp/>0.1,<sp/>0);</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(status<sp/>==<sp/>GSL_CONTINUE<sp/>&amp;&amp;<sp/>iter<sp/>&lt;<sp/>max_iter);</highlight></codeline>
<codeline lineno="795"><highlight class="comment"></highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>gsl_min_fminimizer_free<sp/>(s);</highlight></codeline>
<codeline lineno="797"><highlight class="comment"></highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>m;</highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="comment"></highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Linear<sp/>interpolation<sp/>in<sp/>lin-log<sp/>space.</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>interpolate(double<sp/>x,<sp/>const<sp/>std::vector&lt;double&gt;<sp/>&amp;<sp/>xlist,</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::vector&lt;double&gt;<sp/>&amp;<sp/>ylist,<sp/>bool<sp/>zerobound)</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>x0,<sp/>x1,<sp/>y0,<sp/>y1;</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>i<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(zerobound)</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(x&lt;xlist.front())<sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(x&gt;xlist.back())<sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(x&lt;xlist.front())<sp/>return<sp/>ylist.front();</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(x&gt;xlist.back())<sp/>return<sp/>ylist.back();</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Find<sp/>min<sp/>i<sp/>such<sp/>that<sp/>xlist[i]&gt;=x.</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(;<sp/>xlist[i]<sp/>&lt;<sp/>x;<sp/>i++)<sp/>{};</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0<sp/>=<sp/>xlist[i-1];</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>xlist[i];</highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y0<sp/>=<sp/>ylist[i-1];</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>ylist[i];</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>lin-vs-log<sp/>interpolation<sp/>for<sp/>lnL<sp/>vs<sp/>flux</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>y0<sp/>+<sp/>(y1-y0)<sp/>*<sp/>log(x/x0)<sp/>/<sp/>log(x1/x0);</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="comment"></highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>get_J_factor_INTEGRAL_CO<sp/>(double<sp/>&amp;result)</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>Pipes::get_J_factor_INTEGRAL_CO;</highlight></codeline>
<codeline lineno="830"><highlight class="comment"></highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>GalacticHaloProperties<sp/>halo<sp/>=<sp/>*Dep::GalacticHalo;</highlight></codeline>
<codeline lineno="832"><highlight class="comment"></highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>daFunk::Funk<sp/>profile<sp/>=<sp/>halo.DensityProfile;</highlight></codeline>
<codeline lineno="834"><highlight class="comment"></highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>rho;</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>r<sp/>=<sp/>daFunk::logspace(-3,<sp/>2,<sp/>100);</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>r_sun<sp/>=<sp/>halo.r_sun;</highlight></codeline>
<codeline lineno="838"><highlight class="comment"></highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(<sp/>size_t<sp/>i<sp/>=<sp/>0;<sp/>i&lt;r.size();<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rho.push_back(profile-&gt;bind(&quot;r&quot;)-&gt;eval(r[i]));</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="comment"></highlight></codeline>
<codeline lineno="844"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>phi_pre;</highlight></codeline>
<codeline lineno="845"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>intensity;</highlight></codeline>
<codeline lineno="846"><highlight class="comment"></highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>BEreq::los_integral(byVal(r),<sp/>byVal(rho),<sp/>byVal(r_sun),<sp/>phi_pre,<sp/>intensity);</highlight></codeline>
<codeline lineno="848"><highlight class="comment"></highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>emission<sp/>=<sp/>std::pair&lt;<sp/>std::vector&lt;double&gt;,<sp/>std::vector&lt;double&gt;<sp/>&gt;<sp/>(phi_pre,<sp/>intensity);</highlight></codeline>
<codeline lineno="850"><highlight class="comment"></highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ASCIItableReader<sp/>ROI<sp/>=<sp/>ASCIItableReader(GAMBIT_DIR<sp/>&quot;/DarkBit/data/INTEGRAL/ROI_CO.txt&quot;);</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ROI.setcolnames({&quot;phi&quot;,<sp/>&quot;weight&quot;});</highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>phi<sp/>=<sp/>ROI[&quot;phi&quot;],<sp/>weight<sp/>=<sp/>ROI[&quot;weight&quot;];</highlight></codeline>
<codeline lineno="854"><highlight class="comment"></highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>J<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(<sp/>size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>phi.size();<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J<sp/>+=<sp/>interpolate(phi[i],<sp/>emission.first,<sp/>emission.second,<sp/>true)*weight[i]*3.0856775814913684e21;//<sp/>J<sp/>in<sp/>Gev/cm^2</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="comment"></highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>J;</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="863"><highlight class="comment"></highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>gsl<sp/>error<sp/>handler</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>handler<sp/>(const<sp/>char<sp/>*<sp/>reason,<sp/>const<sp/>char<sp/>*<sp/>file,<sp/>int<sp/>line,<sp/>int<sp/>gsl_errno)</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(gsl_errno<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="868"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>gsl_errno;</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{<sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;gsl:<sp/>&quot;<sp/>&lt;&lt;<sp/>file<sp/>&lt;&lt;<sp/>&quot;:&quot;<sp/>&lt;&lt;<sp/>line<sp/>&lt;&lt;<sp/>&quot;:<sp/>ERROR:<sp/>&quot;<sp/>&lt;&lt;<sp/>reason<sp/>&lt;&lt;<sp/>std::endl;<sp/>abort();<sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="comment"></highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>capability<sp/>function<sp/>to<sp/>compute<sp/>the<sp/>X-ray<sp/>log-likelihood<sp/>from<sp/>the<sp/>INTEGRAL<sp/>experiment</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>calc_lnL_INTEGRAL_CO(double<sp/>&amp;result)</highlight></codeline>
<codeline lineno="876"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>Pipes::calc_lnL_INTEGRAL_CO;</highlight></codeline>
<codeline lineno="878"><highlight class="comment"></highlight></codeline>
<codeline lineno="879"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tau<sp/>=<sp/>*Param[&quot;lifetime&quot;];</highlight></codeline>
<codeline lineno="880"><highlight class="comment"></highlight></codeline>
<codeline lineno="881"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>gamma_ph<sp/>=<sp/>1/tau<sp/>*<sp/>*Param[&quot;BR_ph&quot;];</highlight></codeline>
<codeline lineno="882"><highlight class="comment"></highlight></codeline>
<codeline lineno="883"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>mass<sp/>=<sp/>*Param[&quot;mass&quot;]*1e9;<sp/>//<sp/>mass<sp/>in<sp/>eV</highlight></codeline>
<codeline lineno="884"><highlight class="comment"></highlight></codeline>
<codeline lineno="885"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>fraction<sp/>=<sp/>*Param[&quot;fraction&quot;];</highlight></codeline>
<codeline lineno="886"><highlight class="comment"></highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>t0<sp/>=<sp/>*Dep::age_universe;</highlight></codeline>
<codeline lineno="888"><highlight class="comment"></highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>J_factor<sp/>=<sp/>*Dep::J_factor_INTEGRAL_CO*1e9;<sp/>//J<sp/>in<sp/>eV/cm^2</highlight></codeline>
<codeline lineno="890"><highlight class="comment"></highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>Xray<sp/>experiment<sp/>=<sp/>Xray(&quot;INTEGRAL&quot;,<sp/>J_factor);</highlight></codeline>
<codeline lineno="892"><highlight class="comment"></highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>XrayLikelihood_params<sp/>params<sp/>=<sp/>{mass,<sp/>tau,<sp/>gamma_ph,<sp/>fraction,<sp/>experiment,<sp/>0.,<sp/>daFunk::zero(&quot;z&quot;),<sp/>daFunk::zero(&quot;z&quot;),<sp/>t0};</highlight></codeline>
<codeline lineno="894"><highlight class="comment"></highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>Emin<sp/>=<sp/>experiment.getEmin(),<sp/>Emax<sp/>=<sp/>experiment.getEmax(),<sp/>E,<sp/>lik1,<sp/>lik2;</highlight></codeline>
<codeline lineno="896"><highlight class="comment"></highlight></codeline>
<codeline lineno="897"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>no<sp/>constraints<sp/>available<sp/>above<sp/>the<sp/>electron<sp/>threshold,<sp/>we<sp/>need<sp/>to<sp/>take<sp/>into<sp/>account<sp/>the<sp/>decay<sp/>into<sp/>charged<sp/>particles</highlight></codeline>
<codeline lineno="898"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(mass<sp/>&gt;=<sp/>1e6)<sp/>{<sp/>result<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="comment"></highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(mass<sp/>&gt;<sp/>2.*Emin)</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>modifies<sp/>the<sp/>gsl<sp/>error<sp/>handler<sp/>and<sp/>stores<sp/>the<sp/>default<sp/>one</highlight></codeline>
<codeline lineno="903"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gsl_error_handler_t<sp/>*old_handler<sp/>=<sp/>gsl_set_error_handler<sp/>(&amp;handler);</highlight></codeline>
<codeline lineno="904"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E<sp/>=<sp/>minimizeLogLikelihood(&amp;params);</highlight></codeline>
<codeline lineno="907"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>XrayLogLikelihood(E,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="908"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="909"><highlight class="comment"></highlight></codeline>
<codeline lineno="910"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catch<sp/>(int<sp/>gsl_errno)</highlight></codeline>
<codeline lineno="911"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lik1<sp/>=<sp/>XrayLogLikelihood(Emin+experiment.deltaE(Emin),<sp/>&amp;params);</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lik2<sp/>=<sp/>XrayLogLikelihood(fmin(mass/2.,<sp/>Emax-experiment.deltaE(Emax)),<sp/>&amp;params);</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>fmin(lik1,<sp/>lik2);</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>restores<sp/>the<sp/>default<sp/>gsl<sp/>error<sp/>handler</highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gsl_set_error_handler<sp/>(old_handler);</highlight></codeline>
<codeline lineno="918"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="comment"></highlight></codeline>
<codeline lineno="920"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{<sp/>result<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="comment"></highlight></codeline>
<codeline lineno="923"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>function<sp/>returning<sp/>the<sp/>decay<sp/>photon<sp/>flux<sp/>in<sp/>[photons/cm²/s]<sp/>(assuming<sp/>DM<sp/>decays<sp/>into<sp/>a<sp/>monochromatic<sp/>line)</highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>only<sp/>used<sp/>for<sp/>the<sp/>INTEGRAL_ang_b/l<sp/>likelihoods</highlight></codeline>
<codeline lineno="925"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>DecayFluxG<sp/>(double<sp/>gamma_ph,<sp/>double<sp/>fraction,<sp/>double<sp/>mass,<sp/>double<sp/>tau,<sp/>double<sp/>t0,<sp/>double<sp/>J_factor)</highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>2.*(gamma_ph*fraction*exp(-t0/tau))/(4.*pi*mass)*J_factor;</highlight></codeline>
<codeline lineno="928"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="comment"></highlight></codeline>
<codeline lineno="930"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>get_J_factor_INTEGRAL_ang_b<sp/>(std::vector&lt;double&gt;<sp/>&amp;result)</highlight></codeline>
<codeline lineno="931"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>Pipes::get_J_factor_INTEGRAL_ang_b;</highlight></codeline>
<codeline lineno="933"><highlight class="comment"></highlight></codeline>
<codeline lineno="934"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>GalacticHaloProperties<sp/>halo<sp/>=<sp/>*Dep::GalacticHalo;</highlight></codeline>
<codeline lineno="935"><highlight class="comment"></highlight></codeline>
<codeline lineno="936"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>daFunk::Funk<sp/>profile<sp/>=<sp/>halo.DensityProfile;</highlight></codeline>
<codeline lineno="937"><highlight class="comment"></highlight></codeline>
<codeline lineno="938"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>rho;</highlight></codeline>
<codeline lineno="939"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>r<sp/>=<sp/>daFunk::logspace(-3,<sp/>2,<sp/>100);</highlight></codeline>
<codeline lineno="940"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>r_sun<sp/>=<sp/>halo.r_sun;</highlight></codeline>
<codeline lineno="941"><highlight class="comment"></highlight></codeline>
<codeline lineno="942"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(<sp/>size_t<sp/>i<sp/>=<sp/>0;<sp/>i&lt;r.size();<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="943"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rho.push_back(profile-&gt;bind(&quot;r&quot;)-&gt;eval(r[i]));</highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="946"><highlight class="comment"></highlight></codeline>
<codeline lineno="947"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>phi_pre;</highlight></codeline>
<codeline lineno="948"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>intensity;</highlight></codeline>
<codeline lineno="949"><highlight class="comment"></highlight></codeline>
<codeline lineno="950"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>BEreq::los_integral(byVal(r),<sp/>byVal(rho),<sp/>byVal(r_sun),<sp/>phi_pre,<sp/>intensity);</highlight></codeline>
<codeline lineno="951"><highlight class="comment"></highlight></codeline>
<codeline lineno="952"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>emission<sp/>=<sp/>std::pair&lt;<sp/>std::vector&lt;double&gt;,<sp/>std::vector&lt;double&gt;<sp/>&gt;<sp/>(phi_pre,<sp/>intensity);</highlight></codeline>
<codeline lineno="953"><highlight class="comment"></highlight></codeline>
<codeline lineno="954"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ASCIItableReader<sp/>ROI_1<sp/>=<sp/>ASCIItableReader(GAMBIT_DIR<sp/>&quot;/DarkBit/data/INTEGRAL/ROI_ang_b_1.txt&quot;);</highlight></codeline>
<codeline lineno="955"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ASCIItableReader<sp/>ROI_2<sp/>=<sp/>ASCIItableReader(GAMBIT_DIR<sp/>&quot;/DarkBit/data/INTEGRAL/ROI_ang_b_2.txt&quot;);</highlight></codeline>
<codeline lineno="956"><highlight class="comment"></highlight></codeline>
<codeline lineno="957"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ROI_1.setcolnames({&quot;phi&quot;,<sp/>&quot;weight&quot;});</highlight></codeline>
<codeline lineno="958"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ROI_2.setcolnames({&quot;phi&quot;,<sp/>&quot;weight&quot;});</highlight></codeline>
<codeline lineno="959"><highlight class="comment"></highlight></codeline>
<codeline lineno="960"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>phi_1<sp/>=<sp/>ROI_1[&quot;phi&quot;],<sp/>weight_1<sp/>=<sp/>ROI_1[&quot;weight&quot;];</highlight></codeline>
<codeline lineno="961"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>phi_2<sp/>=<sp/>ROI_2[&quot;phi&quot;],<sp/>weight_2<sp/>=<sp/>ROI_2[&quot;weight&quot;];</highlight></codeline>
<codeline lineno="962"><highlight class="comment"></highlight></codeline>
<codeline lineno="963"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>J_1<sp/>=<sp/>0,<sp/>J_2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="964"><highlight class="comment"></highlight></codeline>
<codeline lineno="965"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(<sp/>size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>phi_1.size();<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="966"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J_1<sp/>+=<sp/>interpolate(phi_1[i],<sp/>emission.first,<sp/>emission.second,<sp/>true)*weight_1[i]*3.0856775814913684e21;<sp/>//<sp/>J<sp/>in<sp/>Gev/cm^2</highlight></codeline>
<codeline lineno="968"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="comment"></highlight></codeline>
<codeline lineno="970"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(<sp/>size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>phi_2.size();<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="971"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J_2<sp/>+=<sp/>interpolate(phi_2[i],<sp/>emission.first,<sp/>emission.second,<sp/>true)*weight_2[i]*3.0856775814913684e21;<sp/>//<sp/>J<sp/>in<sp/>Gev/cm^2</highlight></codeline>
<codeline lineno="973"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="comment"></highlight></codeline>
<codeline lineno="975"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>{J_1,<sp/>J_2};</highlight></codeline>
<codeline lineno="976"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="comment"></highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>calc_lnL_INTEGRAL_ang_b<sp/>(double<sp/>&amp;result)</highlight></codeline>
<codeline lineno="979"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>Pipes::calc_lnL_INTEGRAL_ang_b;</highlight></codeline>
<codeline lineno="981"><highlight class="comment"></highlight></codeline>
<codeline lineno="982"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tau<sp/>=<sp/>*Param[&quot;lifetime&quot;];</highlight></codeline>
<codeline lineno="983"><highlight class="comment"></highlight></codeline>
<codeline lineno="984"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>gamma_ph<sp/>=<sp/>1/tau<sp/>*<sp/>*Param[&quot;BR_ph&quot;];</highlight></codeline>
<codeline lineno="985"><highlight class="comment"></highlight></codeline>
<codeline lineno="986"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>mass<sp/>=<sp/>*Param[&quot;mass&quot;];<sp/>//<sp/>mass<sp/>in<sp/>GeV</highlight></codeline>
<codeline lineno="987"><highlight class="comment"></highlight></codeline>
<codeline lineno="988"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>mass_keV<sp/>=<sp/>mass*1e6;<sp/>//<sp/>mass<sp/>in<sp/>keV</highlight></codeline>
<codeline lineno="989"><highlight class="comment"></highlight></codeline>
<codeline lineno="990"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>fraction<sp/>=<sp/>*Param[&quot;fraction&quot;];</highlight></codeline>
<codeline lineno="991"><highlight class="comment"></highlight></codeline>
<codeline lineno="992"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>t0<sp/>=<sp/>*Dep::age_universe;<sp/>//<sp/>Age<sp/>of<sp/>the<sp/>Universe<sp/>in<sp/>seconds</highlight></codeline>
<codeline lineno="993"><highlight class="comment"></highlight></codeline>
<codeline lineno="994"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>J_factor<sp/>=<sp/>*Dep::J_factor_INTEGRAL_ang_b;</highlight></codeline>
<codeline lineno="995"><highlight class="comment"></highlight></codeline>
<codeline lineno="996"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>FluxG<sp/>=<sp/>DecayFluxG(gamma_ph,<sp/>fraction,<sp/>mass,<sp/>tau,<sp/>t0,<sp/>J_factor[0]);</highlight></codeline>
<codeline lineno="997"><highlight class="comment"></highlight></codeline>
<codeline lineno="998"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>ASCIItableReader<sp/>INTEGRAL<sp/>=<sp/>ASCIItableReader(GAMBIT_DIR<sp/>&quot;/DarkBit/data/INTEGRAL/INTEGRAL_b.dat&quot;);</highlight></codeline>
<codeline lineno="999"><highlight class="comment"></highlight></codeline>
<codeline lineno="1000"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>INTEGRAL.setcolnames({&quot;Emin&quot;,<sp/>&quot;Emax&quot;,<sp/>&quot;Flux&quot;,<sp/>&quot;Sigma&quot;});</highlight></codeline>
<codeline lineno="1001"><highlight class="comment"></highlight></codeline>
<codeline lineno="1002"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>std::vector&lt;double&gt;<sp/>Emin<sp/>=<sp/>INTEGRAL[&quot;Emin&quot;],<sp/>Emax<sp/>=<sp/>INTEGRAL[&quot;Emax&quot;],<sp/>Flux<sp/>=<sp/>INTEGRAL[&quot;Flux&quot;],<sp/>Sigma<sp/>=<sp/>INTEGRAL[&quot;Sigma&quot;];</highlight></codeline>
<codeline lineno="1003"><highlight class="comment"></highlight></codeline>
<codeline lineno="1004"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>Omega<sp/>=<sp/>{1.6119,<sp/>4.1858};</highlight></codeline>
<codeline lineno="1005"><highlight class="comment"></highlight></codeline>
<codeline lineno="1006"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>no<sp/>constraints<sp/>available<sp/>above<sp/>the<sp/>electron<sp/>threshold,<sp/>we<sp/>need<sp/>to<sp/>take<sp/>into<sp/>account<sp/>the<sp/>decay<sp/>into<sp/>charged<sp/>particles</highlight></codeline>
<codeline lineno="1007"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(mass_keV<sp/>&gt;=<sp/>1e3)<sp/>{<sp/>result<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1008"><highlight class="comment"></highlight></codeline>
<codeline lineno="1009"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(mass_keV<sp/>&lt;<sp/>2.**std::min_element(Emin.begin(),<sp/>Emin.end()))<sp/>{<sp/>result<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="comment"></highlight></codeline>
<codeline lineno="1011"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1012"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>loglik<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="1014"><highlight class="comment"></highlight></codeline>
<codeline lineno="1015"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>PredictedFlux,<sp/>ObservedFlux,<sp/>Error;</highlight></codeline>
<codeline lineno="1016"><highlight class="comment"></highlight></codeline>
<codeline lineno="1017"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Emin.size()-1;<sp/>++i)</highlight></codeline>
<codeline lineno="1018"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PredictedFlux<sp/>=<sp/>(<sp/>(mass_keV<sp/>&gt;=<sp/>2*Emin[i])<sp/>&amp;&amp;<sp/>(mass_keV<sp/>&lt;<sp/>2*Emax[i])<sp/>)<sp/>?<sp/>FluxG/Omega[0]<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1020"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ObservedFlux<sp/>=<sp/>Flux[i];</highlight></codeline>
<codeline lineno="1021"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>Sigma[i];</highlight></codeline>
<codeline lineno="1022"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loglik<sp/>+=<sp/>(PredictedFlux<sp/>&lt;<sp/>ObservedFlux)<sp/>?<sp/>0<sp/>:<sp/>-pow(ObservedFlux<sp/>-<sp/>PredictedFlux,<sp/>2)/(2.*pow(Error,<sp/>2));</highlight></codeline>
<codeline lineno="1023"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="comment"></highlight></codeline>
<codeline lineno="1025"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>loglik;</highlight></codeline>
<codeline lineno="1026"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1028"><highlight class="comment"></highlight></codeline>
<codeline lineno="1029"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>get_J_factor_INTEGRAL_ang_l<sp/>(std::vector&lt;double&gt;<sp/>&amp;result)</highlight></codeline>
<codeline lineno="1030"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>Pipes::get_J_factor_INTEGRAL_ang_l;</highlight></codeline>
<codeline lineno="1032"><highlight class="comment"></highlight></codeline>
<codeline lineno="1033"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>GalacticHaloProperties<sp/>halo<sp/>=<sp/>*Dep::GalacticHalo;</highlight></codeline>
<codeline lineno="1034"><highlight class="comment"></highlight></codeline>
<codeline lineno="1035"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>daFunk::Funk<sp/>profile<sp/>=<sp/>halo.DensityProfile;</highlight></codeline>
<codeline lineno="1036"><highlight class="comment"></highlight></codeline>
<codeline lineno="1037"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>rho;</highlight></codeline>
<codeline lineno="1038"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>r<sp/>=<sp/>daFunk::logspace(-3,<sp/>2,<sp/>100);</highlight></codeline>
<codeline lineno="1039"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>r_sun<sp/>=<sp/>halo.r_sun;</highlight></codeline>
<codeline lineno="1040"><highlight class="comment"></highlight></codeline>
<codeline lineno="1041"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(<sp/>size_t<sp/>i<sp/>=<sp/>0;<sp/>i&lt;r.size();<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="1042"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rho.push_back(profile-&gt;bind(&quot;r&quot;)-&gt;eval(r[i]));</highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="comment"></highlight></codeline>
<codeline lineno="1046"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>phi_pre;</highlight></codeline>
<codeline lineno="1047"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>intensity;</highlight></codeline>
<codeline lineno="1048"><highlight class="comment"></highlight></codeline>
<codeline lineno="1049"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>BEreq::los_integral(byVal(r),<sp/>byVal(rho),<sp/>byVal(r_sun),<sp/>phi_pre,<sp/>intensity);</highlight></codeline>
<codeline lineno="1050"><highlight class="comment"></highlight></codeline>
<codeline lineno="1051"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>emission<sp/>=<sp/>std::pair&lt;<sp/>std::vector&lt;double&gt;,<sp/>std::vector&lt;double&gt;<sp/>&gt;<sp/>(phi_pre,<sp/>intensity);</highlight></codeline>
<codeline lineno="1052"><highlight class="comment"></highlight></codeline>
<codeline lineno="1053"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ASCIItableReader<sp/>ROI_1<sp/>=<sp/>ASCIItableReader(GAMBIT_DIR<sp/>&quot;/DarkBit/data/INTEGRAL/ROI_ang_l_1.txt&quot;);</highlight></codeline>
<codeline lineno="1054"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ASCIItableReader<sp/>ROI_2<sp/>=<sp/>ASCIItableReader(GAMBIT_DIR<sp/>&quot;/DarkBit/data/INTEGRAL/ROI_ang_l_2.txt&quot;);</highlight></codeline>
<codeline lineno="1055"><highlight class="comment"></highlight></codeline>
<codeline lineno="1056"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ROI_1.setcolnames({&quot;phi&quot;,<sp/>&quot;weight&quot;});</highlight></codeline>
<codeline lineno="1057"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ROI_2.setcolnames({&quot;phi&quot;,<sp/>&quot;weight&quot;});</highlight></codeline>
<codeline lineno="1058"><highlight class="comment"></highlight></codeline>
<codeline lineno="1059"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>phi_1<sp/>=<sp/>ROI_1[&quot;phi&quot;],<sp/>weight_1<sp/>=<sp/>ROI_1[&quot;weight&quot;];</highlight></codeline>
<codeline lineno="1060"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>phi_2<sp/>=<sp/>ROI_2[&quot;phi&quot;],<sp/>weight_2<sp/>=<sp/>ROI_2[&quot;weight&quot;];</highlight></codeline>
<codeline lineno="1061"><highlight class="comment"></highlight></codeline>
<codeline lineno="1062"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>J_1<sp/>=<sp/>0,<sp/>J_2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1063"><highlight class="comment"></highlight></codeline>
<codeline lineno="1064"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(<sp/>size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>phi_1.size();<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="1065"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J_1<sp/>+=<sp/>interpolate(phi_1[i],<sp/>emission.first,<sp/>emission.second,<sp/>true)*weight_1[i]*3.0856775814913684e21;<sp/>//<sp/>J<sp/>in<sp/>Gev/cm^2</highlight></codeline>
<codeline lineno="1067"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="comment"></highlight></codeline>
<codeline lineno="1069"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(<sp/>size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>phi_2.size();<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="1070"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J_2<sp/>+=<sp/>interpolate(phi_2[i],<sp/>emission.first,<sp/>emission.second,<sp/>true)*weight_2[i]*3.0856775814913684e21;<sp/>//<sp/>J<sp/>in<sp/>Gev/cm^2</highlight></codeline>
<codeline lineno="1072"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="comment"></highlight></codeline>
<codeline lineno="1074"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>{J_1,<sp/>J_2};</highlight></codeline>
<codeline lineno="1075"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="comment"></highlight></codeline>
<codeline lineno="1077"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>calc_lnL_INTEGRAL_ang_l<sp/>(double<sp/>&amp;result)</highlight></codeline>
<codeline lineno="1078"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>Pipes::calc_lnL_INTEGRAL_ang_l;</highlight></codeline>
<codeline lineno="1080"><highlight class="comment"></highlight></codeline>
<codeline lineno="1081"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tau<sp/>=<sp/>*Param[&quot;lifetime&quot;];</highlight></codeline>
<codeline lineno="1082"><highlight class="comment"></highlight></codeline>
<codeline lineno="1083"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>gamma_ph<sp/>=<sp/>1/tau<sp/>*<sp/>*Param[&quot;BR_ph&quot;];</highlight></codeline>
<codeline lineno="1084"><highlight class="comment"></highlight></codeline>
<codeline lineno="1085"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>mass<sp/>=<sp/>*Param[&quot;mass&quot;];<sp/>//<sp/>mass<sp/>in<sp/>GeV</highlight></codeline>
<codeline lineno="1086"><highlight class="comment"></highlight></codeline>
<codeline lineno="1087"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>mass_keV<sp/>=<sp/>mass*1e6;<sp/>//<sp/>mass<sp/>in<sp/>keV</highlight></codeline>
<codeline lineno="1088"><highlight class="comment"></highlight></codeline>
<codeline lineno="1089"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>fraction<sp/>=<sp/>*Param[&quot;fraction&quot;];</highlight></codeline>
<codeline lineno="1090"><highlight class="comment"></highlight></codeline>
<codeline lineno="1091"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>t0<sp/>=<sp/>*Dep::age_universe;<sp/>//<sp/>Age<sp/>of<sp/>the<sp/>Universe<sp/>in<sp/>seconds</highlight></codeline>
<codeline lineno="1092"><highlight class="comment"></highlight></codeline>
<codeline lineno="1093"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>J_factor<sp/>=<sp/>*Dep::J_factor_INTEGRAL_ang_l;</highlight></codeline>
<codeline lineno="1094"><highlight class="comment"></highlight></codeline>
<codeline lineno="1095"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>FluxG<sp/>=<sp/>DecayFluxG(gamma_ph,<sp/>fraction,<sp/>mass,<sp/>tau,<sp/>t0,<sp/>J_factor[0]);</highlight></codeline>
<codeline lineno="1096"><highlight class="comment"></highlight></codeline>
<codeline lineno="1097"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>ASCIItableReader<sp/>INTEGRAL<sp/>=<sp/>ASCIItableReader(GAMBIT_DIR<sp/>&quot;/DarkBit/data/INTEGRAL/INTEGRAL_l.dat&quot;);</highlight></codeline>
<codeline lineno="1098"><highlight class="comment"></highlight></codeline>
<codeline lineno="1099"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>INTEGRAL.setcolnames({&quot;Emin&quot;,<sp/>&quot;Emax&quot;,<sp/>&quot;Flux&quot;,<sp/>&quot;Sigma&quot;});</highlight></codeline>
<codeline lineno="1100"><highlight class="comment"></highlight></codeline>
<codeline lineno="1101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>std::vector&lt;double&gt;<sp/>Emin<sp/>=<sp/>INTEGRAL[&quot;Emin&quot;],<sp/>Emax<sp/>=<sp/>INTEGRAL[&quot;Emax&quot;],<sp/>Flux<sp/>=<sp/>INTEGRAL[&quot;Flux&quot;],<sp/>Sigma<sp/>=<sp/>INTEGRAL[&quot;Sigma&quot;];</highlight></codeline>
<codeline lineno="1102"><highlight class="comment"></highlight></codeline>
<codeline lineno="1103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>Omega<sp/>=<sp/>{1.4224,<sp/>1.7919};</highlight></codeline>
<codeline lineno="1104"><highlight class="comment"></highlight></codeline>
<codeline lineno="1105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>no<sp/>constraints<sp/>available<sp/>above<sp/>the<sp/>electron<sp/>threshold,<sp/>we<sp/>need<sp/>to<sp/>take<sp/>into<sp/>account<sp/>the<sp/>decay<sp/>into<sp/>charged<sp/>particles</highlight></codeline>
<codeline lineno="1106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(mass_keV<sp/>&gt;=<sp/>1e3)<sp/>{<sp/>result<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1107"><highlight class="comment"></highlight></codeline>
<codeline lineno="1108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(mass_keV<sp/>&lt;<sp/>2.**std::min_element(Emin.begin(),<sp/>Emin.end()))<sp/>{<sp/>result<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="comment"></highlight></codeline>
<codeline lineno="1110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>loglik<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="1113"><highlight class="comment"></highlight></codeline>
<codeline lineno="1114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>PredictedFlux,<sp/>ObservedFlux,<sp/>Error;</highlight></codeline>
<codeline lineno="1115"><highlight class="comment"></highlight></codeline>
<codeline lineno="1116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Emin.size()-1;<sp/>++i)</highlight></codeline>
<codeline lineno="1117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PredictedFlux<sp/>=<sp/>(<sp/>(mass_keV<sp/>&gt;=<sp/>2*Emin[i])<sp/>&amp;&amp;<sp/>(mass_keV<sp/>&lt;<sp/>2*Emax[i])<sp/>)<sp/>?<sp/>FluxG/Omega[0]<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ObservedFlux<sp/>=<sp/>Flux[i];</highlight></codeline>
<codeline lineno="1120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>Sigma[i];</highlight></codeline>
<codeline lineno="1121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loglik<sp/>+=<sp/>(PredictedFlux<sp/>&lt;<sp/>ObservedFlux)<sp/>?<sp/>0<sp/>:<sp/>-pow(ObservedFlux<sp/>-<sp/>PredictedFlux,<sp/>2)/(2.*pow(Error,<sp/>2));</highlight></codeline>
<codeline lineno="1122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="comment"></highlight></codeline>
<codeline lineno="1124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>loglik;</highlight></codeline>
<codeline lineno="1125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1126"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="comment"></highlight></codeline>
<codeline lineno="1128"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>for<sp/>some<sp/>reason<sp/>this<sp/>is<sp/>not<sp/>giving<sp/>the<sp/>correct<sp/>value<sp/>of<sp/>J,<sp/>need<sp/>to<sp/>fix<sp/>it!</highlight></codeline>
<codeline lineno="1129"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>get_J_factor_HEAO<sp/>(double<sp/>&amp;result)</highlight></codeline>
<codeline lineno="1130"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>Pipes::get_J_factor_HEAO;</highlight></codeline>
<codeline lineno="1132"><highlight class="comment"></highlight></codeline>
<codeline lineno="1133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>GalacticHaloProperties<sp/>halo<sp/>=<sp/>*Dep::GalacticHalo;</highlight></codeline>
<codeline lineno="1134"><highlight class="comment"></highlight></codeline>
<codeline lineno="1135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>daFunk::Funk<sp/>profile<sp/>=<sp/>halo.DensityProfile;</highlight></codeline>
<codeline lineno="1136"><highlight class="comment"></highlight></codeline>
<codeline lineno="1137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>rho;</highlight></codeline>
<codeline lineno="1138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>r<sp/>=<sp/>daFunk::logspace(-3,<sp/>2,<sp/>100);</highlight></codeline>
<codeline lineno="1139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>r_sun<sp/>=<sp/>halo.r_sun;</highlight></codeline>
<codeline lineno="1140"><highlight class="comment"></highlight></codeline>
<codeline lineno="1141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(<sp/>size_t<sp/>i<sp/>=<sp/>0;<sp/>i&lt;r.size();<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="1142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rho.push_back(profile-&gt;bind(&quot;r&quot;)-&gt;eval(r[i]));</highlight></codeline>
<codeline lineno="1144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>rho.push_back(pow(profile-&gt;bind(&quot;r&quot;)-&gt;eval(r[i]),<sp/>2));</highlight></codeline>
<codeline lineno="1145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="comment"></highlight></codeline>
<codeline lineno="1147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>phi_pre;</highlight></codeline>
<codeline lineno="1148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>intensity;</highlight></codeline>
<codeline lineno="1149"><highlight class="comment"></highlight></codeline>
<codeline lineno="1150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>BEreq::los_integral(byVal(r),<sp/>byVal(rho),<sp/>byVal(r_sun),<sp/>phi_pre,<sp/>intensity);</highlight></codeline>
<codeline lineno="1151"><highlight class="comment"></highlight></codeline>
<codeline lineno="1152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>emission<sp/>=<sp/>std::pair&lt;<sp/>std::vector&lt;double&gt;,<sp/>std::vector&lt;double&gt;<sp/>&gt;<sp/>(phi_pre,<sp/>intensity);</highlight></codeline>
<codeline lineno="1153"><highlight class="comment"></highlight></codeline>
<codeline lineno="1154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ASCIItableReader<sp/>ROI<sp/>=<sp/>ASCIItableReader(GAMBIT_DIR<sp/>&quot;/DarkBit/data/HEAO/ROI.txt&quot;);</highlight></codeline>
<codeline lineno="1155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ROI.setcolnames({&quot;phi&quot;,<sp/>&quot;weight&quot;});</highlight></codeline>
<codeline lineno="1156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>phi<sp/>=<sp/>ROI[&quot;phi&quot;],<sp/>weight<sp/>=<sp/>ROI[&quot;weight&quot;];</highlight></codeline>
<codeline lineno="1157"><highlight class="comment"></highlight></codeline>
<codeline lineno="1158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>J<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(<sp/>size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>phi.size();<sp/>i++<sp/>)</highlight></codeline>
<codeline lineno="1160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J<sp/>+=<sp/>interpolate(phi[i],<sp/>emission.first,<sp/>emission.second,<sp/>true)*weight[i]*3.0856775814913684e21;//<sp/>J<sp/>in<sp/>Gev/cm^2</highlight></codeline>
<codeline lineno="1162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1163"><highlight class="comment"></highlight></codeline>
<codeline lineno="1164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>J;</highlight></codeline>
<codeline lineno="1165"><highlight class="comment"></highlight></codeline>
<codeline lineno="1166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;J<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>result/r_sun/rho_sun<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1167"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="comment"></highlight></codeline>
<codeline lineno="1169"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>calc_lnL_HEAO(double<sp/>&amp;result)</highlight></codeline>
<codeline lineno="1170"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>Pipes::calc_lnL_HEAO;</highlight></codeline>
<codeline lineno="1172"><highlight class="comment"></highlight></codeline>
<codeline lineno="1173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>OmegaDM<sp/>=<sp/>*Dep::Omega0_cdm;</highlight></codeline>
<codeline lineno="1174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>daFunk::Funk<sp/>H_z<sp/>=<sp/>*Dep::H_at_z;</highlight></codeline>
<codeline lineno="1176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>daFunk::Funk<sp/>t_z<sp/>=<sp/>*Dep::time_at_z;</highlight></codeline>
<codeline lineno="1177"><highlight class="comment"></highlight></codeline>
<codeline lineno="1178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tau<sp/>=<sp/>*Param[&quot;lifetime&quot;];</highlight></codeline>
<codeline lineno="1179"><highlight class="comment"></highlight></codeline>
<codeline lineno="1180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>gamma_ph<sp/>=<sp/>1/tau<sp/>*<sp/>*Param[&quot;BR_ph&quot;];</highlight></codeline>
<codeline lineno="1181"><highlight class="comment"></highlight></codeline>
<codeline lineno="1182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>mass<sp/>=<sp/>*Param[&quot;mass&quot;]*1e9;<sp/>//<sp/>mass<sp/>in<sp/>eV</highlight></codeline>
<codeline lineno="1183"><highlight class="comment"></highlight></codeline>
<codeline lineno="1184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>fraction<sp/>=<sp/>*Param[&quot;fraction&quot;];</highlight></codeline>
<codeline lineno="1185"><highlight class="comment"></highlight></codeline>
<codeline lineno="1186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>t0<sp/>=<sp/>*Dep::age_universe;</highlight></codeline>
<codeline lineno="1187"><highlight class="comment"></highlight></codeline>
<codeline lineno="1188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>Xray<sp/>experiment<sp/>=<sp/>Xray(&quot;HEAO&quot;,<sp/>9.894*1e9*3.0856775814913684e21);<sp/>//<sp/>J<sp/>in<sp/>ev<sp/>/<sp/>cm^2</highlight></codeline>
<codeline lineno="1189"><highlight class="comment"></highlight></codeline>
<codeline lineno="1190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>XrayLikelihood_params<sp/>params<sp/>=<sp/>{mass,<sp/>tau,<sp/>gamma_ph,<sp/>fraction,<sp/>experiment,<sp/>OmegaDM,<sp/>H_z,<sp/>t_z,<sp/>t0};</highlight></codeline>
<codeline lineno="1191"><highlight class="comment"></highlight></codeline>
<codeline lineno="1192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>double<sp/>Emin<sp/>=<sp/>experiment.getEmin(),<sp/>Emax<sp/>=<sp/>experiment.getEmax();</highlight></codeline>
<codeline lineno="1193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>E,<sp/>lik1,<sp/>lik2;</highlight></codeline>
<codeline lineno="1194"><highlight class="comment"></highlight></codeline>
<codeline lineno="1195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>no<sp/>constraints<sp/>available<sp/>above<sp/>the<sp/>electron<sp/>threshold,<sp/>we<sp/>need<sp/>to<sp/>take<sp/>into<sp/>account<sp/>the<sp/>decay<sp/>into<sp/>charged<sp/>particles</highlight></codeline>
<codeline lineno="1196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(mass<sp/>&gt;=<sp/>1e6)<sp/>{<sp/>result<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1197"><highlight class="comment"></highlight></codeline>
<codeline lineno="1198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(mass<sp/>&gt;<sp/>2.*Emin)</highlight></codeline>
<codeline lineno="1199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>modifies<sp/>the<sp/>gsl<sp/>error<sp/>handler<sp/>and<sp/>stores<sp/>the<sp/>default<sp/>one</highlight></codeline>
<codeline lineno="1201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gsl_error_handler_t<sp/>*old_handler<sp/>=<sp/>gsl_set_error_handler<sp/>(&amp;handler);</highlight></codeline>
<codeline lineno="1202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try</highlight></codeline>
<codeline lineno="1203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E<sp/>=<sp/>minimizeLogLikelihood(&amp;params);</highlight></codeline>
<codeline lineno="1205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>XrayLogLikelihood(E,<sp/>&amp;params);</highlight></codeline>
<codeline lineno="1206"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1207"><highlight class="comment"></highlight></codeline>
<codeline lineno="1208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catch<sp/>(int<sp/>gsl_errno)</highlight></codeline>
<codeline lineno="1209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lik1<sp/>=<sp/>XrayLogLikelihood(Emin+experiment.deltaE(Emin),<sp/>&amp;params);</highlight></codeline>
<codeline lineno="1211"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lik2<sp/>=<sp/>XrayLogLikelihood(fmin(mass/2.,<sp/>Emax-experiment.deltaE(Emax)),<sp/>&amp;params);</highlight></codeline>
<codeline lineno="1212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>fmin(lik1,<sp/>lik2);</highlight></codeline>
<codeline lineno="1213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>restores<sp/>the<sp/>default<sp/>gsl<sp/>error<sp/>handler</highlight></codeline>
<codeline lineno="1215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gsl_set_error_handler<sp/>(old_handler);</highlight></codeline>
<codeline lineno="1216"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="comment"></highlight></codeline>
<codeline lineno="1218"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{<sp/>result<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1219"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1220"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="comment">}</highlight></codeline>
<codeline lineno="1222"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/DarkBit/src/Xray.cpp"/>
  </compounddef>
</doxygen>
