<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="SPheno__4__0__3_8cpp" kind="file" language="C++">
    <compoundname>SPheno_4_0_3.cpp</compoundname>
    <includes refid="frontend__macros_8hpp" local="yes">gambit/Backends/frontend_macros.hpp</includes>
    <includes refid="SPheno__4__0__3_8hpp" local="yes">gambit/Backends/frontends/SPheno_4_0_3.hpp</includes>
    <includes local="yes">gambit/Elements/spectrum_factories.hpp</includes>
    <includes local="yes">gambit/Models/SimpleSpectra/MSSMSimpleSpec.hpp</includes>
    <includes local="yes">gambit/Utils/slhaea_helpers.hpp</includes>
    <includes local="yes">gambit/Utils/version.hpp</includes>
    <includes local="yes">gambit/Utils/util_functions.hpp</includes>
    <incdepgraph>
      <node id="22">
        <label>gambit/Backends/backend_info.hpp</label>
        <link refid="backend__info_8hpp"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>gambit/Backends/common_macros.hpp</label>
        <link refid="common__macros_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>boost/preprocessor/seq/transform.hpp</label>
      </node>
      <node id="15">
        <label>gambit/Backends/mathematica_macros.hpp</label>
        <link refid="mathematica__macros_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>boost/preprocessor/tuple/to_seq.hpp</label>
      </node>
      <node id="6">
        <label>gambit/Elements/types_rollcall.hpp</label>
      </node>
      <node id="31">
        <label>gambit/Backends/python_variable.hpp</label>
        <link refid="python__variable_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>boost/preprocessor/tuple/elem.hpp</label>
      </node>
      <node id="13">
        <label>gambit/Backends/interoperability.hpp</label>
        <link refid="interoperability_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>gambit/Backends/python_macros.hpp</label>
        <link refid="python__macros_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>map</label>
      </node>
      <node id="5">
        <label>gambit/Utils/standalone_error_handlers.hpp</label>
      </node>
      <node id="21">
        <label>gambit/Backends/backend_singleton.hpp</label>
        <link refid="backend__singleton_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>gambit/Utils/util_functions.hpp</label>
      </node>
      <node id="19">
        <label>gambit/Elements/ini_catch.hpp</label>
      </node>
      <node id="34">
        <label>gambit/Elements/spectrum_factories.hpp</label>
      </node>
      <node id="32">
        <label>gambit/Backends/frontends/SPheno_4_0_3.hpp</label>
        <link refid="SPheno__4__0__3_8hpp"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>yaml-cpp/yaml.h</label>
      </node>
      <node id="27">
        <label>gambit/Backends/mathematica_variable.hpp</label>
        <link refid="mathematica__variable_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>gambit/Utils/slhaea_helpers.hpp</label>
      </node>
      <node id="1">
        <label>SPheno_4_0_3.cpp</label>
        <link refid="SPheno__4__0__3_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>gambit/Backends/interoperability_macros.hpp</label>
        <link refid="interoperability__macros_8hpp"/>
      </node>
      <node id="2">
        <label>gambit/Backends/frontend_macros.hpp</label>
        <link refid="frontend__macros_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>gambit/Models/SimpleSpectra/MSSMSimpleSpec.hpp</label>
      </node>
      <node id="7">
        <label>boost/preprocessor/control/iif.hpp</label>
      </node>
      <node id="16">
        <label>gambit/cmake/cmake_variables.hpp</label>
      </node>
      <node id="33">
        <label>gambit/Backends/backend_undefs.hpp</label>
        <link refid="include_2gambit_2Backends_2backend__undefs_8hpp"/>
      </node>
      <node id="17">
        <label>gambit/Utils/util_macros.hpp</label>
      </node>
      <node id="37">
        <label>gambit/Utils/version.hpp</label>
      </node>
      <node id="24">
        <label>gambit/Utils/util_types.hpp</label>
      </node>
      <node id="10">
        <label>boost/preprocessor/seq/for_each_i.hpp</label>
      </node>
      <node id="18">
        <label>gambit/Backends/mathematica_function.hpp</label>
        <link refid="mathematica__function_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>gambit/Elements/module_macros_inmodule.hpp</label>
      </node>
      <node id="30">
        <label>gambit/Backends/python_helpers.hpp</label>
        <link refid="python__helpers_8hpp"/>
      </node>
      <node id="26">
        <label>boost/algorithm/string/replace.hpp</label>
      </node>
      <node id="29">
        <label>gambit/Backends/python_function.hpp</label>
        <link refid="python__function_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>boost/preprocessor/seq/for_each.hpp</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Frontend for SPheno 4.3.0 backend (out of the box version)</para>
<para><hruler/>
</para>
<para>Authors (add name and date if you modify):</para>
<para><simplesect kind="author"><para>Tomas Gonzalo (<ulink url="mailto:tomas.gonzalo@monash.edu">tomas.gonzalo@monash.edu</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2020 Apr</para>
</simplesect>
<hruler/>
 </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/>GAMBIT:<sp/>Global<sp/>and<sp/>Modular<sp/>BSM<sp/>Inference<sp/>Tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="frontend__macros_8hpp" kindref="compound">gambit/Backends/frontend_macros.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="SPheno__4__0__3_8hpp" kindref="compound">gambit/Backends/frontends/SPheno_4_0_3.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/Elements/spectrum_factories.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/Models/SimpleSpectra/MSSMSimpleSpec.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/Utils/slhaea_helpers.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/Utils/version.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/Utils/util_functions.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Callback<sp/>function<sp/>for<sp/>error<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="common__macros_8hpp_1a4d46c8276b5c657141ff960c177bfe5a" kindref="member">BE_NAMESPACE</ref></highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>will<sp/>be<sp/>called<sp/>from<sp/>SPheno.<sp/>Needs<sp/>C<sp/>linkage,<sp/>and<sp/>thus<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>backend-specific<sp/>name<sp/>to<sp/>guard<sp/>against<sp/>name<sp/>clashes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CAT_4(BACKENDNAME,_,SAFE_VERSION,_ErrorHandler)()</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;SPheno<sp/>backend<sp/>called<sp/>TerminateProgram.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="common__macros_8hpp_1ab9f05bcb458a039e9c1d4060dc04639c" kindref="member">END_BE_NAMESPACE</ref></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Convenience<sp/>functions<sp/>(definition)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><ref refid="common__macros_8hpp_1a4d46c8276b5c657141ff960c177bfe5a" kindref="member">BE_NAMESPACE</ref></highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convenience<sp/>function<sp/>to<sp/>run<sp/>SPheno<sp/>and<sp/>obtain<sp/>the<sp/>spectrum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>run_SPheno(Spectrum<sp/>&amp;spectrum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Finputs<sp/>&amp;inputs)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{<sp/>Set_All_Parameters_0();<sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::runtime_error&amp;<sp/>e)<sp/>{<sp/>invalid_point().raise(e.what());<sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>ReadingData(inputs);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>*epsI<sp/>=<sp/>1.0E-5;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>*deltaM<sp/>=<sp/>1.0E-3;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>*CalcTBD<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>*ratioWoM<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{<sp/>SPheno_Main();<sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::runtime_error&amp;<sp/>e)<sp/>{<sp/>invalid_point().raise(e.what());<sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*kont<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorHandling(*kont);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>spectrum<sp/>=<sp/>Spectrum_Out(inputs);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*kont;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convenience<sp/>function<sp/>to<sp/>convert<sp/>internal<sp/>SPheno<sp/>variables<sp/>into<sp/>a<sp/>Spectrum<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>Spectrum<sp/>Spectrum_Out(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Finputs<sp/>&amp;inputs)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAstruct<sp/>slha;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>Freal8<sp/>Q;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{<sp/>Q<sp/>=<sp/>sqrt(GetRenormalizationScale());<sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::runtime_error&amp;<sp/>e)<sp/>{<sp/>invalid_point().raise(e.what());<sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Chi<sp/>masses<sp/>are<sp/>not<sp/>rotated,<sp/>I<sp/>think.<sp/>Check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Spectrum<sp/>generator<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;SPINFO&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add(slha,<sp/></highlight><highlight class="stringliteral">&quot;SPINFO&quot;</highlight><highlight class="normal">,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;GAMBIT,<sp/>using<sp/>&quot;</highlight><highlight class="normal">+str(STRINGIFY(BACKENDNAME)));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add(slha,<sp/></highlight><highlight class="stringliteral">&quot;SPINFO&quot;</highlight><highlight class="normal">,<sp/>2,<sp/>gambit_version()+</highlight><highlight class="stringliteral">&quot;<sp/>(GAMBIT);<sp/>&quot;</highlight><highlight class="normal">+str(STRINGIFY(VERSION))+</highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal">+str(STRINGIFY(BACKENDNAME))+</highlight><highlight class="stringliteral">&quot;);&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Block<sp/>MODSEL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;Qin&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>SUSY<sp/>scale<sp/>input&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>GUT<sp/>scale<sp/>input&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>5<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Switching<sp/>on<sp/>CP<sp/>violations&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*GenerationMixing)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>6<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>switching<sp/>on<sp/>flavour<sp/>violation&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;Qin&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>12<sp/>&lt;&lt;<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;Qin&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Qin&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Block<sp/>MINPAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;M0&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;M0&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;M12&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2<sp/>&lt;&lt;<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;M12&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m12&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;TanBeta&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>3<sp/>&lt;&lt;<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;TanBeta&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>tanb<sp/>at<sp/>MZ&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;SignMu&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>4<sp/>&lt;&lt;<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;SignMu&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>sign(mu)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;A0&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>5<sp/>&lt;&lt;<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;A0&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>A0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Block<sp/>EXTPAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;Qin&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>0<sp/>&lt;&lt;<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;Qin&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>scale<sp/>Q<sp/>where<sp/>the<sp/>parameters<sp/>below<sp/>are<sp/>defined&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;M1&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;M1&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;M2&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2<sp/>&lt;&lt;<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;M2&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;M3&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>3<sp/>&lt;&lt;<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;M3&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_3&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;Au_33&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>11<sp/>&lt;&lt;<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;Au_33&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>A_t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;Ad_33&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>12<sp/>&lt;&lt;<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;Ad_33&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>A_b&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;Ae_33&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>13<sp/>&lt;&lt;<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;Ae_33&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>A_l&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;mHd2&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>21<sp/>&lt;&lt;<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;mHd2&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_Hd^2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;mHu2&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>22<sp/>&lt;&lt;<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;mHd2&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_Hu^2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;mu&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>23<sp/>&lt;&lt;<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;mu&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>mu&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;mA&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>24<sp/>&lt;&lt;<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(*inputs.param.at(</highlight><highlight class="stringliteral">&quot;mA&quot;</highlight><highlight class="normal">),2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>mA&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;ml2_11&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>31<sp/>&lt;&lt;<sp/>sqrt(*inputs.param.at(</highlight><highlight class="stringliteral">&quot;ml2_11&quot;</highlight><highlight class="normal">))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(L,11)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;ml2_22&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>32<sp/>&lt;&lt;<sp/>sqrt(*inputs.param.at(</highlight><highlight class="stringliteral">&quot;ml2_22&quot;</highlight><highlight class="normal">))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(L,22)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;ml2_33&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>33<sp/>&lt;&lt;<sp/>sqrt(*inputs.param.at(</highlight><highlight class="stringliteral">&quot;ml2_33&quot;</highlight><highlight class="normal">))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(L,33)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;me2_11&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>34<sp/>&lt;&lt;<sp/>sqrt(*inputs.param.at(</highlight><highlight class="stringliteral">&quot;me2_11&quot;</highlight><highlight class="normal">))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(E,11)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;me2_22&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>35<sp/>&lt;&lt;<sp/>sqrt(*inputs.param.at(</highlight><highlight class="stringliteral">&quot;me2_22&quot;</highlight><highlight class="normal">))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(E,22)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;me2_33&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>36<sp/>&lt;&lt;<sp/>sqrt(*inputs.param.at(</highlight><highlight class="stringliteral">&quot;me2_33&quot;</highlight><highlight class="normal">))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(E,33)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;mq2_11&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>41<sp/>&lt;&lt;<sp/>sqrt(*inputs.param.at(</highlight><highlight class="stringliteral">&quot;mq2_11&quot;</highlight><highlight class="normal">))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(Q,11)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;mq2_22&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>42<sp/>&lt;&lt;<sp/>sqrt(*inputs.param.at(</highlight><highlight class="stringliteral">&quot;mq2_22&quot;</highlight><highlight class="normal">))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(Q,22)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;mq2_33&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>43<sp/>&lt;&lt;<sp/>sqrt(*inputs.param.at(</highlight><highlight class="stringliteral">&quot;mq2_33&quot;</highlight><highlight class="normal">))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(Q,33)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;mu2_11&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>44<sp/>&lt;&lt;<sp/>sqrt(*inputs.param.at(</highlight><highlight class="stringliteral">&quot;mu2_11&quot;</highlight><highlight class="normal">))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(U,11)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;mu2_22&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>45<sp/>&lt;&lt;<sp/>sqrt(*inputs.param.at(</highlight><highlight class="stringliteral">&quot;mu2_22&quot;</highlight><highlight class="normal">))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(U,22)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;mu2_33&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>46<sp/>&lt;&lt;<sp/>sqrt(*inputs.param.at(</highlight><highlight class="stringliteral">&quot;mu2_33&quot;</highlight><highlight class="normal">))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(U,33)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;md2_11&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>47<sp/>&lt;&lt;<sp/>sqrt(*inputs.param.at(</highlight><highlight class="stringliteral">&quot;md2_11&quot;</highlight><highlight class="normal">))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(D,11)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;md2_22&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>48<sp/>&lt;&lt;<sp/>sqrt(*inputs.param.at(</highlight><highlight class="stringliteral">&quot;md2_22&quot;</highlight><highlight class="normal">))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(D,22)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;md2_33&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>49<sp/>&lt;&lt;<sp/>sqrt(*inputs.param.at(</highlight><highlight class="stringliteral">&quot;md2_33&quot;</highlight><highlight class="normal">))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(D,33)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Block<sp/>SMINPUTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>1.0<sp/>/<sp/>*Alpha_mZ_MS<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>alpha_em^-1(MZ)^MSbar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2<sp/>&lt;&lt;<sp/>*G_F<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>G_mu<sp/>[GeV^-2]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>3<sp/>&lt;&lt;<sp/>*AlphaS_mZ<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>alpha_s(MZ)^MSbar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>4<sp/>&lt;&lt;<sp/>*mZ<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_Z(pole)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>5<sp/>&lt;&lt;<sp/>(*mf_d)(3)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_b(m_b),<sp/>MSbar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>6<sp/>&lt;&lt;<sp/>(*mf_u)(3)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_t(pole)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>7<sp/>&lt;&lt;<sp/>(*mf_l)(3)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_tau(pole)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>8<sp/>&lt;&lt;<sp/>(*mf_nu)(3)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_nu_3&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>11<sp/>&lt;&lt;<sp/>(*mf_l)(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_e(pole)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>12<sp/>&lt;&lt;<sp/>(*mf_nu)(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_nu_1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>13<sp/>&lt;&lt;<sp/>(*mf_l)(2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_muon(pole)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>14<sp/>&lt;&lt;<sp/>(*mf_nu)(2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_nu_2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>21<sp/>&lt;&lt;<sp/>(*mf_d)(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_d(2<sp/>GeV),<sp/>MSbar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>22<sp/>&lt;&lt;<sp/>(*mf_u)(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_u(2<sp/>GeV),<sp/>MSbar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>23<sp/>&lt;&lt;<sp/>(*mf_d)(2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_s(2<sp/>GeV),<sp/>MSbar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>24<sp/>&lt;&lt;<sp/>(*mf_u)(2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_c(m_c),<sp/>MSbar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SUSY-HIT<sp/>requires<sp/>these<sp/>blocks<sp/>to<sp/>be<sp/>present,<sp/>so<sp/>add<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;VCKMIN&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;VCKMIN&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>*lam_wolf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>lambda&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;VCKMIN&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2<sp/>&lt;&lt;<sp/>*A_wolf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>A&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;VCKMIN&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>3<sp/>&lt;&lt;<sp/>*rho_wolf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>rho<sp/>bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;VCKMIN&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>4<sp/>&lt;&lt;<sp/>*eta_wolf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>eta<sp/>bar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>*theta_12<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>theta_12,<sp/>solar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2<sp/>&lt;&lt;<sp/>*theta_23&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>theta_23,<sp/>atmospheric&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>3<sp/>&lt;&lt;<sp/>*theta_13<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>theta_13&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>4<sp/>&lt;&lt;<sp/>*delta_nu<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>delta_nu&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>5<sp/>&lt;&lt;<sp/>*alpha_nu1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>alpha_1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>6<sp/>&lt;&lt;<sp/>*alpha_nu2<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>alpha_2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>Farray&lt;Fcomplex16,1,6,1,6&gt;<sp/>RDsq_ckm,<sp/>RUsq_ckm,<sp/>RSl_pmns;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>Farray&lt;Fcomplex16,1,3,1,3&gt;<sp/>RSn_pmns,<sp/>id3C;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>Farray&lt;Fcomplex16,1,3,1,3&gt;<sp/>CKM_Q,<sp/>PMNS_Q;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>Farray&lt;Freal8,1,3&gt;<sp/>Yu,<sp/>Yd,<sp/>Yl;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*GenerationMixing)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Flogical<sp/>False<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{<sp/>Switch_to_superCKM(*Y_d,*Y_u,*A_d,*A_u,*M2_D,*M2_Q,*M2_U,*Ad_sckm,*Au_sckm,*M2D_sckm,*M2Q_sckm,*M2U_sckm,False,*RSdown,*RSup,RDsq_ckm,RUsq_ckm,CKM_Q,Yd,Yu);<sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::runtime_error&amp;<sp/>e)<sp/>{<sp/>invalid_point().raise(e.what());<sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{<sp/>Switch_to_superPMNS(*Y_l,id3C,*A_l,*M2_E,*M2_L,*Al_pmns,*M2E_pmns,*M2L_pmns,False,*RSlepton,*RSneut,RSl_pmns,RSn_pmns,PMNS_Q,Yl);<sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::runtime_error&amp;<sp/>e)<sp/>{<sp/>invalid_point().raise(e.what());<sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=3;<sp/>i++)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Yu(i)<sp/>=<sp/>(*Y_u)(i,i).re;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Yd(i)<sp/>=<sp/>(*Y_d)(i,i).re;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Yl(i)<sp/>=<sp/>(*Y_l)(i,i).re;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*Al_pmns<sp/>=<sp/>*A_l;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*Ad_sckm<sp/>=<sp/>*A_d;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*Au_sckm<sp/>=<sp/>*A_u;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*M2D_sckm<sp/>=<sp/>*M2_D;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*M2U_sckm<sp/>=<sp/>*M2_U;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*M2Q_sckm<sp/>=<sp/>*M2_Q;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*M2E_pmns<sp/>=<sp/>*M2_E;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*M2L_pmns<sp/>=<sp/>*M2_L;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RUsq_ckm<sp/>=<sp/>*RSup;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RDsq_ckm<sp/>=<sp/>*RSdown;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RSn_pmns<sp/>=<sp/>*RSneut;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RSl_pmns<sp/>=<sp/>*RSlepton;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Block<sp/>GAUGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;GAUGE&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;GAUGE&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>(*gauge)(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>g&apos;(Q)^DRbar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;GAUGE&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2<sp/>&lt;&lt;<sp/>(*gauge)(2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>g(Q)^DRbar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;GAUGE&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>3<sp/>&lt;&lt;<sp/>(*gauge)(3)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>g3(Q)^DRbar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Blocks<sp/>Yu,<sp/>Yd,<sp/>Ye</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;Yu&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;Yd&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;Ye&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=3;<sp/>i++)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;Yu&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>Yu(i)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Yu(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)(Q)^DRbar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;Yd&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>Yd(i)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Yd(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)(Q)^DRbar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;Ye&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>Yl(i)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Ye(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)(Q)^DRbar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=3;<sp/>j++)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;Yu&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>0.0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Yu(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)(Q)^DRbar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;Yd&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>0.0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Yd(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)(Q)^DRbar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;Ye&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>0.0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Ye(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)(Q)^DRbar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*GenerationMixing)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Blocks<sp/>VKCM<sp/>and<sp/>UPMNS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;VCKM&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMVCKM&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;UPMNS&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMUPMNS&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=3;<sp/>i++)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=3;<sp/>j++)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;VCKM&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>CKM_Q(i,j).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>V_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMVCKM&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>CKM_Q(i,j).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(V_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;UPMNS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>PMNS_Q(i,j).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>UPMNS_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMUPMNS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>PMNS_Q(i,j).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(UPMNS_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Blocks<sp/>Te,<sp/>Tu,<sp/>Td</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;Te&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;Tu&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;Td&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMTe&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMTu&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMTd&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=3;<sp/>i++)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=3;<sp/>j++)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;Te&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*Al_pmns)(i,j).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Te(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;Tu&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*Au_sckm)(i,j).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Tu(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;Td&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*Ad_sckm)(i,j).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Td(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMTe&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*Al_pmns)(i,j).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(Te(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;))&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMTu&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*Au_sckm)(i,j).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(Tu(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;))&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMTd&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*Ad_sckm)(i,j).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(Td(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;))&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Blocks<sp/>Au,<sp/>Ad,<sp/>Ae</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;Ae&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;Au&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;Ad&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMAe&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMAu&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMAd&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=3;<sp/>i++)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=3;<sp/>j++)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*Y_l)(i,j).abs()<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;Ae&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>((*Al_pmns)(i,j)/(*Y_l)(i,j)).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Ae(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMAe&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>((*Al_pmns)(i,j)/(*Y_l)(i,j)).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(Ae(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;))&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;Ae&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>0.0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Ae(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMAe&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>0.0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(Ae(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;))&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*Y_u)(i,i).abs()<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;Au&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>((*Au_sckm)(i,j)/(*Y_u)(i,j)).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Au(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMAu&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>((*Au_sckm)(i,j)/(*Y_u)(i,j)).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(Au(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;))&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;Au&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>0.0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Au(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMAu&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>0.0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(Au(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;))&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*Y_d)(i,i).abs()<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;Ad&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>((*Ad_sckm)(i,i)/(*Y_d)(i,j)).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Ad(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMAd&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>((*Ad_sckm)(i,i)/(*Y_d)(i,j)).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(Ad(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;))&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;Ad&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>0.0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Ad(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMAd&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>0.0<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(Ad(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;))&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Block<sp/>MSOFT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>(*Mi)(1).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2<sp/>&lt;&lt;<sp/>(*Mi)(2).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>3<sp/>&lt;&lt;<sp/>(*Mi)(3).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_3&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>21<sp/>&lt;&lt;<sp/>(*M2_H)(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M^2_(H,d)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>22<sp/>&lt;&lt;<sp/>(*M2_H)(2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M^2_(H,u)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>31<sp/>&lt;&lt;<sp/>Utils::sgn((*M2L_pmns)(1,1).re)<sp/>*<sp/>sqrt(abs((*M2L_pmns)(1,1).re))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(L,11)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>32<sp/>&lt;&lt;<sp/>Utils::sgn((*M2L_pmns)(2,2).re)<sp/>*<sp/>sqrt(abs((*M2L_pmns)(2,2).re))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(L,22)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>33<sp/>&lt;&lt;<sp/>Utils::sgn((*M2L_pmns)(3,3).re)<sp/>*<sp/>sqrt(abs((*M2L_pmns)(3,3).re))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(L,33)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>34<sp/>&lt;&lt;<sp/>Utils::sgn((*M2E_pmns)(1,1).re)<sp/>*<sp/>sqrt(abs((*M2E_pmns)(1,1).re))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(E,11)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>35<sp/>&lt;&lt;<sp/>Utils::sgn((*M2E_pmns)(2,2).re)<sp/>*<sp/>sqrt(abs((*M2E_pmns)(2,2).re))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(E,22)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>36<sp/>&lt;&lt;<sp/>Utils::sgn((*M2E_pmns)(3,3).re)<sp/>*<sp/>sqrt(abs((*M2E_pmns)(3,3).re))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(E,33)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>41<sp/>&lt;&lt;<sp/>Utils::sgn((*M2Q_sckm)(1,1).re)<sp/>*<sp/>sqrt(abs((*M2Q_sckm)(1,1).re))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(Q,11)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>42<sp/>&lt;&lt;<sp/>Utils::sgn((*M2Q_sckm)(2,2).re)<sp/>*<sp/>sqrt(abs((*M2Q_sckm)(2,2).re))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(Q,22)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>43<sp/>&lt;&lt;<sp/>Utils::sgn((*M2Q_sckm)(3,3).re)<sp/>*<sp/>sqrt(abs((*M2Q_sckm)(3,3).re))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(Q,33)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>44<sp/>&lt;&lt;<sp/>Utils::sgn((*M2U_sckm)(1,1).re)<sp/>*<sp/>sqrt(abs((*M2U_sckm)(1,1).re))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(U,11)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>45<sp/>&lt;&lt;<sp/>Utils::sgn((*M2U_sckm)(2,2).re)<sp/>*<sp/>sqrt(abs((*M2U_sckm)(2,2).re))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(U,22)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>46<sp/>&lt;&lt;<sp/>Utils::sgn((*M2U_sckm)(3,3).re)<sp/>*<sp/>sqrt(abs((*M2U_sckm)(3,3).re))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(U,33)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>47<sp/>&lt;&lt;<sp/>Utils::sgn((*M2D_sckm)(1,1).re)<sp/>*<sp/>sqrt(abs((*M2D_sckm)(1,1).re))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(D,11)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>48<sp/>&lt;&lt;<sp/>Utils::sgn((*M2D_sckm)(2,2).re)<sp/>*<sp/>sqrt(abs((*M2D_sckm)(2,2).re))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(D,22)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>49<sp/>&lt;&lt;<sp/>Utils::sgn((*M2D_sckm)(3,3).re)<sp/>*<sp/>sqrt(abs((*M2D_sckm)(3,3).re))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_(D,33)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*Mi)(1).im<sp/>!=<sp/>0<sp/>or<sp/>(*Mi)(2).im<sp/>!=<sp/>0<sp/>or<sp/>(*Mi)(3).im<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMMSOFT&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMMSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>(*Mi)(1).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMMSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2<sp/>&lt;&lt;<sp/>(*Mi)(2).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMMSOFT&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>3<sp/>&lt;&lt;<sp/>(*Mi)(3).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>M_3&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Blocks<sp/>MSL2,<sp/>MSE2,<sp/>MSQ2,<sp/>MSU2,<sp/>MSD2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;MSL2&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;MSE2&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;MSQ2&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;MSU2&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;MSD2&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMMSL2&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMMSE2&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMMSQ2&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMMSU2&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMMSD2&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=3;<sp/>i++)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=3;<sp/>j++)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSL2&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*M2L_pmns)(i,j).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>ml2(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSE2&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*M2E_pmns)(i,j).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>me2(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSQ2&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*M2Q_sckm)(i,j).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>mq2(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSU2&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*M2U_sckm)(i,j).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>mu2(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MSD2&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*M2D_sckm)(i,j).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>md2(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMMSL2&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*M2L_pmns)(i,j).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(ml2(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;))&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMMSE2&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*M2E_pmns)(i,j).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(me2(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;))&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMMSQ2&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*M2Q_sckm)(i,j).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(mq2(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;))&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMMSU2&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*M2U_sckm)(i,j).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(mu2(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;))&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMMSD2&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*M2D_sckm)(i,j).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(md2(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;))&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Block<sp/>MASS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>5<sp/>&lt;&lt;<sp/>(*mf_d)(3)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_b(pole)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>6<sp/>&lt;&lt;<sp/>(*mf_u)(3)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_t(pole)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>23<sp/>&lt;&lt;<sp/>*mZ<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_Z(pole)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>24<sp/>&lt;&lt;<sp/>*mW<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_W(pole)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>15<sp/>&lt;&lt;<sp/>(*mf_l)(3)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m_tau(pole)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>25<sp/>&lt;&lt;<sp/>(*S0)(1).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>h0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>35<sp/>&lt;&lt;<sp/>(*S0)(2).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>H0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>36<sp/>&lt;&lt;<sp/>(*P0)(2).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>A0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>37<sp/>&lt;&lt;<sp/>(*Spm)(2).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>H+&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*GenerationMixing)</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>id_sd<sp/>=<sp/>{1000001,<sp/>1000003,<sp/>1000005,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2000001,<sp/>2000003,<sp/>2000005};</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=6;<sp/>i++)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>id_sd[i-1]<sp/>&lt;&lt;<sp/>(*Sdown)(i).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~d_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>id_su<sp/>=<sp/>{1000002,<sp/>1000004,<sp/>1000006,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2000002,<sp/>2000004,<sp/>2000006};</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=6;<sp/>i++)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>id_su[i-1]<sp/>&lt;&lt;<sp/>(*Sup)(i).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~u_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>id_snu<sp/>=<sp/>{1000012,<sp/>1000014,<sp/>1000016};</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=3;<sp/>i++)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>id_snu[i-1]<sp/>&lt;&lt;<sp/>(*Sneut)(i).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~nu_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>id_sle<sp/>=<sp/>{1000011,<sp/>1000013,<sp/>1000015,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2000011,<sp/>2000013,<sp/>2000015};</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=6;<sp/>i++)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>id_sle[i-1]<sp/>&lt;&lt;<sp/>(*Slepton)(i).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~l_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*RSdown)(1,1).abs()<sp/>&gt;<sp/>0.5)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000001<sp/>&lt;&lt;<sp/>(*Sdown)(1).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~d_L&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2000001<sp/>&lt;&lt;<sp/>(*Sdown)(2).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~d_R&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000001<sp/>&lt;&lt;<sp/>(*Sdown)(2).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~d_L&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2000001<sp/>&lt;&lt;<sp/>(*Sdown)(1).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~d_R&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*RSup)(1,1).abs()<sp/>&gt;<sp/>0.5)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000002<sp/>&lt;&lt;<sp/>(*Sup)(1).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~u_L&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2000002<sp/>&lt;&lt;<sp/>(*Sup)(2).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~u_R&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000002<sp/>&lt;&lt;<sp/>(*Sup)(2).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~u_L&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2000002<sp/>&lt;&lt;<sp/>(*Sup)(1).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~u_R&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*RSdown)(3,3).abs()<sp/>&gt;<sp/>0.5)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000003<sp/>&lt;&lt;<sp/>(*Sdown)(3).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~s_L&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2000003<sp/>&lt;&lt;<sp/>(*Sdown)(4).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~s_R&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000003<sp/>&lt;&lt;<sp/>(*Sdown)(4).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~s_L&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2000003<sp/>&lt;&lt;<sp/>(*Sdown)(3).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~s_R&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*RSup)(3,3).abs()<sp/>&gt;<sp/>0.5)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000004<sp/>&lt;&lt;<sp/>(*Sup)(3).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~c_L&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2000004<sp/>&lt;&lt;<sp/>(*Sup)(4).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~c_R&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000004<sp/>&lt;&lt;<sp/>(*Sup)(4).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~c_L&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2000004<sp/>&lt;&lt;<sp/>(*Sup)(3).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~c_R&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000005<sp/>&lt;&lt;<sp/>(*Sdown)(5).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~b_1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2000005<sp/>&lt;&lt;<sp/>(*Sdown)(6).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~b_2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000006<sp/>&lt;&lt;<sp/>(*Sup)(5).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~t_1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2000006<sp/>&lt;&lt;<sp/>(*Sup)(6).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~t_2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*RSlepton)(1,1).abs()<sp/>&gt;<sp/>0.5)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000011<sp/>&lt;&lt;<sp/>(*Slepton)(1).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~e_L-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2000011<sp/>&lt;&lt;<sp/>(*Slepton)(2).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~e_R-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000011<sp/>&lt;&lt;<sp/>(*Slepton)(2).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~e_L-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2000011<sp/>&lt;&lt;<sp/>(*Slepton)(1).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~e_R-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000012<sp/>&lt;&lt;<sp/>(*Sneut)(1).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~nu_eL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*RSlepton)(3,3).abs()<sp/>&gt;<sp/>0.5)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000013<sp/>&lt;&lt;<sp/>(*Slepton)(3).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~mu_L-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2000013<sp/>&lt;&lt;<sp/>(*Slepton)(4).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~mu_R-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000013<sp/>&lt;&lt;<sp/>(*Slepton)(4).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~mu_L-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2000013<sp/>&lt;&lt;<sp/>(*Slepton)(3).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~mu_R-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000014<sp/>&lt;&lt;<sp/>(*Sneut)(2).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~nu_muL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000015<sp/>&lt;&lt;<sp/>(*Slepton)(5).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~tau_1-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2000015<sp/>&lt;&lt;<sp/>(*Slepton)(6).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~tau_2-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000016<sp/>&lt;&lt;<sp/>(*Sneut)(3).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~nu_tauL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000021<sp/>&lt;&lt;<sp/>Glu-&gt;m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~g&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>Farray_Freal8_1_4<sp/>mNr;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>Farray_Fcomplex16_1_4_1_4<sp/>Nr;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=4;<sp/>i++)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Freal8<sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=4;<sp/>j++)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>(*N)(i,j).re;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sum<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mNr(i)<sp/>=<sp/>-(*Chi0)(i).m;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=4;<sp/>j++)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Nr(i,j).re<sp/>=<sp/>(*N)(i,j).im;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mNr(i)<sp/>=<sp/>(*Chi0)(i).m;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=4;<sp/>j++)</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Nr(i,j)<sp/>=<sp/>(*N)(i,j);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000022<sp/>&lt;&lt;<sp/>mNr(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~chi_10&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000023<sp/>&lt;&lt;<sp/>mNr(2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~chi_20&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000025<sp/>&lt;&lt;<sp/>mNr(3)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~chi_30&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000035<sp/>&lt;&lt;<sp/>mNr(4)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~chi_40&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000024<sp/>&lt;&lt;<sp/>(*ChiPm)(1).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~chi_1+&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1000037<sp/>&lt;&lt;<sp/>(*ChiPm)(2).m<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>~chi_2+&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>whether<sp/>any<sp/>of<sp/>the<sp/>masses<sp/>is<sp/>NaN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>block<sp/>=<sp/>slha[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>block.begin();<sp/>it<sp/>!=<sp/>block.end();<sp/>it++)</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*it)[0]<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;BLOCK&quot;</highlight><highlight class="normal"><sp/>and<sp/>Utils::isnan(stod((*it)[1]))<sp/>)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>message;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>in<sp/>spectrum<sp/>generator:<sp/>mass<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Models::ParticleDB().long_name(std::pair&lt;int,int&gt;(stoi((*it)[0]),0))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>NaN&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger()<sp/>&lt;&lt;<sp/>message.str()<sp/>&lt;&lt;<sp/>EOM;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalid_point().raise(message.str());</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Block<sp/>ALPHA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;ALPHA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;ALPHA&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>-asin((*RS0)(1,1))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>alpha&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BLOCK<sp/>HMIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;HMIX&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;HMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>mu-&gt;re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>mu&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;HMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>2<sp/>&lt;&lt;<sp/>*tanb_Q<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>tan[beta](Q)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;HMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>3<sp/>&lt;&lt;<sp/>*vev_Q<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>v(Q)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;HMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>4<sp/>&lt;&lt;<sp/>*mA2_Q<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>m^2_A(Q)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;HMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>101<sp/>&lt;&lt;<sp/>B-&gt;re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Bmu<sp/>DRBar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;HMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>102<sp/>&lt;&lt;<sp/>(*vevSM)(1)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>vd<sp/>DRBar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;HMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>103<sp/>&lt;&lt;<sp/>(*vevSM)(2)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>vu<sp/>DRBar&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mu-&gt;im<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMHMIX&quot;</highlight><highlight class="normal">,<sp/>Q);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMHMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>mu-&gt;im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(mu)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Blocks<sp/>SCALARMIX,<sp/>PSEUDOSCALARMIX,<sp/>CHARGEMIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;SCALARMIX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;PSEUDOSCALARMIX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;CHARGEMIX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=2;<sp/>i++)</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=2;<sp/>j++)</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SCALARMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*RS0)(i,j)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>ZH(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;PSEUDOSCALARMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*RP0)(i,j)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>ZA(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;CHARGEMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*RSpm)(i,j).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>ZP(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Blocks<sp/>USQMIX,<sp/>DSQMIX,<sp/>SELMIX,<sp/>SNUMIX<sp/>or<sp/>STOPMIX,<sp/>SBOTMIX,<sp/>STAUMIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*GenerationMixing)</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;USQMIX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=6;<sp/>i++)</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=6;<sp/>j++)</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;USQMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>RUsq_ckm(i,j).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>R_Su(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(RUsq_ckm(i,j).im<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_check_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMUSQMIX&quot;</highlight><highlight class="normal">,<sp/>i,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMUSQMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>RUsq_ckm(i,j).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(R_Su)(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;DSQMIX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=6;<sp/>i++)</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=6;<sp/>j++)</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;DSQMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>RDsq_ckm(i,j).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>R_Sd(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(RDsq_ckm(i,j).im<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_check_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMDSQMIX&quot;</highlight><highlight class="normal">,<sp/>i,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMDSQMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>RDsq_ckm(i,j).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(R_Sd)(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;SELMIX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=6;<sp/>i++)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=6;<sp/>j++)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SELMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>RSl_pmns(i,j).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>R_Sl(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(RSl_pmns(i,j).im<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_check_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMSELMIX&quot;</highlight><highlight class="normal">,<sp/>i,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMSELMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>RSl_pmns(i,j).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(R_Sl)(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;SNUMIX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=3;<sp/>i++)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=3;<sp/>j++)</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SNUMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>RSn_pmns(i,j).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>R_Sn(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(RSn_pmns(i,j).im<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_check_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMSNUMIX&quot;</highlight><highlight class="normal">,<sp/>i,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMSNUMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>RSn_pmns(i,j).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(R_Sn)(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;STOPMIX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=2;<sp/>i++)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=2;<sp/>j++)</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;STOPMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>RUsq_ckm(i+4,j+4).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>R_st(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(RUsq_ckm(i+4,j+4).im<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_check_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMSTOPMIX&quot;</highlight><highlight class="normal">,<sp/>i,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMSTOPMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>RUsq_ckm(i+4,j+4).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(R_st)(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;SBOTMIX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=2;<sp/>i++)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=2;<sp/>j++)</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;SBOTMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>RDsq_ckm(i+4,j+4).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>R_sb(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(RDsq_ckm(i+4,j+4).im<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_check_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMSBOTMIX&quot;</highlight><highlight class="normal">,<sp/>i,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMSBOTMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>RDsq_ckm(i+4,j+4).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(R_sb)(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;STAUMIX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=2;<sp/>i++)</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=2;<sp/>j++)</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;STAUMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>RSl_pmns(i+4,j+4).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>R_sta(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(RSl_pmns(i+4,j+4).im<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_check_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMSTAUMIX&quot;</highlight><highlight class="normal">,<sp/>i,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMSTAUMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>RSl_pmns(i+4,j+4).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(R_sta)(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Blocks<sp/>NMIX,<sp/>UMIX,<sp/>VMIX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;NMIX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=4;<sp/>i++)</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=4;<sp/>j++)</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;NMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>Nr(i,j).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>N(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Nr(i,j).im<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_check_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMNMIX&quot;</highlight><highlight class="normal">,<sp/>i,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMNMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>Nr(i,j).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(N)(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;UMIX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=2;<sp/>i++)</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=2;<sp/>j++)</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;UMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*U)(i,j).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>U(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*U)(i,j).im<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_check_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMUMIX&quot;</highlight><highlight class="normal">,<sp/>i,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMUMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*U)(i,j).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(U)(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>SLHAea_add_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;VMIX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=2;<sp/>i++)</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=2;<sp/>j++)</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;VMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*V)(i,j).re<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>V(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*V)(i,j).im<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_check_block(slha,<sp/></highlight><highlight class="stringliteral">&quot;IMVMIX&quot;</highlight><highlight class="normal">,<sp/>i,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slha[</highlight><highlight class="stringliteral">&quot;IMVMIX&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">]<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/>(*V)(i,j).im<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>Im(V)(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>Spectrum<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Spectrum::mc_info<sp/>mass_cut;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Spectrum::mr_info<sp/>mass_ratio_cut;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>Spectrum<sp/>spectrum<sp/>=<sp/>spectrum_from_SLHAea&lt;MSSMSimpleSpec,<sp/>SLHAstruct&gt;(slha,slha,mass_cut,mass_ratio_cut);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>high<sp/>scale<sp/>and<sp/>susy<sp/>scale<sp/>variables<sp/>by<sp/>hand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>high_scale;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;Qin&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>high_scale<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;Qin&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>high_scale<sp/>=<sp/>*m_GUT;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>susy_scale<sp/>=<sp/>Q;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>spectrum.get_HE().set_override(Par::mass1,<sp/>high_scale,<sp/></highlight><highlight class="stringliteral">&quot;high_scale&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>spectrum.get_HE().set_override(Par::mass1,<sp/>susy_scale,<sp/></highlight><highlight class="stringliteral">&quot;susy_scale&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spectrum;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>to<sp/>read<sp/>data<sp/>from<sp/>the<sp/>Gambit<sp/>inputs<sp/>and<sp/>fill<sp/>SPheno<sp/>internal<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReadingData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Finputs<sp/>&amp;inputs)</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>InitializeStandardModel(inputs.sminputs);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{<sp/>InitializeLoopFunctions();<sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::runtime_error&amp;<sp/>e)<sp/>{<sp/>invalid_point().raise(e.what());<sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>*ErrorLevel<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>*GenerationMixing<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>*L_BR<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>*L_CS<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{<sp/>Set_All_Parameters_0();<sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::runtime_error&amp;<sp/>e)<sp/>{<sp/>invalid_point().raise(e.what());<sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>*TwoLoopRGE<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>*kont<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/****************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Block<sp/>MODSEL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/****************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>*GenerationMixing<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;GenerationMixing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/******************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Block<sp/>SMINPUTS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/******************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Already<sp/>in<sp/>InitializeStandardModel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/****************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Block<sp/>VCKMIN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/****************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Already<sp/>in<sp/>SMInputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/****************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Block<sp/>FCONST<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/****************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>hadron<sp/>constants,<sp/>not<sp/>really<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/***************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Block<sp/>FMASS<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/***************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Masses<sp/>of<sp/>hadrons,<sp/>not<sp/>really<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/***************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Block<sp/>FLIFE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/***************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lifetimes<sp/>of<sp/>hadrons,<sp/>not<sp/>really<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/*******************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Block<sp/>SPHENOINPUT<sp/>(options)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/*******************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1,<sp/>Error_Level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>*ErrorLevel<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;Finteger&gt;(-1,<sp/></highlight><highlight class="stringliteral">&quot;ErrorLevel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2,<sp/>SPA_convention</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>*SPA_convention<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SPA_convention&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*SPA_convention)</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Freal8<sp/>scale<sp/>=<sp/>1.0E6;<sp/><sp/></highlight><highlight class="comment">//<sp/>SPA<sp/>convention<sp/>is<sp/>1<sp/>TeV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{SetRGEScale(scale);<sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::runtime_error&amp;<sp/>e)<sp/>{<sp/>invalid_point().raise(e.what());<sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3,<sp/>External_Spectrum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GAMBIT:<sp/>no<sp/>need<sp/>for<sp/>external<sp/>spectrum<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>*External_Spectrum<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>*External_Higgs<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4,<sp/>Use_Flavour_States</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GAMBIT:<sp/>private<sp/>variable,<sp/>cannot<sp/>import</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>5,<sp/>FermionMassResummation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>*FermionMassResummation<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;FermionMassResummation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>6,<sp/>Ynu_at_MR3,<sp/>Fixed_Nu_Yukawas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>*Ynu_at_MR3<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>*Fixed_Nu_Yukawas<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>7,<sp/>Only_1loop_Higgsmass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>*Only_1loop_Higgsmass<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Only_1loop_Higgsmass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>8,<sp/>calculates<sp/>Masses<sp/>for<sp/>extra<sp/>scales<sp/>if<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>*Calc_Mass<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Calc_Mass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>9,<sp/>use<sp/>old<sp/>version<sp/>of<sp/>BoundaryEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>*UseNewBoundaryEW<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;UseNewBoundaryEW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>10,<sp/>use<sp/>old<sp/>version<sp/>to<sp/>calculate<sp/>scale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>*UseNewScale<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;UseNewScale&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>11-13,<sp/>whether<sp/>to<sp/>calculate<sp/>branching<sp/>ratios<sp/>or<sp/>not,<sp/>L_BR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>*L_BR<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>21-26,<sp/>whether<sp/>to<sp/>calculate<sp/>cross<sp/>sections<sp/>or<sp/>not,<sp/>L_CS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>*L_CS<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>31,<sp/>setting<sp/>a<sp/>fixed<sp/>GUT<sp/>scale,<sp/>GUTScale</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>Freal8<sp/>GUTScale<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;Freal8&gt;(0.0,<sp/></highlight><highlight class="stringliteral">&quot;GUTScale&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(GUTScale<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{<sp/>SetGUTScale(GUTScale);<sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::runtime_error&amp;<sp/>e)<sp/>{<sp/>invalid_point().raise(e.what());<sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>32,<sp/>requires<sp/>strict<sp/>unification,<sp/>StrictUnification</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>Flogical<sp/>StrictUnification<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;StrictUnification&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(StrictUnification)</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{<sp/>SetStrictUnification(StrictUnification);<sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::runtime_error&amp;<sp/>e)<sp/>{<sp/>invalid_point().raise(e.what());<sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>34,<sp/>precision<sp/>of<sp/>mass<sp/>calculation,<sp/>delta_mass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>*delta_mass<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;Freal8&gt;(0.00001,<sp/></highlight><highlight class="stringliteral">&quot;delta_mass&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>35,<sp/>maximal<sp/>number<sp/>of<sp/>iterations,<sp/>n_run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>*n_run<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;Finteger&gt;(40,<sp/></highlight><highlight class="stringliteral">&quot;n_run&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>36<sp/>write<sp/>out<sp/>debug<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>*WriteOut<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>37,<sp/>if<sp/>=<sp/>1<sp/>-&gt;<sp/>CKM<sp/>through<sp/>V_u,<sp/>if<sp/>=<sp/>2<sp/>CKM<sp/>through<sp/>V_d,<sp/>YukawaScheme</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>Finteger<sp/>YukawaScheme<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;Finteger&gt;(1,<sp/></highlight><highlight class="stringliteral">&quot;YukawaScheme&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(YukawaScheme<sp/>==<sp/>1<sp/>or<sp/>YukawaScheme<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{<sp/>SetYukawaScheme(YukawaScheme);<sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::runtime_error&amp;<sp/>e)<sp/>{<sp/>invalid_point().raise(e.what());<sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>38,<sp/>set<sp/>looplevel<sp/>of<sp/>RGEs,<sp/>TwoLoopRGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>*TwoLoopRGE<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TwoLoopRGE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*TwoLoopRGE)</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ThreeLoopRGE<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ThreeLoopRGE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>39,<sp/>write<sp/>additional<sp/>SLHA1<sp/>file,<sp/>Write_SLHA1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GAMBIT:<sp/>Always<sp/>SLHA2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>*Write_SLHA1<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>40,<sp/>alpha(0),<sp/>Alpha</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>Freal8<sp/>alpha<sp/>=<sp/>1.0/137.035999074;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>*Alpha<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;Freal8&gt;(alpha,</highlight><highlight class="stringliteral">&quot;Alpha&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>41,<sp/>Z-boson<sp/>width,<sp/>gamZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>*gamZ<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;Freal8&gt;(2.49,</highlight><highlight class="stringliteral">&quot;gamZ&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>42,<sp/>W-boson<sp/>width,<sp/>gamW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>*gamW<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;Freal8&gt;(2.06,</highlight><highlight class="stringliteral">&quot;gamW&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>45,<sp/>in<sp/>case<sp/>of<sp/>large<sp/>logs<sp/>for<sp/>m_h<sp/>switch<sp/>to<sp/>1-loop<sp/>calculation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>*Switch_to_1_loop_mh<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Switch_to_1_loop_mh&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>48,<sp/>switch<sp/>on<sp/>NNNL<sp/>fit<sp/>formula<sp/>for<sp/>m_t<sp/>and<sp/>alpha_s<sp/>values<sp/>at<sp/>Q=m_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>*l_mt_3loop<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;l_mt_3loop&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>49,<sp/>switch<sp/>on<sp/>SM<sp/>decoupling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>*l_SM_decoupling<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;l_SM_decoupling&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>80,<sp/>exit<sp/>for<sp/>sure<sp/>with<sp/>non-zero<sp/>value<sp/>if<sp/>a<sp/>problem<sp/>occurs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>*Non_Zero_Exit<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>89,<sp/>quick<sp/>and<sp/>dirty<sp/>way<sp/>to<sp/>implement<sp/>model<sp/>by<sp/>Suchita<sp/>Kulkarni</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>*Model_Suchita<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>90,<sp/>add<sp/>R-parity<sp/>at<sp/>low<sp/>energies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>*Add_Rparity<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>91,<sp/>fit<sp/>RP<sp/>parameters<sp/>such,<sp/>that<sp/>neutrino<sp/>data<sp/>are<sp/>o.k.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>*l_fit_RP_parameters<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>92,<sp/>for<sp/>Pythia<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GAMBIT:<sp/>private<sp/>variable,<sp/>cannot<sp/>import</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>93,<sp/>calculates<sp/>cross<sp/>section<sp/>in<sp/>case<sp/>of<sp/>RP,<sp/>only<sp/>partially<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>*l_CSrp<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>94,<sp/>calculates<sp/>cross<sp/>section<sp/>in<sp/>case<sp/>of<sp/>RP,<sp/>only<sp/>partially<sp/>implemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GAMBIT:<sp/>private<sp/>variable,<sp/>cannot<sp/>import</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>99,<sp/>MADGraph<sp/>output<sp/>style,<sp/>some<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GAMBIT:<sp/>private<sp/>variable,<sp/>cannot<sp/>import</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>100,<sp/>use<sp/>bsstep<sp/>instead<sp/>of<sp/>rkqs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>Flogical<sp/>Use_bsstep_instead_of_rkqs<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Use_bsstep_instead_of_rkqs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Use_bsstep_instead_of_rkqs)</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{<sp/>Set_Use_bsstep_instead_of_rkqs(Use_bsstep_instead_of_rkqs);<sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::runtime_error&amp;<sp/>e)<sp/>{<sp/>invalid_point().raise(e.what());<sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>101,<sp/>use<sp/>rzextr<sp/>instead<sp/>of<sp/>pzextr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>Flogical<sp/>Use_rzextr_instead_of_pzextr<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Use_rzextr_instead_of_pzextr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Use_rzextr_instead_of_pzextr)</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{<sp/>Set_Use_rzextr_instead_of_pzextr(Use_rzextr_instead_of_pzextr);<sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::runtime_error&amp;<sp/>e)<sp/>{<sp/>invalid_point().raise(e.what());<sp/>}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>110,<sp/>write<sp/>output<sp/>for<sp/>LHC<sp/>observables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>GAMBIT:<sp/>private<sp/>variable,<sp/>cannot<sp/>import</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Silence<sp/>screen<sp/>output,<sp/>added<sp/>by<sp/>GAMBIT<sp/>to<sp/>SPheno</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>*SilenceOutput<sp/>=<sp/>inputs.options-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SilenceOutput&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/****************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Block<sp/>MINPAR<sp/>//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/****************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;M0&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=3;<sp/>i++)</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*M2D_0_sckm)(i,i).re<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(*inputs.param.at(</highlight><highlight class="stringliteral">&quot;M0&quot;</highlight><highlight class="normal">),2);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*M2E_0_pmns<sp/>=<sp/>*M2D_0_sckm;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*M2L_0_pmns<sp/>=<sp/>*M2D_0_sckm;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*M2_R_0<sp/>=<sp/>*M2D_0_sckm;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*M2Q_0_sckm<sp/>=<sp/>*M2D_0_sckm;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*M2U_0_sckm<sp/>=<sp/>*M2D_0_sckm;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=2;<sp/>i++)</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*M2_H_0)(i)<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(*inputs.param.at(</highlight><highlight class="stringliteral">&quot;M0&quot;</highlight><highlight class="normal">),2);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*M2_T_0<sp/>=<sp/>*M2_H_0;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>M12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;M12&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=3;<sp/>i++)</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*Mi_0)(i).re<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;M12&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TanBeta<sp/>(at<sp/>MZ)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;TanBeta&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*tanb<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;TanBeta&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*tanb_mZ<sp/>=<sp/>*tanb;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SignMu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;SignMu&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>phase_mu-&gt;re<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;SignMu&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;A0&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=3;<sp/>i++)</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*AoY_d_0)(i,i).re<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;A0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*AoY_l_0<sp/>=<sp/>*AoY_d_0;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*AoY_u_0<sp/>=<sp/>*AoY_d_0;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*AoY_nu_0<sp/>=<sp/>*AoY_d_0;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*AoT_0<sp/>=<sp/>*AoY_d_0;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=2;<sp/>i++)</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*Aolam12_0)(i).re<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;A0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/****************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Block<sp/>EXTPAR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/****************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Q_in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;Qin&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetRGEScale(*inputs.param.at(</highlight><highlight class="stringliteral">&quot;Qin&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>M_1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;M1&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*Mi_0)(1).re<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;M1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*Mi)(1).re<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;M1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>M_2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;M2&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*Mi_0)(2).re<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;M2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*Mi)(2).re<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;M2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>M_3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;M3&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*Mi_0)(3).re<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;M3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*Mi)(3).re<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;M3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;Au_33&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*AoY_u)(3,3).re<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;Au_33&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*At_save<sp/>=<sp/>(*AoY_u)(3,3);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*AoY_u_0<sp/>=<sp/>*AoY_u;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A_b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;Ad_33&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*AoY_d)(3,3).re<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;Ad_33&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*Ab_save<sp/>=<sp/>(*AoY_d)(3,3);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*AoY_d_0<sp/>=<sp/>*AoY_d;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A_tau</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;Ae_33&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*AoY_l)(3,3).re<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;Ae_33&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*Atau_save<sp/>=<sp/>(*AoY_l)(3,3);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*AoY_l_0<sp/>=<sp/>*AoY_l;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>M^2_Hd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;mHd2&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*M2_H)(1)<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;mHd2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*M2_H_0)(1)<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;mHd2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>M^2_Hu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;mHu2&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*M2_H)(2)<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;mHu2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*M2_H_0)(2)<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;mHu2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;mu&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mu-&gt;re<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;mu&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MA^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(</highlight><highlight class="stringliteral">&quot;mA&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*mP0)(2)<sp/>=<sp/>*inputs.param.at(</highlight><highlight class="stringliteral">&quot;mA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*mP02)(2)<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>((*mP0)(2),2);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=3;<sp/>i++)</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=1;<sp/>j&lt;=3;<sp/>j++)</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>TUIN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>parname;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parname<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Au_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(parname.str())<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*Au_0_sckm)(i,j).re<sp/>=<sp/>*inputs.param.at(parname.str());</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unfortunatly<sp/>there<sp/>is<sp/>a<sp/>transpose<sp/>due<sp/>to<sp/>the<sp/>RGE<sp/>implemenation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*Au_sckm)(j,i).re<sp/>=<sp/>*inputs.param.at(parname.str());</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*l_Au<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>TDIN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parname.str(std::string());</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parname<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Ad_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(parname.str())<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*Ad_0_sckm)(i,j).re<sp/>=<sp/>*inputs.param.at(parname.str());</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unfortunatly<sp/>there<sp/>is<sp/>a<sp/>transpose<sp/>due<sp/>to<sp/>the<sp/>RGE<sp/>implemenation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*Ad_sckm)(j,i).re<sp/>=<sp/>*inputs.param.at(parname.str());</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*l_Ad<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>TEIN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parname.str(std::string());</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parname<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Ae_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(parname.str())<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*Al_0_pmns)(i,j).re<sp/>=<sp/>*inputs.param.at(parname.str());</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unfortunatly<sp/>there<sp/>is<sp/>a<sp/>transpose<sp/>due<sp/>to<sp/>the<sp/>RGE<sp/>implemenation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*Al_pmns)(j,i).re<sp/>=<sp/>*inputs.param.at(parname.str());</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*l_Al<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=3;<sp/>i++)</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=i;<sp/>j&lt;=3;<sp/>j++)</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MSL2IN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>parname;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parname<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ml2_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(parname.str())<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*M2L_pmns)(i,j).re<sp/>=<sp/>*inputs.param.at(parname.str());</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*M2L_0_pmns<sp/>=<sp/>*M2L_pmns;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*l_ML<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MSE2IN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parname.str(std::string());</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parname<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;me2_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(parname.str())<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*M2E_pmns)(i,j).re<sp/>=<sp/>*inputs.param.at(parname.str());</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*M2E_0_pmns<sp/>=<sp/>*M2E_pmns;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*l_ME<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MSQ2IN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parname.str(std::string());</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parname<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;mq2_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(parname.str())<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*M2Q_sckm)(i,j).re<sp/>=<sp/>*inputs.param.at(parname.str());</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*M2Q_0_sckm<sp/>=<sp/>*M2Q_sckm;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*l_MQ<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MSU2IN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parname.str(std::string());</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parname<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;mu2_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(parname.str())<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*M2U_sckm)(i,j).re<sp/>=<sp/>*inputs.param.at(parname.str());</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*M2U_0_sckm<sp/>=<sp/>*M2U_sckm;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*l_MU<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MSD2IN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**********/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parname.str(std::string());</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parname<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;md2_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>j;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(inputs.param.find(parname.str())<sp/>!=<sp/>inputs.param.end())</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*M2D_sckm)(i,j).re<sp/>=<sp/>*inputs.param.at(parname.str());</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*M2D_0_sckm<sp/>=<sp/>*M2D_sckm;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*l_MD<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>other<sp/>blocks<sp/>are<sp/>relevant<sp/>at<sp/>this<sp/>stage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitializeStandardModel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SMInputs<sp/>&amp;sminputs)</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>*kont<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Contributions<sp/>to<sp/>alpha(m_Z),<sp/>based<sp/>on<sp/>F.<sp/>Jegerlehner,<sp/>hep-ph/0310234<sp/>and<sp/>Fanchiotti,<sp/>Kniehl,<sp/>Sirlin<sp/>PRD<sp/>48<sp/>(1993)<sp/>307</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>*Delta_Alpha_Lepton<sp/>=<sp/>0.04020;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>*Delta_Alpha_Hadron<sp/>=<sp/>0.027651;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Z-boson</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>*mZ<sp/>=<sp/>sminputs.mZ;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>*gamZ<sp/>=<sp/>2.4952;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>width,<sp/>values<sp/>henceforth<sp/>from<sp/>StandardModel.f90</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>(*BrZqq)(1)<sp/>=<sp/>0.156;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>branching<sp/>ratio<sp/>in<sp/>d<sp/>\bar{d}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>(*BrZqq)(2)<sp/>=<sp/>0.156;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>branching<sp/>ratio<sp/>in<sp/>s<sp/>\bar{s}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>(*BrZqq)(3)<sp/>=<sp/>0.151;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>branching<sp/>ratio<sp/>in<sp/>b<sp/>\bar{b}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>(*BrZqq)(4)<sp/>=<sp/>0.116;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>branching<sp/>ratio<sp/>in<sp/>u<sp/>\bar{u}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>(*BrZqq)(5)<sp/>=<sp/>0.12;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>branching<sp/>ratio<sp/>in<sp/>c<sp/>\bar{c}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>(*BrZll)(1)<sp/>=<sp/>0.0336;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>branching<sp/>ratio<sp/>in<sp/>e+<sp/>e-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>(*BrZll)(2)<sp/>=<sp/>0.0336;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>branching<sp/>ratio<sp/>in<sp/>mu+<sp/>mu-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>(*BrZll)(3)<sp/>=<sp/>0.0338;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>branching<sp/>ratio<sp/>in<sp/>tau+<sp/>tau-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>*BrZinv<sp/>=<sp/>0.2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invisible<sp/>branching<sp/>ratio</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>*mZ2<sp/>=<sp/>*mZ<sp/>*<sp/>*mZ;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>*gamZ2<sp/>=<sp/>*gamZ<sp/>*<sp/>*gamZ;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>*gmZ<sp/>=<sp/>*gamZ<sp/>*<sp/>*mZ;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>*gmZ2<sp/>=<sp/>*gmZ<sp/>*<sp/>*gmZ;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>W-boson</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>*mW<sp/>=<sp/>80.385;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>*gamW<sp/>=<sp/>2.085;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>(*BrWqq)(1)<sp/>=<sp/>0.35;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>(*BrWqq)(2)<sp/>=<sp/>0.35;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=3;<sp/>i++)</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*BrWln)(i)<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>*mW2<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(*mW,<sp/>2);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>*gamW2<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(*gamW,<sp/>2);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>*gmW<sp/>=<sp/>*gamW<sp/>*<sp/>*mW;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>*gmW2<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(*gmW,<sp/>2);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lepton<sp/>masses:<sp/>e,<sp/>muon,<sp/>tau</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>(*mf_l)(1)<sp/>=<sp/>sminputs.mE;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>(*mf_l)(2)<sp/>=<sp/>sminputs.mMu;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>(*mf_l)(3)<sp/>=<sp/>sminputs.mTau;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>neutrino<sp/>masses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>(*mf_nu)(1)<sp/>=<sp/>sminputs.mNu1;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>(*mf_nu)(2)<sp/>=<sp/>sminputs.mNu2;</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>(*mf_nu)(3)<sp/>=<sp/>sminputs.mNu3;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scale<sp/>where<sp/>masses<sp/>of<sp/>light<sp/>quarks<sp/>are<sp/>defined<sp/>[in<sp/>GeV]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>(*Q_light_quarks)<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>up-quark<sp/>masses:<sp/>u,<sp/>c,<sp/>t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>(*mf_u)(1)<sp/>=<sp/>sminputs.mU;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>(*mf_u)(2)<sp/>=<sp/>sminputs.mCmC;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>(*mf_u)(3)<sp/>=<sp/>sminputs.mT;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>down-quark<sp/>masses:<sp/>d,<sp/>s,<sp/>b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>(*mf_d)(1)<sp/>=<sp/>sminputs.mD;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>(*mf_d)(2)<sp/>=<sp/>sminputs.mS;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>(*mf_d)(3)<sp/>=<sp/>sminputs.mBmB;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=3;<sp/>i++)</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*mf_l2)(i)<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>((*mf_l)(i),2);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*mf_u2)(i)<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>((*mf_u)(i),2);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*mf_d2)(i)<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>((*mf_d)(i),2);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>couplings:<sp/>Alpha(Q=0),<sp/>Alpha(mZ),<sp/>Alpha_S(mZ),<sp/>Fermi<sp/>constant<sp/>G_F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>*Alpha_mZ<sp/>=<sp/>1.0/sminputs.alphainv;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>*Alpha_mZ_MS<sp/>=<sp/>*Alpha_mZ;<sp/></highlight><highlight class="comment">//<sp/>from<sp/>SMINPUTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>*MZ_input<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>*AlphaS_mZ<sp/>=<sp/>sminputs.alphaS;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>*G_F<sp/>=<sp/>sminputs.GF;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>ISR<sp/>correction<sp/>in<sp/>e+e-<sp/>annihilation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>*KFactorLee<sp/>=<sp/>1.0<sp/>+<sp/>(M_PI/3.0<sp/>-<sp/>1.0/(2*M_PI))*(*Alpha);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CKM<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>*lam_wolf<sp/>=<sp/>sminputs.CKM.lambda;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>*A_wolf<sp/>=<sp/>sminputs.CKM.A;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/>*rho_wolf<sp/>=<sp/>sminputs.CKM.rhobar;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>*eta_wolf<sp/>=<sp/>sminputs.CKM.etabar;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s12<sp/>=<sp/>sminputs.CKM.lambda;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s23<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(s12,2)<sp/>*<sp/>sminputs.CKM.A;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s13<sp/>=<sp/>s23<sp/>*<sp/>sminputs.CKM.lambda<sp/>*<sp/>sqrt(<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.CKM.etabar,2)<sp/>+<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.CKM.rhobar,2));</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phase<sp/>=<sp/>atan(sminputs.CKM.etabar/sminputs.CKM.rhobar);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c12<sp/>=<sp/>sqrt(1.0<sp/>-<sp/>s12*s12);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c23<sp/>=<sp/>sqrt(1.0<sp/>-<sp/>s23*s23);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c13<sp/>=<sp/>sqrt(1.0<sp/>-<sp/>s13*s13);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;<sp/>i<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>sqrt(i);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>(*CKM)(1,1)<sp/>=<sp/>c12<sp/>*<sp/>c13;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>(*CKM)(1,2)<sp/>=<sp/>s12<sp/>*<sp/>c13;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>(*CKM)(1,3)<sp/>=<sp/>s13<sp/>*<sp/>exp(-i<sp/>*<sp/>phase);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>(*CKM)(2,1)<sp/>=<sp/>-s12*c23<sp/>-c12*s23*s13<sp/>*<sp/>exp(i<sp/>*<sp/>phase);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>(*CKM)(2,2)<sp/>=<sp/>c12*c23<sp/>-s12*s23*s13<sp/>*<sp/>exp(i<sp/>*<sp/>phase<sp/>);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>(*CKM)(2,3)<sp/>=<sp/>s23<sp/>*<sp/>c13;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>(*CKM)(3,1)<sp/>=<sp/>s12*s23<sp/>-c12*c23*s13<sp/>*<sp/>exp(i<sp/>*<sp/>phase<sp/>);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>(*CKM)(3,2)<sp/>=<sp/>-c12*s23<sp/>-<sp/>s12*c23*s13<sp/>*<sp/>exp(<sp/>i<sp/>*<sp/>phase<sp/>);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/>(*CKM)(3,3)<sp/>=<sp/>c23<sp/>*<sp/>c13;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=1;<sp/>i&lt;=3;<sp/>i++)</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*mf_l_mZ)(i)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*mf_d_mZ)(i)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*mf_u_mZ)(i)<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{<sp/>CalculateRunningMasses(*mf_l,<sp/>*mf_d,<sp/>*mf_u,<sp/>*Q_light_quarks,<sp/>*Alpha_mZ,<sp/>*AlphaS_mZ,<sp/>*mZ,<sp/>*mf_l_mZ,<sp/>*mf_d_mZ,<sp/>*mf_u_mZ,<sp/>*kont);<sp/>}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::runtime_error&amp;<sp/>e)<sp/>{<sp/>invalid_point().raise(e.what());<sp/>}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PMNS<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>*theta_12<sp/>=<sp/>sminputs.PMNS.theta12;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>*theta_23<sp/>=<sp/>sminputs.PMNS.theta23;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>*theta_13<sp/>=<sp/>sminputs.PMNS.theta13;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>*delta_nu<sp/>=<sp/>sminputs.PMNS.delta13;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>*alpha_nu1<sp/>=<sp/>sminputs.PMNS.alpha1;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>*alpha_nu2<sp/>=<sp/>sminputs.PMNS.alpha2;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>s12<sp/>=<sp/>sin(*theta_12);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>s23<sp/>=<sp/>sin(*theta_23);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/>s13<sp/>=<sp/>sin(*theta_13);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/>c12<sp/>=<sp/>sqrt(1.0<sp/>-<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(s12,2));</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>c23<sp/>=<sp/>sqrt(1.0<sp/>-<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(s23,2));</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>c13<sp/>=<sp/>sqrt(1.0<sp/>-<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(s13,2));</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>(*Unu)(1,1)<sp/>=<sp/>c12<sp/>*<sp/>c13<sp/>*<sp/>exp(-0.5*i<sp/>*<sp/>*alpha_nu1);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>(*Unu)(1,2)<sp/>=<sp/>s12<sp/>*<sp/>c13<sp/>*<sp/>exp(-0.5*i<sp/>*<sp/>*alpha_nu1);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>(*Unu)(1,3)<sp/>=<sp/>s13<sp/>*<sp/>exp(-i<sp/>*<sp/>*delta_nu)<sp/>*<sp/>exp(-0.5*i<sp/>*<sp/>*alpha_nu1);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>(*Unu)(2,1)<sp/>=<sp/>-s12*c23<sp/>-<sp/>c12*s23*s13<sp/>*<sp/>exp(i<sp/>*<sp/>*delta_nu)<sp/>*<sp/>exp(-0.5*i<sp/>*<sp/>*alpha_nu2);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>(*Unu)(2,2)<sp/>=<sp/>c12*c23<sp/>-<sp/>s12*s23*s13<sp/>*<sp/>exp(i<sp/>*<sp/>*delta_nu)<sp/>*<sp/>exp(-0.5*i<sp/>*<sp/>*alpha_nu2);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>(*Unu)(2,3)<sp/>=<sp/>s23<sp/>*<sp/>c13<sp/>*<sp/>exp(-0.5*i<sp/>*<sp/>*alpha_nu2);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>(*Unu)(3,1)<sp/>=<sp/>s12*s23<sp/>-<sp/>c12*c23*s13<sp/>*<sp/>exp(i<sp/>*<sp/>*delta_nu);</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>(*Unu)(3,2)<sp/>=<sp/>-c12*s23<sp/>-<sp/>s12*c23*s13<sp/>*<sp/>exp(i<sp/>*<sp/>*delta_nu);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>(*Unu)(3,3)<sp/>=<sp/>c23<sp/>*<sp/>c13;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*kont<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ErrorHandling(*kont);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>that<sp/>handles<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ErrorHandling(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;kont)</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>message;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kont<sp/>&gt;<sp/>0<sp/>and<sp/>kont<sp/>&lt;=<sp/>31)</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>(*Math_Error)(kont).str();</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kont<sp/>&gt;<sp/>100<sp/>and<sp/>kont<sp/>&lt;=<sp/>102)</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>(*SM_Error)(kont-100).str();</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kont<sp/>&gt;<sp/>200<sp/>and<sp/>kont<sp/>&lt;=<sp/>233)</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>(*SusyM_Error)(kont-200).str();</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kont<sp/>&gt;<sp/>300<sp/>and<sp/>kont<sp/>&lt;=<sp/>315)</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>(*InOut_Error)(kont-300).str();</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kont<sp/>&gt;<sp/>400<sp/>and<sp/>kont<sp/>&lt;=<sp/>422)</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>(*Sugra_Error)(kont-400).str();</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kont<sp/>&gt;<sp/>500<sp/>and<sp/>kont<sp/>&lt;=<sp/>525)</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>(*LoopMass_Error)(kont-500).str();</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kont<sp/>&gt;<sp/>600<sp/>and<sp/>kont<sp/>&lt;=<sp/>609)</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>(*TwoLoopHiggs_Error)(kont-600).str();</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kont<sp/>&gt;<sp/>1000<sp/>and<sp/>kont<sp/>&lt;=<sp/>1010)</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/>(*MathQP_Error)(kont-1000).str();</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;GAMBIT<sp/>caught<sp/>an<sp/>error<sp/>in<sp/>SPheno.<sp/>Check<sp/>the<sp/>SPheno<sp/>output<sp/>for<sp/>more<sp/>info.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>logger()<sp/>&lt;&lt;<sp/>message<sp/>&lt;&lt;<sp/>EOM;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>invalid_point().raise(message);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><ref refid="common__macros_8hpp_1ab9f05bcb458a039e9c1d4060dc04639c" kindref="member">END_BE_NAMESPACE</ref></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initialisation<sp/>function<sp/>(definition)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><ref refid="common__macros_8hpp_1a825694403adda6ccd191cb93020fbe23" kindref="member">BE_INI_FUNCTION</ref></highlight></codeline>
<codeline lineno="1350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Scan-level<sp/>initialisation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>scan_level<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scan_level)</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dump<sp/>all<sp/>internal<sp/>output<sp/>to<sp/>stdout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>*ErrCan<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>function<sp/>pointer<sp/>in<sp/>SPheno<sp/>to<sp/>our<sp/>ErrorHandler<sp/>callback<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>*ErrorHandler_cptr<sp/>=<sp/>&amp;<sp/>CAT_4(BACKENDNAME,_,SAFE_VERSION,_ErrorHandler);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{<sp/>Set_All_Parameters_0();<sp/>}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::runtime_error&amp;<sp/>e)<sp/>{<sp/>invalid_point().raise(e.what());<sp/>}</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/****************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Block<sp/>MODSEL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/****************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*ModelInUse)(</highlight><highlight class="stringliteral">&quot;CMSSM&quot;</highlight><highlight class="normal">)<sp/>or<sp/>(*ModelInUse)(</highlight><highlight class="stringliteral">&quot;MSSM63atMGUT&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*HighScaleModel<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;mSUGRA&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetHighScaleModel(</highlight><highlight class="stringliteral">&quot;SUGRA&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*ModelInUse)(</highlight><highlight class="stringliteral">&quot;MSSM63atQ&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*HighScaleModel<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;MSSM&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Model<sp/>not<sp/>recognised&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logger()<sp/>&lt;&lt;<sp/>message<sp/>&lt;&lt;<sp/>EOM;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>invalid_point().raise(message);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>scan_level<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><ref refid="common__macros_8hpp_1a12da9763bf3b37787fa5ae54cf36c779" kindref="member">END_BE_INI_FUNCTION</ref></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/src/frontends/SPheno_4_0_3.cpp"/>
  </compounddef>
</doxygen>
