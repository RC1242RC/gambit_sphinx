<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="run__examples_8cpp" kind="file" language="C++">
    <compoundname>run_examples.cpp</compoundname>
    <includes local="yes">SpecBit_examples.hpp</includes>
    <incdepgraph>
      <node id="1">
        <label>run_examples.cpp</label>
        <link refid="run__examples_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>SpecBit_examples.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceflexiblesusy">flexiblesusy</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="run__examples_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/SpecBit/examples/run_examples.cpp" line="6" column="5" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/SpecBit/examples/run_examples.cpp" bodystart="6" bodyend="30"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;SpecBit_examples.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceGambit" kindref="compound">Gambit</ref>;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">flexiblesusy;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="gambit_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>spectrum<sp/>for<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/>CMSSM&lt;Two_scale&gt;<sp/>FS_model;<sp/></highlight><highlight class="comment">//start<sp/>with<sp/>empty<sp/>flexiblesusy<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/>setpars(FS_model);<sp/></highlight><highlight class="comment">//fill<sp/>with<sp/>some<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/>FS_model.calculate_DRbar_parameters();<sp/></highlight><highlight class="comment">//calculated<sp/>DRbar<sp/>masses<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/>FS_model.calculate_pole_masses();</highlight><highlight class="comment">//now<sp/>calculate<sp/>pole<sp/>masses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>model<sp/>with<sp/>SLHA<sp/>conventions<sp/>(and<sp/>pole<sp/>mass<sp/>getters)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/>CMSSM_slha&lt;Two_scale&gt;<sp/>FS_model_slha(FS_model);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Spectrum<sp/>object<sp/>to<sp/>wrap<sp/>flexiblesusy<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/>MSSMSpec&lt;CMSSM_slha&lt;Two_scale&gt;&gt;<sp/>mssm(FS_model_slha);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/>Spectrum*<sp/>spec<sp/>=<sp/>&amp;mssm;<sp/></highlight><highlight class="comment">//Convert<sp/>pointer<sp/>to<sp/>Spectrum<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/>mssm_manipulate(mssm);<sp/><sp/></highlight><highlight class="comment">//function<sp/>can<sp/>manipulate<sp/>knowing<sp/>the<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/>spec_manipulate(spec);<sp/></highlight><highlight class="comment">//function<sp/>can<sp/>manipulate<sp/>without<sp/>knowing<sp/>model.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/>SM_checks(spec);<sp/></highlight><highlight class="comment">//<sp/>Run<sp/>some<sp/>tests<sp/>on<sp/>standard<sp/>model<sp/>parameters<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/SpecBit/examples/run_examples.cpp"/>
  </compounddef>
</doxygen>
