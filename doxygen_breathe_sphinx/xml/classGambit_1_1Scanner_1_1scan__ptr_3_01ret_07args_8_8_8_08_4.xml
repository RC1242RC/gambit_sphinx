<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4" kind="class" language="C++" prot="public">
    <compoundname>Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;</compoundname>
    <basecompoundref prot="public" virt="non-virtual">boost::shared_ptr&lt; Function_Base&lt; ret(args...)&gt; &gt;</basecompoundref>
    <includes refid="factory__defs_8hpp" local="no">factory_defs.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename ret</type>
      </param>
      <param>
        <type>typename...</type>
        <declname>args</declname>
        <defname>args</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4_1ae61d6732aace5e9e5616f86928f6eee0" prot="private" static="no">
        <type>shared_ptr&lt; <ref refid="classGambit_1_1Scanner_1_1Function__Base" kindref="compound">Function_Base</ref>&lt; ret(args...) &gt; &gt;</type>
        <definition>typedef shared_ptr&lt; Function_Base&lt; ret (args...) &gt; &gt; Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;::s_ptr</definition>
        <argsstring></argsstring>
        <name>s_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" line="249" column="32" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" bodystart="249" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4_1abd74e655f109055737127bcd76e5ee0c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;::scan_ptr</definition>
        <argsstring>()</argsstring>
        <name>scan_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" line="252" column="13" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" bodystart="252" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4_1a12bbc11f8d0b92d5f679516e3cab2f62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;::scan_ptr</definition>
        <argsstring>(const scan_ptr &amp;in)</argsstring>
        <name>scan_ptr</name>
        <param>
          <type>const <ref refid="classGambit_1_1Scanner_1_1scan__ptr" kindref="compound">scan_ptr</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" line="253" column="13" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" bodystart="253" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4_1ab03b61dfc24f09afae776c7c9c6f2c8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;::scan_ptr</definition>
        <argsstring>(scan_ptr &amp;&amp;in)</argsstring>
        <name>scan_ptr</name>
        <param>
          <type><ref refid="classGambit_1_1Scanner_1_1scan__ptr" kindref="compound">scan_ptr</ref> &amp;&amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" line="254" column="13" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" bodystart="254" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4_1a95369959d3445943b4745587c0339837" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;::scan_ptr</definition>
        <argsstring>(void *in)</argsstring>
        <name>scan_ptr</name>
        <param>
          <type>void *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" line="255" column="13" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" bodystart="255" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4_1ad623f75647fa3a8393d8899798bd6dec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1Scanner_1_1scan__ptr" kindref="compound">scan_ptr</ref>&lt; ret(args...)&gt; &amp;</type>
        <definition>scan_ptr&lt;ret (args...)&gt;&amp; Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;::operator=</definition>
        <argsstring>(void *in)</argsstring>
        <name>operator=</name>
        <param>
          <type>void *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" line="267" column="22" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" bodystart="267" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4_1aa7880385c7dc5720f97d230e308d8a3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1Scanner_1_1scan__ptr" kindref="compound">scan_ptr</ref>&lt; ret(args...)&gt; &amp;</type>
        <definition>scan_ptr&lt;ret (args...)&gt;&amp; Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;::operator=</definition>
        <argsstring>(const scan_ptr&lt; ret(args...)&gt; &amp;in)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classGambit_1_1Scanner_1_1scan__ptr" kindref="compound">scan_ptr</ref>&lt; ret(args...)&gt; &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" line="286" column="22" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" bodystart="286" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4_1a61f0ce69dea052b04b8f5386d82e2cd7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGambit_1_1Scanner_1_1scan__ptr" kindref="compound">scan_ptr</ref>&lt; ret(args...)&gt; &amp;</type>
        <definition>scan_ptr&lt;ret (args...)&gt;&amp; Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;::operator=</definition>
        <argsstring>(s_ptr &amp;&amp;in)</argsstring>
        <name>operator=</name>
        <param>
          <type>s_ptr &amp;&amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" line="293" column="22" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" bodystart="293" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4_1aee6b24e8dc3a37449ec63a203277542f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ret</type>
        <definition>ret Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;::operator()</definition>
        <argsstring>(const args &amp;... params)</argsstring>
        <name>operator()</name>
        <param>
          <type>const args &amp;...</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" line="300" column="17" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" bodystart="300" bodyend="303"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Container class that hold the output of the &quot;get_purpose&quot; function. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;</label>
        <link refid="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>boost::shared_ptr&lt; Function_Base&lt; ret(args...)&gt; &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;</label>
        <link refid="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>boost::shared_ptr&lt; Function_Base&lt; ret(args...)&gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" line="247" column="1" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/ScannerBit/include/gambit/ScannerBit/factory_defs.hpp" bodystart="246" bodyend="304"/>
    <listofallmembers>
      <member refid="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4_1aee6b24e8dc3a37449ec63a203277542f" prot="public" virt="non-virtual"><scope>Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;</scope><name>operator()</name></member>
      <member refid="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4_1ad623f75647fa3a8393d8899798bd6dec" prot="public" virt="non-virtual"><scope>Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;</scope><name>operator=</name></member>
      <member refid="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4_1aa7880385c7dc5720f97d230e308d8a3b" prot="public" virt="non-virtual"><scope>Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;</scope><name>operator=</name></member>
      <member refid="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4_1a61f0ce69dea052b04b8f5386d82e2cd7" prot="public" virt="non-virtual"><scope>Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;</scope><name>operator=</name></member>
      <member refid="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4_1ae61d6732aace5e9e5616f86928f6eee0" prot="private" virt="non-virtual"><scope>Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;</scope><name>s_ptr</name></member>
      <member refid="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4_1abd74e655f109055737127bcd76e5ee0c" prot="public" virt="non-virtual"><scope>Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;</scope><name>scan_ptr</name></member>
      <member refid="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4_1a12bbc11f8d0b92d5f679516e3cab2f62" prot="public" virt="non-virtual"><scope>Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;</scope><name>scan_ptr</name></member>
      <member refid="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4_1ab03b61dfc24f09afae776c7c9c6f2c8f" prot="public" virt="non-virtual"><scope>Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;</scope><name>scan_ptr</name></member>
      <member refid="classGambit_1_1Scanner_1_1scan__ptr_3_01ret_07args_8_8_8_08_4_1a95369959d3445943b4745587c0339837" prot="public" virt="non-virtual"><scope>Gambit::Scanner::scan_ptr&lt; ret(args...)&gt;</scope><name>scan_ptr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
