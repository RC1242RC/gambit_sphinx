<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="libfirst_8cpp" kind="file" language="C++">
    <compoundname>libfirst.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">cstdarg</includes>
    <incdepgraph>
      <node id="1">
        <label>libfirst.cpp</label>
        <link refid="libfirst_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cstdarg</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="libfirst_8cpp_1a5887055149a7b78a82d3e85ccb4b27a3" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int array_length</definition>
        <argsstring></argsstring>
        <name>array_length</name>
        <initializer>= 10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" line="17" column="11" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="libfirst_8cpp_1a0cfe04519ff6dab092ee7c002e55e520" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int someInt</definition>
        <argsstring></argsstring>
        <name>someInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" line="18" column="5" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="libfirst_8cpp_1afd32727901d5e0adfb6c3e07afd35b7d" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double someDouble</definition>
        <argsstring></argsstring>
        <name>someDouble</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" line="19" column="8" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="libfirst_8cpp_1aba557d9b748b98b2f9246d9a2876ed96" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double someArray[array_length]</definition>
        <argsstring>[array_length]</argsstring>
        <name>someArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" line="20" column="8" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="libfirst_8cpp_1af0a1551f9e15ffe74c4e7d86282191dc" prot="public" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; someVector</definition>
        <argsstring></argsstring>
        <name>someVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" line="21" column="13" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="libfirst_8cpp_1a1fdc2bf5595c2e64dc06d987769834eb" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool isInitialized</definition>
        <argsstring></argsstring>
        <name>isInitialized</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" line="22" column="6" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="libfirst_8cpp_1a78fb15511f687fe7fdb8e3ba9613648b" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string prefix</definition>
        <argsstring></argsstring>
        <name>prefix</name>
        <initializer>= &quot;libfirst: &quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" line="23" column="13" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="libfirst_8cpp_1a8dbcf0f44d1b9fa78a02b2971dd77fcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initialize</definition>
        <argsstring>(int a)</argsstring>
        <name>initialize</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" line="30" column="6" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" bodystart="30" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="libfirst_8cpp_1a29161af0d4e3daa14549262853f354b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void someFunction</definition>
        <argsstring>()</argsstring>
        <name>someFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" line="44" column="6" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" bodystart="44" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="libfirst_8cpp_1accb4a8d573ede09dc98cd6dd246f389a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double byRefExample</definition>
        <argsstring>(double &amp;input)</argsstring>
        <name>byRefExample</name>
        <param>
          <type>double &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" line="63" column="8" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" bodystart="63" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="libfirst_8cpp_1a8a79d54fe16b7b932ebb5eb06c6486d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void byRefExample2</definition>
        <argsstring>(double &amp;input, double input2)</argsstring>
        <name>byRefExample2</name>
        <param>
          <type>double &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>double</type>
          <declname>input2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" line="72" column="6" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" bodystart="72" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="libfirst_8cpp_1a7eca759057ff6e4fd48c42cf7f01e7c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double returnResult</definition>
        <argsstring>()</argsstring>
        <name>returnResult</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" line="80" column="8" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="libfirst_8cpp_1a789bae92b91b22548ecf2325b7e57f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double nastyExample</definition>
        <argsstring>(int count,...)</argsstring>
        <name>nastyExample</name>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" line="88" column="8" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" bodystart="88" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="libfirst_8cpp_1a5d8946da72a3ac98cd6dd4ad2179c2a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double arrayarg_1D</definition>
        <argsstring>(double arg[10])</argsstring>
        <name>arrayarg_1D</name>
        <param>
          <type>double</type>
          <declname>arg</declname>
          <array>[10]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" line="102" column="8" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="libfirst_8cpp_1ad4d35e9ef38bf8913fca899be9e8c25a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double arrayarg_2D</definition>
        <argsstring>(double arg[10][10])</argsstring>
        <name>arrayarg_2D</name>
        <param>
          <type>double</type>
          <declname>arg</declname>
          <array>[10][10]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" line="108" column="8" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="libfirst_8cpp_1af3341fb7f6efc79f040afc565dd8077a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double arrayarg_3D</definition>
        <argsstring>(double arg[10][10][10])</argsstring>
        <name>arrayarg_3D</name>
        <param>
          <type>double</type>
          <declname>arg</declname>
          <array>[10][10][10]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" line="114" column="8" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp" bodystart="114" bodyend="117"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>A<sp/>dummy<sp/>C++<sp/>library<sp/>for<sp/>testing<sp/>GAMBIT<sp/>backend<sp/>setup<sp/></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>\author<sp/>Anders<sp/>Kvellestad</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>\date<sp/>2013-03-26</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdarg&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>global<sp/>variables:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>array_length<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>someInt;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>someDouble;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>someArray[array_length];</highlight></codeline>
<codeline lineno="21"><highlight class="normal">std::vector&lt;double&gt;<sp/>someVector;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isInitialized<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">std::string<sp/>prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;libfirst:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>functions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;initialization&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initialize(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>prefix<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>function<sp/>&apos;initialize&apos;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>someInt<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>array_length;<sp/>x++<sp/>)<sp/>{<sp/>someArray[x]<sp/>=<sp/>2.0*x;<sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>someVector.push_back(1.5);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>someVector.push_back(1.6);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>isInitialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>prefix<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Initialization<sp/>done.<sp/>Variable<sp/>&apos;someInt&apos;<sp/>set<sp/>to:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>someInt<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>initialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;calculation&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>someFunction()</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>prefix<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>function<sp/>&apos;someFunction&apos;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isInitialized)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>prefix<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Will<sp/>now<sp/>perform<sp/>a<sp/>calculation...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>someDouble<sp/>=<sp/>3.1415*someInt;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>prefix<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Result<sp/>stored<sp/>in<sp/>variable<sp/>&apos;someDouble&apos;<sp/>is:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>someDouble<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>prefix<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>initialized.<sp/>Cannot<sp/>perform<sp/>calculation.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>someFunction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;byRefExample&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>byRefExample<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>input)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>prefix<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>function<sp/>&apos;byRefExample&apos;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>input<sp/>=<sp/>someDouble<sp/>=<sp/>2.0*someInt;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2.1*someInt;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;byRefExample2&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>byRefExample2<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>input,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>input2)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>prefix<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>function<sp/>&apos;byRefExample2&apos;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>input<sp/>=<sp/>someDouble<sp/>=<sp/>2.3*someInt<sp/>+<sp/>input2;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>&apos;result&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>returnResult()</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;I&apos;m<sp/>returnResult()<sp/>from<sp/>libfirst.so,<sp/>and<sp/>I&apos;m<sp/>feeling<sp/>well.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>someDouble;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>example<sp/>variadic<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nastyExample(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/>...)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>va_start(args,<sp/>count);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>++i)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>va_arg(args,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>example<sp/>function<sp/>taking<sp/>a<sp/>1D<sp/>array<sp/>as<sp/>an<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>arrayarg_1D(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>arg[10])</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg[0]*arg[9];<sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>example<sp/>function<sp/>taking<sp/>a<sp/>1D<sp/>array<sp/>as<sp/>an<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>arrayarg_2D(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>arg[10][10])</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg[0][0]*arg[9][0]*arg[9][9];<sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>example<sp/>function<sp/>taking<sp/>a<sp/>1D<sp/>array<sp/>as<sp/>an<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>arrayarg_3D(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>arg[10][10][10])</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg[0][0][0]*arg[9][0][0]*arg[9][9][9];<sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/Backends/examples/libfirst.cpp"/>
  </compounddef>
</doxygen>
