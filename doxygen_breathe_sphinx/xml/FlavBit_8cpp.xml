<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="FlavBit_8cpp" kind="file" language="C++">
    <compoundname>FlavBit.cpp</compoundname>
    <includes local="no">string</includes>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <includes local="no">map</includes>
    <includes local="yes">gambit/Elements/gambit_module_headers.hpp</includes>
    <includes local="yes">gambit/FlavBit/FlavBit_rollcall.hpp</includes>
    <includes refid="FlavBit__types_8hpp" local="yes">gambit/FlavBit/FlavBit_types.hpp</includes>
    <includes refid="Flav__reader_8hpp" local="yes">gambit/FlavBit/Flav_reader.hpp</includes>
    <includes refid="flav__utils_8hpp" local="yes">gambit/FlavBit/flav_utils.hpp</includes>
    <includes refid="flav__loop__functions_8hpp" local="yes">gambit/FlavBit/flav_loop_functions.hpp</includes>
    <includes local="yes">gambit/Elements/translator.hpp</includes>
    <includes local="yes">gambit/Utils/statistics.hpp</includes>
    <includes local="yes">gambit/cmake/cmake_variables.hpp</includes>
    <incdepgraph>
      <node id="6">
        <label>gambit/Elements/gambit_module_headers.hpp</label>
      </node>
      <node id="11">
        <label>gambit/FlavBit/Flav_reader.hpp</label>
        <link refid="Flav__reader_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>gambit/Elements/translator.hpp</label>
      </node>
      <node id="7">
        <label>gambit/FlavBit/FlavBit_rollcall.hpp</label>
      </node>
      <node id="1">
        <label>FlavBit.cpp</label>
        <link refid="FlavBit_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="8">
        <label>gambit/FlavBit/FlavBit_types.hpp</label>
        <link refid="FlavBit__types_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>map</label>
      </node>
      <node id="16">
        <label>gambit/FlavBit/flav_loop_functions.hpp</label>
        <link refid="flav__loop__functions_8hpp"/>
      </node>
      <node id="4">
        <label>fstream</label>
      </node>
      <node id="12">
        <label>yaml-cpp/yaml.h</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
      <node id="19">
        <label>gambit/cmake/cmake_variables.hpp</label>
      </node>
      <node id="15">
        <label>gambit/FlavBit/flav_utils.hpp</label>
        <link refid="flav__utils_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>boost/numeric/ublas/matrix.hpp</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="18">
        <label>gambit/Utils/statistics.hpp</label>
      </node>
      <node id="13">
        <label>gambit/Utils/util_types.hpp</label>
      </node>
      <node id="14">
        <label>boost/numeric/ublas/lu.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="structYAML_1_1convert_3_01Gambit_1_1nuiscorr_01_4" prot="public">YAML::convert&lt; Gambit::nuiscorr &gt;</innerclass>
    <innernamespace refid="namespaceYAML">YAML</innernamespace>
    <innernamespace refid="namespaceGambit">Gambit</innernamespace>
    <innernamespace refid="namespaceGambit_1_1FlavBit">Gambit::FlavBit</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="FlavBit_8cpp_1a07121538477c14e67c5608d8bfbaa427" prot="public" static="no">
        <name>THE_REST</name>
        <param><defname>bins</defname></param>
        <initializer>      static const std::vector&lt;str&gt; SI_obslist =                    \
       translate_flav_obs(&quot;FlavBit&quot;, &quot;SuperIso&quot;, FB_obslist,        \
       Utils::p2dot(bins));                                         \
      static bool use_SM_covariance =                               \
       runOptions-&gt;getValueOrDef&lt;bool&gt;(false, &quot;use_SM_covariance&quot;); \
      static bool SM_covariance_cached = false;                     \
      SuperIso_prediction_helper(                                   \
        FB_obslist,                                                 \
        SI_obslist,                                                 \
        result,                                                     \
        *Dep::SuperIso_modelinfo,                                   \
        *Dep::SuperIso_nuisance,                                    \
        BEreq::get_predictions_nuisance.pointer(),                  \
        BEreq::observables.pointer(),                               \
        BEreq::convert_correlation.pointer(),                       \
        BEreq::get_th_covariance_nuisance.pointer(),                \
        use_SM_covariance,                                          \
        SM_covariance_cached                                        \
    );                                                              \
    SM_covariance_cached = true;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/FlavBit/src/FlavBit.cpp" line="969" column="13" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/FlavBit/src/FlavBit.cpp" bodystart="969" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="FlavBit_8cpp_1a3abd1dd5154844bf2d7fb47f37c9e4fa" prot="public" static="no">
        <name>SI_SINGLE_PREDICTION_FUNCTION</name>
        <param><defname>name</defname></param>
        <initializer>    void <ref refid="cats_8hpp_1aa7c74d1cd12eae89a2d03f84ea2b8598" kindref="member">CAT</ref>(SuperIso_prediction_,name)(flav_prediction&amp; result)         \
    {                                                                    \
      using namespace <ref refid="cats_8hpp_1aa7c74d1cd12eae89a2d03f84ea2b8598" kindref="member">CAT</ref>(Pipes::SuperIso_prediction_,name);             \
      static const std::vector&lt;str&gt; FB_obslist = {#name};                \
      THE_REST(&quot;&quot;)                                                       \
    }                                                                    \</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/FlavBit/src/FlavBit.cpp" line="991" column="13" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/FlavBit/src/FlavBit.cpp" bodystart="991" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="FlavBit_8cpp_1a73ee8c97f50a071c5cce3b1e4371b99c" prot="public" static="no">
        <name>SI_SINGLE_PREDICTION_FUNCTION_BINS</name>
        <param><defname>name</defname></param>
        <param><defname>bins</defname></param>
        <initializer>    void CAT_3(SuperIso_prediction_,name,bins)(flav_prediction&amp; result)  \
    {                                                                    \
      using namespace CAT_3(Pipes::SuperIso_prediction_,name,bins);      \
      static const std::vector&lt;str&gt; FB_obslist = {#name};                \
      THE_REST(#bins)                                                    \
    }                                                                    \</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/FlavBit/src/FlavBit.cpp" line="999" column="13" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/FlavBit/src/FlavBit.cpp" bodystart="999" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="FlavBit_8cpp_1a24561a9b7967bf3999ca3fdd45431948" prot="public" static="no">
        <name>SI_MULTI_PREDICTION_FUNCTION</name>
        <param><defname>name</defname></param>
        <initializer>    void <ref refid="cats_8hpp_1aa7c74d1cd12eae89a2d03f84ea2b8598" kindref="member">CAT</ref>(SuperIso_prediction_,name)(flav_prediction&amp; result)         \
    {                                                                    \
      using namespace <ref refid="cats_8hpp_1aa7c74d1cd12eae89a2d03f84ea2b8598" kindref="member">CAT</ref>(Pipes::SuperIso_prediction_,name);             \
      static const std::vector&lt;str&gt; FB_obslist =                         \
       Downstream::subcaps-&gt;getNames();                                  \
      <ref refid="DarkSUSY__MSSM__6__2__5_8cpp_1a4cc6f5317481c4b2f46fb215ba938f45" kindref="member">if</ref> (FB_obslist.empty()) FlavBit_error().raise(LOCAL_INFO,          \
       &quot;Missing subcapabilities for SuperIso_prediction_&quot;#name&quot;.&quot;);      \
      THE_REST(&quot;&quot;)                                                       \
    }                                                                    \</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/FlavBit/src/FlavBit.cpp" line="1007" column="13" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/FlavBit/src/FlavBit.cpp" bodystart="1007" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="FlavBit_8cpp_1a334c908c5a1789706e2591c3bf972674" prot="public" static="no">
        <name>SI_MULTI_PREDICTION_FUNCTION_BINS</name>
        <param><defname>name</defname></param>
        <param><defname>bins</defname></param>
        <param><defname>exp</defname></param>
        <initializer>    void CAT_4(SuperIso_prediction_,name,bins,exp)(flav_prediction&amp;      \
     result)                                                             \
    {                                                                    \
      using namespace CAT_4(Pipes::SuperIso_prediction_,name,bins,exp);  \
      static const std::vector&lt;str&gt; FB_obslist =                         \
       Downstream::subcaps-&gt;getNames();                                  \
      <ref refid="DarkSUSY__MSSM__6__2__5_8cpp_1a4cc6f5317481c4b2f46fb215ba938f45" kindref="member">if</ref> (FB_obslist.empty()) FlavBit_error().raise(LOCAL_INFO,          \
       &quot;Missing subcapabilities for SuperIso_prediction_&quot;#name&quot;.&quot;);      \
      THE_REST(#bins)                                                    \
    }                                                                    \</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/FlavBit/src/FlavBit.cpp" line="1018" column="13" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/FlavBit/src/FlavBit.cpp" bodystart="1018" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="FlavBit_8cpp_1a7710fbf1ce076c3d87e4a959c0cc82fe" prot="public" static="no">
        <name>HEPLIKE_GAUSSIAN_1D_LIKELIHOOD</name>
        <param><defname>name</defname></param>
        <param><defname>file</defname></param>
        <initializer>    void CAT_3(HEPLike_,name,_LogLikelihood)(double &amp;result)                      \
    {                                                                             \
      using namespace CAT_3(Pipes::HEPLike_,name,_LogLikelihood);                 \
      static const std::string inputfile = path_to_latest_heplike_data() + file;  \
      static HepLike_default::HL_Gaussian gaussian(inputfile);                    \
      static bool first = true;                                                   \
                                                                                  \
      <ref refid="DarkSUSY__MSSM__6__2__5_8cpp_1a4cc6f5317481c4b2f46fb215ba938f45" kindref="member">if</ref> (first)                                                                  \
      {                                                                           \
        <ref refid="DarkSUSY__MSSM__6__2__5_8cpp_1a4cc6f5317481c4b2f46fb215ba938f45" kindref="member">if</ref> (flav_debug) std::cout &lt;&lt; &quot;Debug: Reading HepLike data file: &quot; &lt;&lt;      \
         inputfile &lt;&lt; endl;                                                       \
        gaussian.Read();                                                          \
        first = false;                                                            \
      }                                                                           \
                                                                                  \
      double theory = <ref refid="cats_8hpp_1aa7c74d1cd12eae89a2d03f84ea2b8598" kindref="member">CAT</ref>(Dep::prediction_,name)-&gt;central_values.begin()-&gt;second; \
      double theory_variance = <ref refid="cats_8hpp_1aa7c74d1cd12eae89a2d03f84ea2b8598" kindref="member">CAT</ref>(Dep::prediction_,name)-&gt;covariance.begin()-&gt;   \
       second.begin()-&gt;second;                                                    \
      result = gaussian.GetLogLikelihood(theory, theory_variance);                \
                                                                                  \
      <ref refid="DarkSUSY__MSSM__6__2__5_8cpp_1a4cc6f5317481c4b2f46fb215ba938f45" kindref="member">if</ref> (flav_debug) std::cout &lt;&lt; &quot;HEPLike_&quot; &lt;&lt; #name                            \
       &lt;&lt; &quot;_LogLikelihood result: &quot; &lt;&lt; result &lt;&lt; std::endl;                       \
    }                                                                             \</initializer>
        <briefdescription>
<para>HEPLike single-observable likelihood. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/FlavBit/src/FlavBit.cpp" line="2352" column="13" bodyfile="/home/runner/work/gambit_sphinx/gambit_sphinx/FlavBit/src/FlavBit.cpp" bodystart="2352" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Functions of module FlavBit</para>
<para><hruler/>
</para>
<para>Authors (add name and date if you modify):</para>
<para><simplesect kind="author"><para>Nazila Mahmoudi </para>
</simplesect>
<simplesect kind="date"><para>2013 Oct </para>
</simplesect>
<simplesect kind="date"><para>2014 </para>
</simplesect>
<simplesect kind="date"><para>2015 Feb </para>
</simplesect>
<simplesect kind="date"><para>2016 Jul </para>
</simplesect>
<simplesect kind="date"><para>2018 Jan </para>
</simplesect>
<simplesect kind="date"><para>2019 Aug</para>
</simplesect>
<simplesect kind="author"><para>Marcin Chrzaszcz </para>
</simplesect>
<simplesect kind="date"><para>2015 May </para>
</simplesect>
<simplesect kind="date"><para>2015 July </para>
</simplesect>
<simplesect kind="date"><para>2015 August </para>
</simplesect>
<simplesect kind="date"><para>2016 July </para>
</simplesect>
<simplesect kind="date"><para>2016 August </para>
</simplesect>
<simplesect kind="date"><para>2016 October </para>
</simplesect>
<simplesect kind="date"><para>2018 Jan </para>
</simplesect>
<simplesect kind="date"><para>2020 Jan </para>
</simplesect>
<simplesect kind="date"><para>2020 Feb </para>
</simplesect>
<simplesect kind="date"><para>2020 May</para>
</simplesect>
<simplesect kind="author"><para>Anders Kvellestad (<ulink url="mailto:anders.kvellestad@fys.uio.no">anders.kvellestad@fys.uio.no</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2013 Nov</para>
</simplesect>
<simplesect kind="author"><para>Pat Scott (<ulink url="mailto:pat.scott@uq.edu.au">pat.scott@uq.edu.au</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2015 May, June </para>
</simplesect>
<simplesect kind="date"><para>2016 Aug </para>
</simplesect>
<simplesect kind="date"><para>2017 March </para>
</simplesect>
<simplesect kind="date"><para>2019 Oct </para>
</simplesect>
<simplesect kind="date"><para>2020 Feb</para>
</simplesect>
<simplesect kind="author"><para>Tomas Gonzalo (<ulink url="mailto:t.e.gonzalo@fys.uio.no">t.e.gonzalo@fys.uio.no</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2017 July</para>
</simplesect>
<simplesect kind="author"><para>Jihyun Bhom (<ulink url="mailto:jihyun.bhom@ifj.edu.pl">jihyun.bhom@ifj.edu.pl</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2019 July </para>
</simplesect>
<simplesect kind="date"><para>2019 Nov </para>
</simplesect>
<simplesect kind="date"><para>2019 Dec </para>
</simplesect>
<simplesect kind="date"><para>2020 Jan </para>
</simplesect>
<simplesect kind="date"><para>2020 Feb</para>
</simplesect>
<simplesect kind="author"><para>Markus Prim (<ulink url="mailto:markus.prim@kit.edu">markus.prim@kit.edu</ulink>) </para>
</simplesect>
<simplesect kind="date"><para>2019 Aug </para>
</simplesect>
<simplesect kind="date"><para>2019 Nov </para>
</simplesect>
<simplesect kind="date"><para>2020 Jan</para>
</simplesect>
<hruler/>
 </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/>GAMBIT:<sp/>Global<sp/>and<sp/>Modular<sp/>BSM<sp/>Inference<sp/>Tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*********************************************</highlight></codeline>
<codeline lineno="62"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/Elements/gambit_module_headers.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/FlavBit/FlavBit_rollcall.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="FlavBit__types_8hpp" kindref="compound">gambit/FlavBit/FlavBit_types.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Flav__reader_8hpp" kindref="compound">gambit/FlavBit/Flav_reader.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="flav__utils_8hpp" kindref="compound">gambit/FlavBit/flav_utils.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="flav__loop__functions_8hpp" kindref="compound">gambit/FlavBit/flav_loop_functions.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/Elements/translator.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/Utils/statistics.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gambit/cmake/cmake_variables.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>FLAVBIT_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>FLAVBIT_DEBUG_LL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">YAML</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="86" refid="structYAML_1_1convert_3_01Gambit_1_1nuiscorr_01_4" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">convert&lt;<ref refid="namespaceGambit" kindref="compound">Gambit</ref>::nuiscorr&gt;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Node<sp/>encode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structGambit_1_1nuiscorr" kindref="compound">Gambit::nuiscorr</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Node<sp/>node;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node.push_back(rhs.obs1);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node.push_back(rhs.obs2);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node.push_back(rhs.value);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>decode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Node&amp;<sp/>node,<sp/><ref refid="structGambit_1_1nuiscorr" kindref="compound">Gambit::nuiscorr</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!node.IsSequence()<sp/>||<sp/>node.size()<sp/>!=<sp/>3)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>obs1<sp/>=<sp/>node[0].as&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>obs2<sp/>=<sp/>node[1].as&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obs1.resize(49);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obs2.resize(49);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(rhs.obs1,<sp/>obs1.c_str());</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(rhs.obs2,<sp/>obs2.c_str());</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rhs.value<sp/>=<sp/>node[2].as&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceGambit" kindref="compound">Gambit</ref></highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">FlavBit</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ublas<sp/>=<sp/>boost::numeric::ublas;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flav_debug<sp/>=</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>FLAVBIT_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flav_debug_LL<sp/>=</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>FLAVBIT_DEBUG_LL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>Utils::translator<sp/>translate_flav_obs(GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/FlavBit/data/observables_key.yaml&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ncorrnuis<sp/>=<sp/>463;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nuiscorr<sp/>(&amp;nuiscorr_help(nuiscorr<sp/>(&amp;arr)[ncorrnuis],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;nuiscorr&gt;&amp;<sp/>v))[ncorrnuis]<sp/>{<sp/>std::copy(v.begin(),<sp/>v.end(),<sp/>arr);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arr;<sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>nuiscorr<sp/>arr[<ref refid="FlavBit_8cpp_1ad0c7ee63f28640f10838933aaa88c943" kindref="member">ncorrnuis</ref>];</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nuiscorr<sp/>(&amp;corrnuis)[<ref refid="FlavBit_8cpp_1ad0c7ee63f28640f10838933aaa88c943" kindref="member">ncorrnuis</ref>]<sp/>=<sp/>nuiscorr_help(arr,<sp/>YAML::LoadFile(GAMBIT_DIR<sp/></highlight><highlight class="stringliteral">&quot;/FlavBit/data/SM_nuisance_correlations.yaml&quot;</highlight><highlight class="normal">)[</highlight><highlight class="stringliteral">&quot;correlation_matrix&quot;</highlight><highlight class="normal">].as&lt;std::vector&lt;nuiscorr&gt;&gt;());</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lep__mssm__xsecs_8hpp_1ad77ec694b2787bf548b6e9a9c62a259c" kindref="member">print</ref>(flav_prediction<sp/>prediction<sp/>,<sp/>vector&lt;std::string<sp/>&gt;<sp/>names)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;names.size();<sp/>i++)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;names[i]&lt;&lt;</highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;prediction.central_values[names[i]]&lt;&lt;endl;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Covariance:&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;names.size();<sp/>i++)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stringstream<sp/>row;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;names.size();<sp/>j++)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row&lt;&lt;(prediction.covariance)[names[i]]<sp/><sp/>[names[j]]&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;row.str()&lt;&lt;endl;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a474236e6968f23fbaa3d50b94ec789ff" kindref="member">Kstarll_Theory2Experiment_translation</ref>(flav_observable_map&amp;<sp/>prediction,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>generation)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>works<sp/>for<sp/>ll<sp/>=<sp/>ee<sp/>and<sp/>ll<sp/>=<sp/>mumu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generation<sp/>&lt;<sp/>1<sp/>or<sp/>generation<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlavBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;Kstarll_Theory2Experiment_translation<sp/>called<sp/>with<sp/>generation<sp/>not<sp/>1<sp/>or<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;std::string&gt;<sp/>all_names[2]<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;AT_Im&quot;</highlight><highlight class="normal">}<sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;S4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;S7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;S9&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;std::string&gt;&amp;<sp/>names<sp/>=<sp/>all_names[generation-1];</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>names.size();<sp/>i++)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search<sp/>=<sp/>prediction.find(names[i]);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(search<sp/>!=<sp/>prediction.end())</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prediction[names[i]]=(-1.)*prediction[names[i]];</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a474236e6968f23fbaa3d50b94ec789ff" kindref="member">Kstarll_Theory2Experiment_translation</ref>(flav_covariance_map&amp;<sp/>prediction,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>generation)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>works<sp/>for<sp/>ll<sp/>=<sp/>ee<sp/>and<sp/>ll<sp/>=<sp/>mumu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generation<sp/>&lt;<sp/>1<sp/>or<sp/>generation<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlavBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;Kstarll_Theory2Experiment_translation<sp/>called<sp/>with<sp/>generation<sp/>not<sp/>1<sp/>or<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;std::string&gt;<sp/>names[2]<sp/>=<sp/>{{</highlight><highlight class="stringliteral">&quot;AT_Im&quot;</highlight><highlight class="normal">}<sp/>,<sp/>{</highlight><highlight class="stringliteral">&quot;S4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;S7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;S9&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;std::string&gt;<sp/>names_exist;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>names[generation-1].size();<sp/>i++)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_i<sp/>=<sp/>prediction.find(names[generation-1][i]);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(search_i<sp/>!=<sp/>prediction.end())<sp/>names_exist.push_back(names[generation-1][i]);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//changing<sp/>the<sp/>rows:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/><sp/>names_exist.size();<sp/>i++)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name1=names_exist[i];</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;const<sp/>std::string,<sp/>double&gt;<sp/>row=prediction[name1];</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map&lt;const<sp/>std::string,<sp/>double&gt;::iterator<sp/>it=row.begin();<sp/>it<sp/>!=row.end();<sp/>it++)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prediction[name1][it-&gt;first]=(-1.)*prediction[name1][it-&gt;first];</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>changing<sp/>the<sp/>columns:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(flav_covariance_map::iterator<sp/>it=prediction.begin();<sp/>it<sp/>!=prediction.end();<sp/>it++)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name_columns=it-&gt;first;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/><sp/>names_exist.size();<sp/>i++)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name1=names_exist[i];</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prediction[name_columns][name1]=(-1)*prediction[name_columns][name1];</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/><ref refid="FlavBit_8cpp_1a8312cda0f84ac464adf15fc3e52f140a" kindref="member">path_to_latest_heplike_data</ref>()</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;str&gt;<sp/>working_data<sp/>=<sp/>Backends::backendInfo().working_versions(</highlight><highlight class="stringliteral">&quot;HepLikeData&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(working_data.empty())<sp/>FlavBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>working<sp/>HepLikeData<sp/>installations<sp/>detected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(working_data.begin(),<sp/>working_data.end());</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Backends::backendInfo().corrected_path(</highlight><highlight class="stringliteral">&quot;HepLikeData&quot;</highlight><highlight class="normal">,<sp/>working_data.back());</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1ab22c15f5e52fa4124c5a52c72e44a08a" kindref="member">SuperIso_fill</ref>(parameters<sp/>&amp;result)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_fill;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SLHAstruct<sp/>spectrum;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Obtain<sp/>SLHAea<sp/>object<sp/>from<sp/>spectrum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ModelInUse(</highlight><highlight class="stringliteral">&quot;WC&quot;</highlight><highlight class="normal">)<sp/><sp/>||<sp/>ModelInUse(</highlight><highlight class="stringliteral">&quot;WC_LR&quot;</highlight><highlight class="normal">)<sp/>||<sp/>ModelInUse(</highlight><highlight class="stringliteral">&quot;WC_LUV&quot;</highlight><highlight class="normal">)<sp/>)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spectrum<sp/>=<sp/>Dep::SM_spectrum-&gt;getSLHAea(2);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ModelInUse(</highlight><highlight class="stringliteral">&quot;MSSM63atMGUT&quot;</highlight><highlight class="normal">)<sp/>or<sp/>ModelInUse(</highlight><highlight class="stringliteral">&quot;MSSM63atQ&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spectrum<sp/>=<sp/>Dep::MSSM_spectrum-&gt;getSLHAea(2);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>MODSEL<sp/>block<sp/>if<sp/>it<sp/>is<sp/>not<sp/>provided<sp/>by<sp/>the<sp/>spectrum<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SLHAea_add(spectrum,</highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">,1,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;General<sp/>MSSM&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlavBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;Unrecognised<sp/>model.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BEreq::Init_param(&amp;result);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ie,je;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.model=-1;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">].empty())</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">][1].is_data_line())<sp/>result.model=SLHAea::to&lt;int&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">][1][1]);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">][3].is_data_line())<sp/>result.NMSSM=SLHAea::to&lt;int&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">][3][1]);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">][4].is_data_line())<sp/>result.RV=SLHAea::to&lt;int&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">][4][1]);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">][5].is_data_line())<sp/>result.CPV=SLHAea::to&lt;int&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">][5][1]);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">][6].is_data_line())<sp/>result.FV=SLHAea::to&lt;int&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">][6][1]);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">][12].is_data_line())<sp/>result.Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MODSEL&quot;</highlight><highlight class="normal">][12][1]);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.NMSSM<sp/>!=<sp/>0)<sp/>result.model=result.NMSSM;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.RV<sp/>!=<sp/>0)<sp/>result.model=-2;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.CPV<sp/>!=<sp/>0)<sp/>result.model=-2;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">].empty())</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][1].is_data_line())<sp/>result.inv_alpha_em=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][1][1]);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][2].is_data_line())<sp/>result.Gfermi=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][2][1]);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][3].is_data_line())<sp/>result.alphas_MZ=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][3][1]);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][4].is_data_line())<sp/>result.mass_Z=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][4][1]);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][5].is_data_line())<sp/>result.mass_b=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][5][1]);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][6].is_data_line())<sp/>result.mass_top_pole=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][6][1]);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][7].is_data_line())<sp/>result.mass_tau_pole=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][7][1]);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][8].is_data_line())<sp/>result.mass_nut=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][8][1]);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][11].is_data_line())<sp/>result.mass_e=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][11][1]);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][12].is_data_line())<sp/>result.mass_nue=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][12][1]);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][13].is_data_line())<sp/>result.mass_mu=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][13][1]);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][14].is_data_line())<sp/>result.mass_num=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][14][1]);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][21].is_data_line())<sp/>result.mass_d=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][21][1]);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][22].is_data_line())<sp/>result.mass_u=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][22][1]);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][23].is_data_line())<sp/>result.mass_s=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][23][1]);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][24].is_data_line())<sp/>result.mass_c=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;SMINPUTS&quot;</highlight><highlight class="normal">][24][1]);result.scheme_c_mass=1;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;VCKMIN&quot;</highlight><highlight class="normal">].empty())</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;VCKMIN&quot;</highlight><highlight class="normal">][1].is_data_line())<sp/>result.CKM_lambda=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;VCKMIN&quot;</highlight><highlight class="normal">][1][1]);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;VCKMIN&quot;</highlight><highlight class="normal">][2].is_data_line())<sp/>result.CKM_A=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;VCKMIN&quot;</highlight><highlight class="normal">][2][1]);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;VCKMIN&quot;</highlight><highlight class="normal">][3].is_data_line())<sp/>result.CKM_rhobar=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;VCKMIN&quot;</highlight><highlight class="normal">][3][1]);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;VCKMIN&quot;</highlight><highlight class="normal">][4].is_data_line())<sp/>result.CKM_etabar=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;VCKMIN&quot;</highlight><highlight class="normal">][4][1]);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">].empty())</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">][1].is_data_line())<sp/>result.PMNS_theta12=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">][1][1]);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">][2].is_data_line())<sp/>result.PMNS_theta23=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">][2][1]);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">][3].is_data_line())<sp/>result.PMNS_theta13=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">][3][1]);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">][4].is_data_line())<sp/>result.PMNS_delta13=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">][4][1]);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">][5].is_data_line())<sp/>result.PMNS_alpha1=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">][5][1]);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">][6].is_data_line())<sp/>result.PMNS_alpha2=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;UPMNSIN&quot;</highlight><highlight class="normal">][6][1]);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">].empty())</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][3].is_data_line())<sp/>result.tan_beta=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][3][1]);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(result.model)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][1].is_data_line())<sp/>result.m0=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][1][1]);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][2].is_data_line())<sp/>result.m12=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][2][1]);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][4].is_data_line())<sp/>result.sign_mu=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][4][1]);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][5].is_data_line())<sp/>result.A0=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][5][1]);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][1].is_data_line())<sp/>result.Lambda=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][1][1]);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][2].is_data_line())<sp/>result.Mmess=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][2][1]);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][4].is_data_line())<sp/>result.sign_mu=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][4][1]);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][5].is_data_line())<sp/>result.N5=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][5][1]);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][6].is_data_line())<sp/>result.cgrav=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][6][1]);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][1].is_data_line())<sp/>result.m32=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][1][1]);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][2].is_data_line())<sp/>result.m0=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][2][1]);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][4].is_data_line())<sp/>result.sign_mu=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][4][1]);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][3].is_data_line())<sp/>result.tan_beta=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MINPAR&quot;</highlight><highlight class="normal">][3][1]);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">].empty())</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][0].is_data_line())<sp/>result.Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][0][1]);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][1].is_data_line())<sp/>result.M1_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][1][1]);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][2].is_data_line())<sp/>result.M2_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][2][1]);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][3].is_data_line())<sp/>result.M3_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][3][1]);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][11].is_data_line())<sp/>result.At_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][11][1]);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][12].is_data_line())<sp/>result.Ab_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][12][1]);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][13].is_data_line())<sp/>result.Atau_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][13][1]);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][21].is_data_line())<sp/>result.M2H1_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][21][1]);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][22].is_data_line())<sp/>result.M2H2_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][22][1]);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][23].is_data_line())<sp/>result.mu_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][23][1]);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][24].is_data_line())<sp/>result.M2A_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][24][1]);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][25].is_data_line())<sp/>result.tb_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][25][1]);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][26].is_data_line())<sp/>result.mA_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][26][1]);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][31].is_data_line())<sp/>result.MeL_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][31][1]);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][32].is_data_line())<sp/>result.MmuL_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][32][1]);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][33].is_data_line())<sp/>result.MtauL_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][33][1]);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][34].is_data_line())<sp/>result.MeR_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][34][1]);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][35].is_data_line())<sp/>result.MmuR_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][35][1]);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][36].is_data_line())<sp/>result.MtauR_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][36][1]);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][41].is_data_line())<sp/>result.MqL1_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][41][1]);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][42].is_data_line())<sp/>result.MqL2_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][42][1]);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][43].is_data_line())<sp/>result.MqL3_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][43][1]);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][44].is_data_line())<sp/>result.MuR_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][44][1]);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][45].is_data_line())<sp/>result.McR_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][45][1]);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][46].is_data_line())<sp/>result.MtR_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][46][1]);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][47].is_data_line())<sp/>result.MdR_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][47][1]);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][48].is_data_line())<sp/>result.MsR_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][48][1]);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][49].is_data_line())<sp/>result.MbR_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][49][1]);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][51].is_data_line())<sp/>result.N51=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][51][1]);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][52].is_data_line())<sp/>result.N52=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][52][1]);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][53].is_data_line())<sp/>result.N53=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][53][1]);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][61].is_data_line())<sp/>result.lambdaNMSSM_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][61][1]);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][62].is_data_line())<sp/>result.kappaNMSSM_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][62][1]);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][63].is_data_line())<sp/>result.AlambdaNMSSM_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][63][1]);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][64].is_data_line())<sp/>result.AkappaNMSSM_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][64][1]);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][65].is_data_line())<sp/>result.lambdaSNMSSM_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][65][1]);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][66].is_data_line())<sp/>result.xiFNMSSM_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][66][1]);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][67].is_data_line())<sp/>result.xiSNMSSM_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][67][1]);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][68].is_data_line())<sp/>result.mupNMSSM_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][68][1]);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][69].is_data_line())<sp/>result.mSp2NMSSM_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][69][1]);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][70].is_data_line())<sp/>result.mS2NMSSM_Min=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;EXTPAR&quot;</highlight><highlight class="normal">][70][1]);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">].empty())</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1].is_data_line())<sp/>result.mass_d=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1][1]);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2].is_data_line())<sp/>result.mass_u=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2][1]);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][3].is_data_line())<sp/>result.mass_s=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][3][1]);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][4].is_data_line())<sp/>result.mass_c_pole=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][4][1]);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][6].is_data_line())<sp/>result.mass_t=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][6][1]);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][11].is_data_line())<sp/>result.mass_e=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][11][1]);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][12].is_data_line())<sp/>result.mass_nue=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][12][1]);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][13].is_data_line())<sp/>result.mass_mu=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][13][1]);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][14].is_data_line())<sp/>result.mass_num=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][14][1]);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][15].is_data_line())<sp/>result.mass_tau=result.mass_tau_pole=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][15][1]);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][16].is_data_line())<sp/>result.mass_nut=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][16][1]);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][21].is_data_line())<sp/>result.mass_gluon=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][21][1]);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][22].is_data_line())<sp/>result.mass_photon=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][22][1]);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][23].is_data_line())<sp/>result.mass_Z0=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][23][1]);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][24].is_data_line())<sp/>result.mass_W=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][24][1]);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][25].is_data_line())<sp/>result.mass_h0=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][25][1]);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][35].is_data_line())<sp/>result.mass_H0=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][35][1]);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][36].is_data_line())<sp/>result.mass_A0=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][36][1]);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][37].is_data_line())<sp/>result.mass_H=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][37][1]);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][39].is_data_line())<sp/>result.mass_graviton=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][39][1]);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][45].is_data_line())<sp/>result.mass_H03=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][45][1]);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][46].is_data_line())<sp/>result.mass_A02=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][46][1]);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000001].is_data_line())<sp/>result.mass_dnl=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000001][1]);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000002].is_data_line())<sp/>result.mass_upl=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000002][1]);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000003].is_data_line())<sp/>result.mass_stl=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000003][1]);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000004].is_data_line())<sp/>result.mass_chl=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000004][1]);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000005].is_data_line())<sp/>result.mass_b1=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000005][1]);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000006].is_data_line())<sp/>result.mass_t1=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000006][1]);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000011].is_data_line())<sp/>result.mass_el=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000011][1]);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000012].is_data_line())<sp/>result.mass_nuel=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000012][1]);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000013].is_data_line())<sp/>result.mass_mul=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000013][1]);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000014].is_data_line())<sp/>result.mass_numl=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000014][1]);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000015].is_data_line())<sp/>result.mass_tau1=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000015][1]);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000016].is_data_line())<sp/>result.mass_nutl=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000016][1]);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000021].is_data_line())<sp/>result.mass_gluino=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000021][1]);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000022].is_data_line())<sp/>result.mass_neut[1]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000022][1]);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000023].is_data_line())<sp/>result.mass_neut[2]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000023][1]);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000024].is_data_line())<sp/>result.mass_cha1=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000024][1]);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000025].is_data_line())<sp/>result.mass_neut[3]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000025][1]);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000035].is_data_line())<sp/>result.mass_neut[4]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000035][1]);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000037].is_data_line())<sp/>result.mass_cha2=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000037][1]);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000039].is_data_line())<sp/>result.mass_gravitino=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000039][1]);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000045].is_data_line())<sp/>result.mass_neut[5]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][1000045][1]);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000001].is_data_line())<sp/>result.mass_dnr=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000001][1]);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000002].is_data_line())<sp/>result.mass_upr=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000002][1]);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000003].is_data_line())<sp/>result.mass_str=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000003][1]);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000004].is_data_line())<sp/>result.mass_chr=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000004][1]);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000005].is_data_line())<sp/>result.mass_b2=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000005][1]);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000006].is_data_line())<sp/>result.mass_t2=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000006][1]);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000011].is_data_line())<sp/>result.mass_er=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000011][1]);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000012].is_data_line())<sp/>result.mass_nuer=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000012][1]);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000013].is_data_line())<sp/>result.mass_mur=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000013][1]);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000014].is_data_line())<sp/>result.mass_numr=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000014][1]);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000015].is_data_line())<sp/>result.mass_tau2=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000015][1]);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000016].is_data_line())<sp/>result.mass_nutr=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">][2000016][1]);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>blocks<sp/>will<sp/>only<sp/>appear<sp/>for<sp/>SUSY<sp/>models<sp/>so<sp/>let&apos;s<sp/>not<sp/>waste<sp/>time<sp/>checking<sp/>them<sp/>if<sp/>we&apos;re<sp/>not<sp/>scanning<sp/>one<sp/>of<sp/>those.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ModelInUse(</highlight><highlight class="stringliteral">&quot;MSSM63atMGUT&quot;</highlight><highlight class="normal">)<sp/>or<sp/>ModelInUse(</highlight><highlight class="stringliteral">&quot;MSSM63atQ&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>scale<sp/>doesn&apos;t<sp/>come<sp/>through<sp/>in<sp/>MODSEL<sp/>with<sp/>all<sp/>spectrum<sp/>generators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Q<sp/>=<sp/>Dep::MSSM_spectrum-&gt;get_HE().GetScale();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;ALPHA&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;ALPHA&quot;</highlight><highlight class="normal">].back().is_data_line())<sp/>result.alpha=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;ALPHA&quot;</highlight><highlight class="normal">].back().at(0));</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;STOPMIX&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=2;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=2;je++)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;STOPMIX&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.stop_mix[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;STOPMIX&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;SBOTMIX&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=2;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=2;je++)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;SBOTMIX&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.sbot_mix[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;SBOTMIX&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;STAUMIX&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=2;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=2;je++)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;STAUMIX&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.stau_mix[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;STAUMIX&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;NMIX&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=4;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=4;je++)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;NMIX&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.neut_mix[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;NMIX&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;NMNMIX&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=5;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=5;je++)</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;NMNMIX&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.neut_mix[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;NMNMIX&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;UMIX&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=2;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=2;je++)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;UMIX&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.charg_Umix[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;UMIX&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;VMIX&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=2;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=2;je++)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;VMIX&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.charg_Vmix[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;VMIX&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;GAUGE&quot;</highlight><highlight class="normal">].empty())</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;GAUGE&quot;</highlight><highlight class="normal">][1].is_data_line())<sp/>result.gp_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;GAUGE&quot;</highlight><highlight class="normal">][1][1]);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;GAUGE&quot;</highlight><highlight class="normal">][2].is_data_line())<sp/>result.g2_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;GAUGE&quot;</highlight><highlight class="normal">][2][1]);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;GAUGE&quot;</highlight><highlight class="normal">][3].is_data_line())<sp/>result.g3_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;GAUGE&quot;</highlight><highlight class="normal">][3][1]);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;YU&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=3;ie++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;YU&quot;</highlight><highlight class="normal">][ie].is_data_line())<sp/>result.yut[ie]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;YU&quot;</highlight><highlight class="normal">].at(ie,ie)[2]);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;YD&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=3;ie++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;YD&quot;</highlight><highlight class="normal">][ie].is_data_line())<sp/>result.yub[ie]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;YD&quot;</highlight><highlight class="normal">].at(ie,ie)[2]);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;YE&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=3;ie++)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;YE&quot;</highlight><highlight class="normal">][ie].is_data_line())<sp/>result.yutau[ie]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;YE&quot;</highlight><highlight class="normal">].at(ie,ie)[2]);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;HMIX&quot;</highlight><highlight class="normal">].empty())</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;HMIX&quot;</highlight><highlight class="normal">][1].is_data_line())<sp/>result.mu_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;HMIX&quot;</highlight><highlight class="normal">][1][1]);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;HMIX&quot;</highlight><highlight class="normal">][2].is_data_line())<sp/>result.tanb_GUT=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;HMIX&quot;</highlight><highlight class="normal">][2][1]);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;HMIX&quot;</highlight><highlight class="normal">][3].is_data_line())<sp/>result.Higgs_VEV=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;HMIX&quot;</highlight><highlight class="normal">][3][1]);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;HMIX&quot;</highlight><highlight class="normal">][4].is_data_line())<sp/>result.mA2_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;HMIX&quot;</highlight><highlight class="normal">][4][1]);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;NMHMIX&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=3;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=3;je++)</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;NMHMIX&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.H0_mix[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;NMHMIX&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;NMAMIX&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=2;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=2;je++)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;NMAMIX&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.A0_mix[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;NMAMIX&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">].empty())</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">].front().empty())<sp/>result.MSOFT_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">].front().at(3));</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][1].is_data_line())<sp/>result.M1_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][1][1]);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][2].is_data_line())<sp/>result.M2_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][2][1]);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][3].is_data_line())<sp/>result.M3_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][3][1]);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][21].is_data_line())<sp/>result.M2H1_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][21][1]);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][22].is_data_line())<sp/>result.M2H2_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][22][1]);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][31].is_data_line())<sp/>result.MeL_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][31][1]);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][32].is_data_line())<sp/>result.MmuL_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][32][1]);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][33].is_data_line())<sp/>result.MtauL_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][33][1]);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][34].is_data_line())<sp/>result.MeR_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][34][1]);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][35].is_data_line())<sp/>result.MmuR_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][35][1]);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][36].is_data_line())<sp/>result.MtauR_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][36][1]);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][41].is_data_line())<sp/>result.MqL1_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][41][1]);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][42].is_data_line())<sp/>result.MqL2_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][42][1]);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][43].is_data_line())<sp/>result.MqL3_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][43][1]);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][44].is_data_line())<sp/>result.MuR_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][44][1]);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][45].is_data_line())<sp/>result.McR_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][45][1]);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][46].is_data_line())<sp/>result.MtR_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][46][1]);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][47].is_data_line())<sp/>result.MdR_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][47][1]);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][48].is_data_line())<sp/>result.MsR_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][48][1]);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][49].is_data_line())<sp/>result.MbR_Q=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSOFT&quot;</highlight><highlight class="normal">][49][1]);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;AU&quot;</highlight><highlight class="normal">].empty())</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;AU&quot;</highlight><highlight class="normal">][1].is_data_line())<sp/>result.A_u=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;AU&quot;</highlight><highlight class="normal">].at(1,1)[2]);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;AU&quot;</highlight><highlight class="normal">][2].is_data_line())<sp/>result.A_c=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;AU&quot;</highlight><highlight class="normal">].at(2,2)[2]);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;AU&quot;</highlight><highlight class="normal">][3].is_data_line())<sp/>result.A_t=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;AU&quot;</highlight><highlight class="normal">].at(3,3)[2]);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;AD&quot;</highlight><highlight class="normal">].empty())</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;AD&quot;</highlight><highlight class="normal">][1].is_data_line())<sp/>result.A_d=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;AD&quot;</highlight><highlight class="normal">].at(1,1)[2]);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;AD&quot;</highlight><highlight class="normal">][2].is_data_line())<sp/>result.A_s=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;AD&quot;</highlight><highlight class="normal">].at(2,2)[2]);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;AD&quot;</highlight><highlight class="normal">][3].is_data_line())<sp/>result.A_b=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;AD&quot;</highlight><highlight class="normal">].at(3,3)[2]);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;AE&quot;</highlight><highlight class="normal">].empty())</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;AE&quot;</highlight><highlight class="normal">][1].is_data_line())<sp/>result.A_e=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;AE&quot;</highlight><highlight class="normal">].at(1,1)[2]);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;AE&quot;</highlight><highlight class="normal">][2].is_data_line())<sp/>result.A_mu=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;AE&quot;</highlight><highlight class="normal">].at(2,2)[2]);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;AE&quot;</highlight><highlight class="normal">][3].is_data_line())<sp/>result.A_tau=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;AE&quot;</highlight><highlight class="normal">].at(3,3)[2]);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">].empty())</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][1].is_data_line())<sp/>result.lambdaNMSSM=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][1][1]);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][2].is_data_line())<sp/>result.kappaNMSSM=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][2][1]);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][3].is_data_line())<sp/>result.AlambdaNMSSM=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][3][1]);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][4].is_data_line())<sp/>result.AkappaNMSSM=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][4][1]);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][5].is_data_line())<sp/>result.lambdaSNMSSM=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][5][1]);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][6].is_data_line())<sp/>result.xiFNMSSM=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][6][1]);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][7].is_data_line())<sp/>result.xiSNMSSM=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][7][1]);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][8].is_data_line())<sp/>result.mupNMSSM=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][8][1]);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][9].is_data_line())<sp/>result.mSp2NMSSM=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][9][1]);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][10].is_data_line())<sp/>result.mS2NMSSM=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;NMSSMRUN&quot;</highlight><highlight class="normal">][10][1]);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;USQMIX&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=6;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=6;je++)</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;USQMIX&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.sU_mix[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;USQMIX&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;DSQMIX&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=6;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=6;je++)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;DSQMIX&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.sD_mix[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;DSQMIX&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;SELMIX&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=6;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=6;je++)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;SELMIX&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.sE_mix[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;SELMIX&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;SNUMIX&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=3;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=3;je++)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;SNUMIX&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.sNU_mix[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;SNUMIX&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;MSQ2&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=3;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=3;je++)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSQ2&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.sCKM_msq2[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSQ2&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;MSL2&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=3;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=3;je++)</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSL2&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.sCKM_msl2[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSL2&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;MSD2&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=3;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=3;je++)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSD2&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.sCKM_msd2[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSD2&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;MSU2&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=3;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=3;je++)</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSU2&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.sCKM_msu2[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSU2&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;MSE2&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=3;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=3;je++)</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;MSE2&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.sCKM_mse2[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;MSE2&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;IMVCKM&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=3;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=3;je++)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;IMVCKM&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.IMCKM[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;IMVCKM&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;IMVCKM&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=3;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=3;je++)</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;IMVCKM&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.IMCKM[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;IMVCKM&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;UPMNS&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=3;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=3;je++)</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;UPMNS&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.PMNS_U[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;UPMNS&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;TU&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=3;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=3;je++)</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;TU&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.TU[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;TU&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;TD&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=3;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=3;je++)</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;TD&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.TD[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;TD&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!spectrum[</highlight><highlight class="stringliteral">&quot;TE&quot;</highlight><highlight class="normal">].empty())<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ie=1;ie&lt;=3;ie++)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(je=1;je&lt;=3;je++)</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spectrum[</highlight><highlight class="stringliteral">&quot;TE&quot;</highlight><highlight class="normal">][max(ie,je)].is_data_line())<sp/>result.TE[ie][je]=SLHAea::to&lt;double&gt;(spectrum[</highlight><highlight class="stringliteral">&quot;TE&quot;</highlight><highlight class="normal">].at(ie,je)[2]);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ModelInUse(</highlight><highlight class="stringliteral">&quot;WC&quot;</highlight><highlight class="normal">)<sp/><sp/>||<sp/>ModelInUse(</highlight><highlight class="stringliteral">&quot;WC_LR&quot;</highlight><highlight class="normal">)<sp/>||<sp/>ModelInUse(</highlight><highlight class="stringliteral">&quot;WC_LUV&quot;</highlight><highlight class="normal">)<sp/>)</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>Higgs<sp/>mass<sp/>doesn&apos;t<sp/>come<sp/>through<sp/>in<sp/>the<sp/>SLHAea<sp/>object,<sp/>as<sp/>that&apos;s<sp/>only<sp/>for<sp/>SLHA2<sp/>SM<sp/>inputs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.mass_h0<sp/>=<sp/>Dep::SM_spectrum-&gt;get(Par::Pole_Mass,<sp/></highlight><highlight class="stringliteral">&quot;h0_1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>scale.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Q<sp/>=<sp/>result.mass_Z;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(byVal(result.mass_c_pole)&gt;0.&amp;&amp;byVal(result.scheme_c_mass)&lt;0)</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(byVal(result.mass_c_pole)&lt;1.5)<sp/>result.mass_c=BEreq::mcmc_from_pole(byVal(result.mass_c_pole),1,&amp;result);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(byVal(result.mass_c_pole)&lt;1.75)<sp/>result.mass_c=BEreq::mcmc_from_pole(byVal(result.mass_c_pole),2,&amp;result);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>result.mass_c=BEreq::mcmc_from_pole(byVal(result.mass_c_pole),3,&amp;result);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BEreq::slha_adjust(&amp;result);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>Z<sp/>and<sp/>W<sp/>widths</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.width_Z<sp/>=<sp/>Dep::Z_decay_rates-&gt;width_in_GeV;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result.width_W<sp/>=<sp/>Dep::W_plus_decay_rates-&gt;width_in_GeV;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ie=1;ie&lt;=30;ie++)<sp/>result.deltaC[ie]=result.deltaCp[ie]=0.;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ie=1;ie&lt;=6;ie++)<sp/>result.deltaCQ[ie]=result.deltaCQp[ie]=0.;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>requested,<sp/>override<sp/>the<sp/>SuperIso<sp/>b<sp/>pole<sp/>mass<sp/>with<sp/>the<sp/>SpecBit<sp/>value<sp/>and<sp/>recompute<sp/>the<sp/>1S<sp/>b<sp/>mass.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(runOptions-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;take_b_pole_mass_from_spectrum&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ModelInUse(</highlight><highlight class="stringliteral">&quot;MSSM63atMGUT&quot;</highlight><highlight class="normal">)<sp/>or<sp/>ModelInUse(</highlight><highlight class="stringliteral">&quot;MSSM63atQ&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.mass_h0<sp/>=<sp/>Dep::MSSM_spectrum-&gt;get(Par::Pole_Mass,<sp/></highlight><highlight class="stringliteral">&quot;h0_1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ModelInUse(</highlight><highlight class="stringliteral">&quot;WC&quot;</highlight><highlight class="normal">)<sp/>||<sp/>ModelInUse(</highlight><highlight class="stringliteral">&quot;WC_LUV&quot;</highlight><highlight class="normal">)<sp/>||<sp/>ModelInUse(</highlight><highlight class="stringliteral">&quot;WC_LR&quot;</highlight><highlight class="normal">)<sp/>)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.mass_h0<sp/>=<sp/>Dep::SM_spectrum-&gt;get(Par::Pole_Mass,<sp/></highlight><highlight class="stringliteral">&quot;h0_1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.mass_b_1S<sp/>=<sp/>BEreq::mb_1S(&amp;result);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ModelInUse(</highlight><highlight class="stringliteral">&quot;WC&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tell<sp/>SuperIso<sp/>to<sp/>do<sp/>its<sp/>Wilson<sp/>coefficient<sp/>calculations<sp/>for<sp/>the<sp/>SM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>adjust<sp/>them<sp/>with<sp/>our<sp/>BSM<sp/>deviations<sp/>in<sp/>backend<sp/>convenience</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>functions<sp/>before<sp/>we<sp/>send<sp/>them<sp/>to<sp/>SuperIso&apos;s<sp/>observable<sp/>calculation<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.SM<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So<sp/>far<sp/>our<sp/>model<sp/>only<sp/>deals<sp/>with<sp/>5<sp/>operators:<sp/>O_7,<sp/>O_9,<sp/>O_10,<sp/>Q_1<sp/>and<sp/>Q_2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaC7<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaC7&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaC7<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaC7&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaC9<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaC9&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaC9<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaC9&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaC10<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaC10&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaC10<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaC10&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaCQ1<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaCQ1&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaCQ1<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaCQ1&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaCQ2<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaCQ2&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaCQ2<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaCQ2&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Lines<sp/>below<sp/>are<sp/>valid<sp/>only<sp/>in<sp/>the<sp/>flavour<sp/>universal<sp/>case</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaC[1..10]<sp/>=<sp/>Cmu[1..10],<sp/>deltaC[11..20]<sp/>=<sp/>Ce[1..10],<sp/>deltaC[21..30]<sp/>=<sp/>Ctau[1..10]</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaCQ[1,2]<sp/>=<sp/>CQmu[1,2],<sp/>deltaCQ[1,2]<sp/>=<sp/>CQe[1,2],<sp/>deltaCQ[1,2]<sp/>=<sp/>CQtau[1,2]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaC[7]=result.deltaC[17]=result.deltaC[27]=std::complex&lt;double&gt;(result.Re_DeltaC7,<sp/>result.Im_DeltaC7);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaC[9]=result.deltaC[19]=result.deltaC[29]=std::complex&lt;double&gt;(result.Re_DeltaC9,<sp/>result.Im_DeltaC9);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaC[10]=result.deltaC[20]=result.deltaC[30]=std::complex&lt;double&gt;(result.Re_DeltaC10,<sp/>result.Im_DeltaC10);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaCQ[1]=result.deltaCQ[3]=result.deltaCQ[5]=std::complex&lt;double&gt;(result.Re_DeltaCQ1,<sp/>result.Im_DeltaCQ1);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaCQ[2]=result.deltaCQ[4]=result.deltaCQ[6]=std::complex&lt;double&gt;(result.Re_DeltaCQ2,<sp/>result.Im_DeltaCQ2);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ModelInUse(</highlight><highlight class="stringliteral">&quot;WC_LR&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.SM<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaC7<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaC7&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaC7<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaC7&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaC9<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaC9&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaC9<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaC9&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaC10<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaC10&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaC10<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaC10&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaCQ1<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaCQ1&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaCQ1<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaCQ1&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaCQ2<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaCQ2&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaCQ2<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaCQ2&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaC7_Prime<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaC7_Prime&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaC7_Prime<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaC7_Prime&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaC9_Prime<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaC9_Prime&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaC9_Prime<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaC9_Prime&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaC10_Prime<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaC10_Prime&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaC10_Prime<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaC10_Prime&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaCQ1_Prime<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaCQ1_Prime&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaCQ1_Prime<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaCQ1_Prime&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaCQ2_Prime<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaCQ2_Prime&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaCQ2_Prime<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaCQ2_Prime&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>left<sp/>handed:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaC[7]=result.deltaC[17]=result.deltaC[27]=std::complex&lt;double&gt;(result.Re_DeltaC7,<sp/>result.Im_DeltaC7);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaC[9]=result.deltaC[19]=result.deltaC[29]=std::complex&lt;double&gt;(result.Re_DeltaC9,<sp/>result.Im_DeltaC9);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaC[10]=result.deltaC[20]=result.deltaC[30]=std::complex&lt;double&gt;(result.Re_DeltaC10,<sp/>result.Im_DeltaC10);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaCQ[1]=result.deltaCQ[3]=result.deltaCQ[5]=std::complex&lt;double&gt;(result.Re_DeltaCQ1,<sp/>result.Im_DeltaCQ1);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaCQ[2]=result.deltaCQ[4]=result.deltaCQ[6]=std::complex&lt;double&gt;(result.Re_DeltaCQ2,<sp/>result.Im_DeltaCQ2);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>right<sp/>handed:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaCp[7]=result.deltaCp[17]=result.deltaCp[27]=std::complex&lt;double&gt;(result.Re_DeltaC7_Prime,<sp/>result.Im_DeltaC7_Prime);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaCp[9]=result.deltaCp[19]=result.deltaCp[29]=std::complex&lt;double&gt;(result.Re_DeltaC9_Prime,<sp/>result.Im_DeltaC9_Prime);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaCp[10]=result.deltaCp[20]=result.deltaCp[30]=std::complex&lt;double&gt;(result.Re_DeltaC10_Prime,<sp/>result.Im_DeltaC10_Prime);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaCQp[1]=result.deltaCQp[3]=result.deltaCQp[5]=std::complex&lt;double&gt;(result.Re_DeltaCQ1_Prime,<sp/>result.Im_DeltaCQ1_Prime);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaCQp[2]=result.deltaCQp[4]=result.deltaCQp[6]=std::complex&lt;double&gt;(result.Re_DeltaCQ2_Prime,<sp/>result.Im_DeltaCQ2_Prime);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ModelInUse(</highlight><highlight class="stringliteral">&quot;WC_LUV&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.SM<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So<sp/>far<sp/>our<sp/>model<sp/>only<sp/>deals<sp/>with<sp/>5<sp/>operators:<sp/>O_7,<sp/>O_9,<sp/>O_10,<sp/>Q_1<sp/>and<sp/>Q_2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaC7_mu<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaC7_mu&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaC7_mu<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaC7_mu&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaC9_mu<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaC9_mu&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaC9_mu<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaC9_mu&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaC10_mu<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaC10_mu&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaC10_mu<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaC10_mu&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaCQ1_mu<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaCQ1_mu&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaCQ1_mu<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaCQ1_mu&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaCQ2_mu<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaCQ2_mu&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaCQ2_mu<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaCQ2_mu&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaC7_e<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaC7_e&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaC7_e<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaC7_e&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaC9_e<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaC9_e&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaC9_e<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaC9_e&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaC10_e<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaC10_e&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaC10_e<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaC10_e&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaCQ1_e<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaCQ1_e&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaCQ1_e<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaCQ1_e&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaCQ2_e<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaCQ2_e&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaCQ2_e<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaCQ2_e&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaC7_tau<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaC7_tau&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaC7_tau<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaC7_tau&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaC9_tau<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaC9_tau&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaC9_tau<sp/><sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaC9_tau&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaC10_tau<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaC10_tau&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaC10_tau<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaC10_tau&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaCQ1_tau<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaCQ1_tau&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaCQ1_tau<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaCQ1_tau&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Re_DeltaCQ2_tau<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Re_DeltaCQ2_tau&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.Im_DeltaCQ2_tau<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;Im_DeltaCQ2_tau&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Lines<sp/>below<sp/>are<sp/>valid<sp/>in<sp/>the<sp/>flavour<sp/>NON-universal<sp/>case</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaC[1..10]<sp/>=<sp/>Cmu[1..10],<sp/>deltaC[11..20]<sp/>=<sp/>Ce[1..10],<sp/>deltaC[21..30]<sp/>=<sp/>Ctau[1..10]</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaCQ[1,2]<sp/>=<sp/>CQmu[1,2],<sp/>deltaCQ[1,2]<sp/>=<sp/>CQe[1,2],<sp/>deltaCQ[1,2]<sp/>=<sp/>CQtau[1,2]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaC[7]=std::complex&lt;double&gt;(result.Re_DeltaC7_mu,<sp/>result.Im_DeltaC7_mu);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaC[9]=std::complex&lt;double&gt;(result.Re_DeltaC9_mu,<sp/>result.Im_DeltaC9_mu);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaC[10]=std::complex&lt;double&gt;(result.Re_DeltaC10_mu,<sp/>result.Im_DeltaC10_mu);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaCQ[1]=std::complex&lt;double&gt;(result.Re_DeltaCQ1_mu,<sp/>result.Im_DeltaCQ1_mu);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaCQ[2]=std::complex&lt;double&gt;(result.Re_DeltaCQ2_mu,<sp/>result.Im_DeltaCQ2_mu);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaC[17]=std::complex&lt;double&gt;(result.Re_DeltaC7_e,<sp/>result.Im_DeltaC7_e);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaC[19]=std::complex&lt;double&gt;(result.Re_DeltaC9_e,<sp/>result.Im_DeltaC9_e);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaC[20]=std::complex&lt;double&gt;(result.Re_DeltaC10_e,<sp/>result.Im_DeltaC10_e);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaCQ[3]=std::complex&lt;double&gt;(result.Re_DeltaCQ1_e,<sp/>result.Im_DeltaCQ1_e);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaCQ[4]=std::complex&lt;double&gt;(result.Re_DeltaCQ2_e,<sp/>result.Im_DeltaCQ2_e);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaC[27]=std::complex&lt;double&gt;(result.Re_DeltaC7_tau,<sp/>result.Im_DeltaC7_tau);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaC[29]=std::complex&lt;double&gt;(result.Re_DeltaC9_tau,<sp/>result.Im_DeltaC9_tau);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaC[30]=std::complex&lt;double&gt;(result.Re_DeltaC10_tau,<sp/>result.Im_DeltaC10_tau);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaCQ[5]=std::complex&lt;double&gt;(result.Re_DeltaCQ1_tau,<sp/>result.Im_DeltaCQ1_tau);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.deltaCQ[6]=std::complex&lt;double&gt;(result.Re_DeltaCQ2_tau,<sp/>result.Im_DeltaCQ2_tau);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_fill&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1af2e3bab53c876311e14c2f119ec27241" kindref="member">SuperIso_nuisance_fill</ref>(nuisance<sp/>&amp;nuislist)</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_nuisance_fill;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_nuisance_fill&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>*Dep::SuperIso_modelinfo;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BEreq::set_nuisance(&amp;nuislist);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BEreq::set_nuisance_value_from_param(&amp;nuislist,&amp;param);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Here<sp/>the<sp/>nuisance<sp/>parameters<sp/>which<sp/>should<sp/>not<sp/>be<sp/>used<sp/>for<sp/>the<sp/>correlation<sp/>calculation<sp/>have<sp/>to<sp/>be<sp/>given<sp/>a<sp/>zero<sp/>standard<sp/>deviation.</highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E.g.<sp/>nuislist.mass_b.dev=0.;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_nuisance_fill&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a077c03b8cc0f7c72c3200af23d7b8a01" kindref="member">update_obs_list</ref>(std::vector&lt;str&gt;&amp;<sp/>obs_list,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;str&gt;&amp;<sp/>HL_obs_list)</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;str&gt;<sp/>FB_obs_list<sp/>=<sp/><ref refid="FlavBit_8cpp_1ab1adbedd60304b6743bdd3a4eb2771d6" kindref="member">translate_flav_obs</ref>(</highlight><highlight class="stringliteral">&quot;HEPLike&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;FlavBit&quot;</highlight><highlight class="normal">,<sp/>HL_obs_list);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;str&gt;<sp/>temp;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>FB_obs_list.begin();<sp/>it<sp/>!=<sp/>FB_obs_list.end();<sp/>++it)</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::find(obs_list.begin(),<sp/>obs_list.end(),<sp/>*it)<sp/>!=<sp/>obs_list.end())</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.push_back(*it);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obs_list<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="FlavBit_8cpp_1abdc4be9b8587ab5c72de1612631c6a5b" kindref="member">get_obs_theory</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>flav_prediction&amp;<sp/>prediction,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>observables)</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flav_debug)<sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;In<sp/>get_obs_theory()<sp/>function&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>obs_theory;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>obs_theory.reserve(observables.size());</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>observables.size();<sp/>++i)</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flav_debug)<sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>find:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;observables[i]&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obs_theory.push_back(prediction.central_values.at(observables[i]));</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obs_theory;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::numeric::ublas::matrix&lt;double&gt;<sp/><ref refid="FlavBit_8cpp_1a0dcfa77d5d9a12e59e775bdeb1af7ffa" kindref="member">get_obs_covariance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>flav_prediction&amp;<sp/>prediction,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>observables)</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::numeric::ublas::matrix&lt;double&gt;<sp/>obs_covariance(observables.size(),<sp/>observables.size());</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>observables.size();<sp/>++i)</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>observables.size();<sp/>++j)</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obs_covariance(i,<sp/>j)<sp/>=<sp/>prediction.covariance.at(observables[i]).at(observables[j]);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obs_covariance;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a194b1905c8fb1c78ebba9b477f8c9f02" kindref="member">SuperIso_prediction_helper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>FB_obslist,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>SI_obslist,<sp/>flav_prediction&amp;<sp/>result,</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>parameters&amp;<sp/>param,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nuisance&amp;<sp/>nuislist,</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*get_predictions_nuisance)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>parameters*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nuisance*),</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*observables)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>obsname*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nuisance*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>parameters*),</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*convert_correlation)(nuiscorr*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*get_th_covariance_nuisance)(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">***,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>parameters*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nuisance*,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**),</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useSMCovariance,</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SMCovarianceCached</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_prediction&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Changing<sp/>convention.<sp/>Before:&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lep__mssm__xsecs_8hpp_1ad77ec694b2787bf548b6e9a9c62a259c" kindref="member">print</ref>(result,{</highlight><highlight class="stringliteral">&quot;S3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;S4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;S5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;S8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;S9&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AT_Im&quot;</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nObservables<sp/>=<sp/>SI_obslist.size();</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Observables:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>obsnames[nObservables][50];</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iObservable<sp/>=<sp/>0;<sp/>iObservable<sp/>&lt;<sp/>nObservables;<sp/>iObservable++)</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(obsnames[iObservable],<sp/>SI_obslist[iObservable].c_str());</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>flav_debug)<sp/>std::cout&lt;&lt;SI_obslist[iObservable].c_str()&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------<sp/>CENTRAL<sp/>VALUES<sp/>----------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*result_central;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reserve<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result_central<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>calloc(nObservables,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Needed<sp/>for<sp/>SuperIso<sp/>backend</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>get_predictions_nuisance((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)obsnames,<sp/>&amp;nObservables,<sp/>&amp;result_central,<sp/>&amp;param,<sp/>&amp;nuislist);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>central<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iObservable<sp/>=<sp/>0;<sp/>iObservable<sp/>&lt;<sp/>nObservables;<sp/>++iObservable)</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.central_values[FB_obslist[iObservable]]<sp/>=<sp/>result_central[iObservable];</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(result_central);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result_central<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iObservable<sp/>=<sp/>0;<sp/>iObservable<sp/>&lt;<sp/>nObservables;<sp/>++iObservable)</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s=%.4e\n&quot;</highlight><highlight class="normal">,<sp/>obsnames[iObservable],<sp/>result.central_values[FB_obslist[iObservable]]);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Switch<sp/>the<sp/>observables<sp/>to<sp/>LHCb<sp/>convention</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FlavBit_8cpp_1a474236e6968f23fbaa3d50b94ec789ff" kindref="member">Kstarll_Theory2Experiment_translation</ref>(result.central_values,<sp/>1);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FlavBit_8cpp_1a474236e6968f23fbaa3d50b94ec789ff" kindref="member">Kstarll_Theory2Experiment_translation</ref>(result.central_values,<sp/>2);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>need<sp/>to<sp/>compute<sp/>the<sp/>covariance,<sp/>either<sp/>because<sp/>we&apos;re<sp/>doing<sp/>it<sp/>for<sp/>every<sp/>point<sp/>or<sp/>we<sp/>haven&apos;t<sp/>cached<sp/>the<sp/>SM<sp/>value,<sp/>do<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>useSMCovariance<sp/>or<sp/>not<sp/>SMCovarianceCached)</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------<sp/>COVARIANCE<sp/>----------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNuisance=161;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>namenuisance[nNuisance+1][50];</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**corr=(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>**)<sp/>malloc((nNuisance+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*));<sp/><sp/></highlight><highlight class="comment">//<sp/>Nuisance<sp/>parameter<sp/>correlations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>observables(0,<sp/>NULL,<sp/>0,<sp/>NULL,<sp/>NULL,<sp/>&amp;nuislist,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)namenuisance,<sp/>&amp;param);<sp/></highlight><highlight class="comment">//<sp/>Initialization<sp/>of<sp/>namenuisance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reserve<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iObservable<sp/>=<sp/>0;<sp/>iObservable<sp/>&lt;=<sp/>nNuisance;<sp/>++iObservable)</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corr[iObservable]=(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)<sp/>malloc((nNuisance+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double));</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Needed<sp/>for<sp/>SuperIso<sp/>backend</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert_correlation((nuiscorr<sp/>*)corrnuis,<sp/>byVal(ncorrnuis),<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**)corr,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**)namenuisance,<sp/>byVal(nNuisance));</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**result_covariance;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useSMCovariance)</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>parameters<sp/>and<sp/>set<sp/>all<sp/>Wilson<sp/>Coefficients<sp/>to<sp/>0<sp/>(SM<sp/>values)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/>param_SM<sp/>=<sp/>param;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ie=1;ie&lt;=30;ie++)</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param_SM.deltaC[ie]=0.;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param_SM.deltaCp[ie]=0.;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ie=1;ie&lt;=6;ie++)</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param_SM.deltaCQ[ie]=0.;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param_SM.deltaCQp[ie]=0.;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>SM<sp/>values<sp/>of<sp/>the<sp/>parameters<sp/>to<sp/>calculate<sp/>the<sp/>SM<sp/>theory<sp/>covariance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_th_covariance_nuisance(&amp;result_covariance,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)obsnames,<sp/>&amp;nObservables,<sp/>&amp;param_SM,<sp/>&amp;nuislist,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**)corr);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>covariance<sp/>at<sp/>the<sp/>new<sp/>physics<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_th_covariance_nuisance(&amp;result_covariance,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)obsnames,<sp/>&amp;nObservables,<sp/>&amp;param,<sp/>&amp;nuislist,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**)corr);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>the<sp/>covariance<sp/>matrix<sp/>in<sp/>the<sp/>result<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iObservable=0;<sp/>iObservable<sp/>&lt;<sp/>nObservables;<sp/>++iObservable)</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jObservable<sp/>=<sp/>0;<sp/>jObservable<sp/>&lt;<sp/>nObservables;<sp/>++jObservable)</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.covariance[FB_obslist[iObservable]][FB_obslist[jObservable]]<sp/>=<sp/>result_covariance[iObservable][jObservable];</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Switch<sp/>the<sp/>covariances<sp/>to<sp/>LHCb<sp/>convention</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FlavBit_8cpp_1a474236e6968f23fbaa3d50b94ec789ff" kindref="member">Kstarll_Theory2Experiment_translation</ref>(result.covariance,<sp/>1);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FlavBit_8cpp_1a474236e6968f23fbaa3d50b94ec789ff" kindref="member">Kstarll_Theory2Experiment_translation</ref>(result.covariance,<sp/>2);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>not<sp/>freeing<sp/>the<sp/>memory<sp/>because<sp/>we<sp/>made<sp/>the<sp/>variable<sp/>static.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>keeping<sp/>this<sp/>for<sp/>reference<sp/>on<sp/>how<sp/>to<sp/>clean<sp/>up<sp/>the<sp/>allocated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>memory<sp/>in<sp/>case<sp/>of<sp/>non-static<sp/>calculation<sp/>of<sp/>**corr.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for(int<sp/>iObservable<sp/>=<sp/>0;<sp/>iObservable<sp/>&lt;=<sp/>nNuisance;<sp/>++iObservable)<sp/>free(corr[iObservable]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//free(corr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iObservable=0;<sp/>iObservable<sp/>&lt;<sp/>nObservables;<sp/>++iObservable)</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jObservable<sp/>=<sp/>iObservable;<sp/>jObservable<sp/>&lt;<sp/>nObservables;<sp/>++jObservable)</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Covariance<sp/>%s<sp/>-<sp/>%s:<sp/>%.4e\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obsnames[iObservable],<sp/>obsnames[jObservable],<sp/>result.covariance[FB_obslist[iObservable]][FB_obslist[jObservable]]);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Changing<sp/>convention.<sp/>After:&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lep__mssm__xsecs_8hpp_1ad77ec694b2787bf548b6e9a9c62a259c" kindref="member">print</ref>(result,{</highlight><highlight class="stringliteral">&quot;S3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;S4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;S5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;S8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;S9&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AT_Im&quot;</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_prediction&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>THE_REST(bins)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="970"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>std::vector&lt;str&gt;<sp/>SI_obslist<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="971"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>translate_flav_obs(&quot;FlavBit&quot;,<sp/>&quot;SuperIso&quot;,<sp/>FB_obslist,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="972"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Utils::p2dot(bins));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="973"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>use_SM_covariance<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="974"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runOptions-&gt;getValueOrDef&lt;bool&gt;(false,<sp/>&quot;use_SM_covariance&quot;);<sp/>\</highlight></codeline>
<codeline lineno="975"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>SM_covariance_cached<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="976"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SuperIso_prediction_helper(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="977"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FB_obslist,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="978"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SI_obslist,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="979"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="980"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::SuperIso_modelinfo,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="981"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::SuperIso_nuisance,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="982"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BEreq::get_predictions_nuisance.pointer(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="983"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BEreq::observables.pointer(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="984"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BEreq::convert_correlation.pointer(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="985"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BEreq::get_th_covariance_nuisance.pointer(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="986"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_SM_covariance,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="987"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SM_covariance_cached<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="988"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="989"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>SM_covariance_cached<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SI_SINGLE_PREDICTION_FUNCTION(name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="992"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>CAT(SuperIso_prediction_,name)(flav_prediction&amp;<sp/>result)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="993"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="994"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>CAT(Pipes::SuperIso_prediction_,name);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="995"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>std::vector&lt;str&gt;<sp/>FB_obslist<sp/>=<sp/>{#name};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="996"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>THE_REST(&quot;&quot;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="997"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="998"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SI_SINGLE_PREDICTION_FUNCTION_BINS(name,bins)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1000"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>CAT_3(SuperIso_prediction_,name,bins)(flav_prediction&amp;<sp/>result)<sp/><sp/>\</highlight></codeline>
<codeline lineno="1001"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1002"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>CAT_3(Pipes::SuperIso_prediction_,name,bins);<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1003"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>std::vector&lt;str&gt;<sp/>FB_obslist<sp/>=<sp/>{#name};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1004"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>THE_REST(#bins)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1005"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1006"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SI_MULTI_PREDICTION_FUNCTION(name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1008"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>CAT(SuperIso_prediction_,name)(flav_prediction&amp;<sp/>result)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1009"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1010"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>CAT(Pipes::SuperIso_prediction_,name);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1011"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>std::vector&lt;str&gt;<sp/>FB_obslist<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1012"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Downstream::subcaps-&gt;getNames();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1013"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(FB_obslist.empty())<sp/>FlavBit_error().raise(LOCAL_INFO,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1014"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Missing<sp/>subcapabilities<sp/>for<sp/>SuperIso_prediction_&quot;#name&quot;.&quot;);<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1015"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>THE_REST(&quot;&quot;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1016"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1017"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(name,bins,exp)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1019"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>CAT_4(SuperIso_prediction_,name,bins,exp)(flav_prediction&amp;<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1020"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>result)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1021"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1022"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>CAT_4(Pipes::SuperIso_prediction_,name,bins,exp);<sp/><sp/>\</highlight></codeline>
<codeline lineno="1023"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>std::vector&lt;str&gt;<sp/>FB_obslist<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1024"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Downstream::subcaps-&gt;getNames();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1025"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(FB_obslist.empty())<sp/>FlavBit_error().raise(LOCAL_INFO,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1026"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Missing<sp/>subcapabilities<sp/>for<sp/>SuperIso_prediction_&quot;#name&quot;.&quot;);<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1027"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>THE_REST(#bins)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1028"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1029"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION(B2taunu)</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION(b2sgamma)</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION(B2Kstargamma)</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION(BRBXsmumu_lowq2)</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION(BRBXsmumu_highq2)</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION(AFBBXsmumu_lowq2)</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION(AFBBXsmumu_highq2)</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION_BINS(Bs2phimumuBr,_1_6)</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION_BINS(Bs2phimumuBr,_15_19)</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION_BINS(B2KstarmumuBr,_0p1_0p98)</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION_BINS(B2KstarmumuBr,_1p1_2p5)</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION_BINS(B2KstarmumuBr,_2p5_4)</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION_BINS(B2KstarmumuBr,_4_6)</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION_BINS(B2KstarmumuBr,_6_8)</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION_BINS(B2KstarmumuBr,_15_19)</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION_BINS(B2KmumuBr,_0p05_2)</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION_BINS(B2KmumuBr,_2_4p3)</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION_BINS(B2KmumuBr,_4p3_8p68)</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION_BINS(B2KmumuBr,_14p18_16)</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION_BINS(B2KmumuBr,_16_18)</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_SINGLE_PREDICTION_FUNCTION_BINS(B2KmumuBr,_18_22)</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>these<sp/>should<sp/>be<sp/>re-activated<sp/>once<sp/>RK<sp/>and<sp/>RKstar<sp/>can<sp/>be<sp/>extracted<sp/>from<sp/>a<sp/>future<sp/>version<sp/>of<sp/>SuperIso<sp/>using<sp/>the<sp/>check_nameobs<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SI_SINGLE_PREDICTION_FUNCTION_BINS(RK_LHCb,_1p1_6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SI_SINGLE_PREDICTION_FUNCTION_BINS(RKstar_LHCb,_0p045_1p1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SI_SINGLE_PREDICTION_FUNCTION_BINS(RKstar_LHCb,_1p1_6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>sub-capabilities<sp/>that<sp/>may<sp/>be<sp/>received<sp/>from<sp/>likelihood<sp/>functions<sp/>in<sp/>order<sp/>to<sp/>feed<sp/>them<sp/>valid<sp/>observables<sp/>are<sp/>listed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>below.<sp/>In<sp/>principle<sp/>though,<sp/>these<sp/>functions<sp/>will<sp/>accept<sp/>as<sp/>sub-capabilities<sp/>*any*<sp/>recognised<sp/>SuperIso<sp/>observable<sp/>names.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>recognised<sp/>observable<sp/>names<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>check_nameobs<sp/>function<sp/>in<sp/>src/chi2.c<sp/>in<sp/>SuperIso.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION(B2mumu)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>BRuntag_Bsmumu,<sp/>BR_Bdmumu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SI_MULTI_PREDICTION_FUNCTION(RDRDstar)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>TODO:<sp/>Typical<sp/>subcaps:<sp/>RD,<sp/>RDstar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_0p1_2,_Atlas)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>FL,<sp/>S3,<sp/>S4,<sp/>S5,<sp/>S7,<sp/>S8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_2_4,_Atlas)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>FL,<sp/>S3,<sp/>S4,<sp/>S5,<sp/>S7,<sp/>S8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_4_8,_Atlas)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>FL,<sp/>S3,<sp/>S4,<sp/>S5,<sp/>S7,<sp/>S8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_1_2,_CMS)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>P1,<sp/>P5prime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_2_4p3,_CMS)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>P1,<sp/>P5prime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_4p3_6,_CMS)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>P1,<sp/>P5prime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_6_8p68,_CMS)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>P1,<sp/>P5prime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_10p09_12p86,_CMS)<sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>P1,<sp/>P5prime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_14p18_16,_CMS)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>P1,<sp/>P5prime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_16_19,_CMS)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>P1,<sp/>P5prime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_0p1_4,_Belle)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>P4prime,<sp/>P5prime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_4_8,_Belle)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>P4prime,<sp/>P5prime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_10p9_12p9,_Belle)<sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>P4prime,<sp/>P5prime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_14p18_19,_Belle)<sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>P4prime,<sp/>P5prime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_0p1_0p98,_LHCb)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>FL,<sp/>AFB,<sp/>S3,<sp/>S4,<sp/>S5,<sp/>S7,<sp/>S8,<sp/>S9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_1p1_2p5,_LHCb)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>FL,<sp/>AFB,<sp/>S3,<sp/>S4,<sp/>S5,<sp/>S7,<sp/>S8,<sp/>S9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_2p5_4,_LHCb)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>FL,<sp/>AFB,<sp/>S3,<sp/>S4,<sp/>S5,<sp/>S7,<sp/>S8,<sp/>S9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_4_6,_LHCb)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>FL,<sp/>AFB,<sp/>S3,<sp/>S4,<sp/>S5,<sp/>S7,<sp/>S8,<sp/>S9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_6_8,_LHCb)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>FL,<sp/>AFB,<sp/>S3,<sp/>S4,<sp/>S5,<sp/>S7,<sp/>S8,<sp/>S9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstarmumuAng,_15_19,_LHCb)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>FL,<sp/>AFB,<sp/>S3,<sp/>S4,<sp/>S5,<sp/>S7,<sp/>S8,<sp/>S9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>SI_MULTI_PREDICTION_FUNCTION_BINS(B2KstareeAng,_0p0008_0p257,_LHCb)<sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>subcaps:<sp/>FLee,<sp/>AT_Re,<sp/>AT_2,<sp/>AT_Im</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>SI_PRED_HELPER_CALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>SI_SINGLE_PREDICTION_FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>SI_SINGLE_PREDICTION_FUNCTION_BINS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>SI_MULTI_PREDICTION_FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>SI_MULTI_PREDICTION_FUNCTION_BINS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a0bf6ac1b44b60c529de2d4790049469d" kindref="member">SuperIso_prediction_Btaunu</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_prediction_Btaunu;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_prediction_Btaunu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>*Dep::SuperIso_modelinfo;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>BEreq::Btaunu(&amp;param);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>printf(</highlight><highlight class="stringliteral">&quot;BR(B-&gt;tau<sp/>nu)=%.3e\n&quot;</highlight><highlight class="normal">,result);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_prediction_Btaunu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1aa3f98ed5b0107a7bfb237417b7caa994" kindref="member">SuperIso_prediction_Dstaunu</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_prediction_Dstaunu;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_prediction_Dstaunu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>*Dep::SuperIso_modelinfo;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>BEreq::Dstaunu(&amp;param);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>printf(</highlight><highlight class="stringliteral">&quot;BR(Ds-&gt;tau<sp/>nu)=%.3e\n&quot;</highlight><highlight class="normal">,result);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_prediction_Dstaunu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1aa367208f57b43543a79b2e9de54a22f5" kindref="member">SuperIso_prediction_Dsmunu</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_prediction_Dsmunu;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_prediction_Dsmunu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>*Dep::SuperIso_modelinfo;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>BEreq::Dsmunu(&amp;param);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>printf(</highlight><highlight class="stringliteral">&quot;BR(Ds-&gt;mu<sp/>nu)=%.3e\n&quot;</highlight><highlight class="normal">,result);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_prediction_Dsmunu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a3c6d60fb81a0e315c589f0e4204f3df5" kindref="member">SuperIso_prediction_Dmunu</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_prediction_Dmunu;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_prediction_Dmunu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>*Dep::SuperIso_modelinfo;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>BEreq::Dmunu(&amp;param);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>printf(</highlight><highlight class="stringliteral">&quot;BR(D-&gt;mu<sp/>nu)=%.3e\n&quot;</highlight><highlight class="normal">,result);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_prediction_Dmunu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a1dfb1d1eb7a5b5a1d9a29a5082eb5bd6" kindref="member">SuperIso_prediction_BDtaunu</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_prediction_BDtaunu;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_prediction_BDtaunu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>*Dep::SuperIso_modelinfo;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(param.model<sp/>&lt;<sp/>0)<sp/>FlavBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>model.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q2_min_tau_D<sp/><sp/>=<sp/>3.16;<sp/></highlight><highlight class="comment">//<sp/>1.776**2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q2_max_tau_D<sp/><sp/>=<sp/>11.6;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(5.28-1.869)**2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gen_tau_D<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charge_tau_D<sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight><highlight class="comment">//<sp/>D*<sp/>is<sp/>the<sp/>charged<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>obs_tau_D[3];</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=BEreq::BRBDlnu(byVal(gen_tau_D),<sp/>byVal(<sp/>charge_tau_D),<sp/>byVal(q2_min_tau_D),<sp/>byVal(q2_max_tau_D),<sp/>byVal(obs_tau_D),<sp/>&amp;param);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>printf(</highlight><highlight class="stringliteral">&quot;BR(B-&gt;<sp/>D<sp/>tau<sp/>nu<sp/>)=%.3e\n&quot;</highlight><highlight class="normal">,result);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_prediction_BDtaunu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1ac2773966fd146cb9dde032a5f516f537" kindref="member">SuperIso_prediction_BDmunu</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_prediction_BDmunu;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_prediction_BDmunu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>*Dep::SuperIso_modelinfo;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(param.model<sp/>&lt;<sp/>0)<sp/>FlavBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>model.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q2_min_mu_D=<sp/><sp/>0.012;<sp/></highlight><highlight class="comment">//<sp/>0.105*0.105</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q2_max_mu_D=<sp/><sp/>11.6;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(5.28-1.869)**2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gen_mu_D<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=2;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charge_mu_D<sp/><sp/><sp/><sp/><sp/>=0;</highlight><highlight class="comment">//<sp/>D*<sp/>is<sp/>the<sp/>charged<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>obs_mu_D[3];</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=<sp/>BEreq::BRBDlnu(byVal(gen_mu_D),<sp/>byVal(<sp/>charge_mu_D),<sp/>byVal(q2_min_mu_D),<sp/>byVal(q2_max_mu_D),<sp/>byVal(obs_mu_D),<sp/>&amp;param);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>printf(</highlight><highlight class="stringliteral">&quot;BR(B-&gt;D<sp/>mu<sp/>nu)=%.3e\n&quot;</highlight><highlight class="normal">,result);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_prediction_BDmunu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1ad4edf2cd27ccfe458c0808108e4d2fd8" kindref="member">SuperIso_prediction_BDstartaunu</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_prediction_BDstartaunu;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_prediction_BDstartaunu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>*Dep::SuperIso_modelinfo;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(param.model<sp/>&lt;<sp/>0)<sp/>FlavBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>model.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q2_min_tau_Dstar<sp/>=<sp/>3.16;<sp/></highlight><highlight class="comment">//<sp/>1.776**2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q2_max_tau_Dstar<sp/>=<sp/>10.67;<sp/><sp/><sp/></highlight><highlight class="comment">//(5.279-2.01027)*(5.279-2.01027);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gen_tau_Dstar<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=3;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charge_tau_Dstar<sp/><sp/><sp/><sp/><sp/>=1;</highlight><highlight class="comment">//<sp/>D*<sp/>is<sp/>the<sp/>charged<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>obs_tau_Dstar[4];</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=<sp/>BEreq::BRBDstarlnu(byVal(gen_tau_Dstar),<sp/>byVal(<sp/>charge_tau_Dstar),<sp/>byVal(q2_min_tau_Dstar),<sp/>byVal(q2_max_tau_Dstar),<sp/>byVal(obs_tau_Dstar),<sp/>&amp;param);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>printf(</highlight><highlight class="stringliteral">&quot;BR(B-&gt;Dstar<sp/>tau<sp/>nu)=%.3e\n&quot;</highlight><highlight class="normal">,result);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_prediction_BDstartaunu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a4bd520e45e908827e2c840cd62c41a9e" kindref="member">SuperIso_prediction_BDstarmunu</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_prediction_BDstarmunu;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_prediction_BDstarmunu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>*Dep::SuperIso_modelinfo;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(param.model<sp/>&lt;<sp/>0)<sp/>FlavBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>model.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q2_min_mu_Dstar<sp/>=<sp/>0.012;<sp/></highlight><highlight class="comment">//<sp/>0.105*0.105</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q2_max_mu_Dstar<sp/>=<sp/>10.67;<sp/><sp/><sp/></highlight><highlight class="comment">//(5.279-2.01027)*(5.279-2.01027);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gen_mu_Dstar<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=2;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>charge_mu_Dstar<sp/><sp/><sp/><sp/><sp/>=1;</highlight><highlight class="comment">//<sp/>D*<sp/>is<sp/>the<sp/>charged<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>obs_mu_Dstar[4];</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=BEreq::BRBDstarlnu(byVal(gen_mu_Dstar),<sp/>byVal(<sp/>charge_mu_Dstar),<sp/>byVal(q2_min_mu_Dstar),<sp/>byVal(q2_max_mu_Dstar),<sp/>byVal(obs_mu_Dstar),<sp/>&amp;param);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>printf(</highlight><highlight class="stringliteral">&quot;BR(B-&gt;Dstar<sp/>mu<sp/>nu)=%.3e\n&quot;</highlight><highlight class="normal">,result);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_prediction_BDstarmunu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1af74b513884f376991a066e6420a32598" kindref="member">SuperIso_prediction_RD</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_prediction_RD;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_prediction_RD&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>*Dep::SuperIso_modelinfo;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>BEreq::BDtaunu_BDenu(&amp;param);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>printf(</highlight><highlight class="stringliteral">&quot;BR(B-&gt;D<sp/>tau<sp/>nu)/BR(B-&gt;D<sp/>e<sp/>nu)=%.3e\n&quot;</highlight><highlight class="normal">,result);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_prediction_RD&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a9a17c52b6cf8a39025576819c8996b50" kindref="member">SuperIso_prediction_RDstar</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_prediction_RDstar;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_prediction_RDstar&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>*Dep::SuperIso_modelinfo;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>BEreq::BDstartaunu_BDstarenu(&amp;param);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>printf(</highlight><highlight class="stringliteral">&quot;BR(B-&gt;D*<sp/>tau<sp/>nu)/BR(B-&gt;D*<sp/>e<sp/>nu)=%.3e\n&quot;</highlight><highlight class="normal">,result);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_prediction_RD*&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1aab1a6071809456474c797b333ed3980d" kindref="member">SuperIso_prediction_Rmu</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_prediction_Rmu;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_prediction_Rmu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>*Dep::SuperIso_modelinfo;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>BEreq::Kmunu_pimunu(&amp;param);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>printf(</highlight><highlight class="stringliteral">&quot;R_mu=BR(K-&gt;mu<sp/>nu)/BR(pi-&gt;mu<sp/>nu)=%.3e\n&quot;</highlight><highlight class="normal">,result);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_prediction_Rmu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1ad5b10d083292a354ddd7e61b48de6ce6" kindref="member">SuperIso_prediction_Rmu23</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_prediction_Rmu23;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_prediction_Rmu23&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>*Dep::SuperIso_modelinfo;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>BEreq::Rmu23(&amp;param);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>printf(</highlight><highlight class="stringliteral">&quot;Rmu23=%.3e\n&quot;</highlight><highlight class="normal">,result);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_prediction_Rmu23&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1ac519d6d1f47798bd23d308823fb03b45" kindref="member">SuperIso_prediction_delta0</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_prediction_delta0;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_prediction_delta0&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>*Dep::SuperIso_modelinfo;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=BEreq::modified_delta0(&amp;param);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>printf(</highlight><highlight class="stringliteral">&quot;Delta0(B-&gt;K*<sp/>gamma)=%.3e\n&quot;</highlight><highlight class="normal">,result);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_prediction_delta0&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1ad1d899afa5f683d7a661d787e887b240" kindref="member">SuperIso_prediction_A_BXsmumu_zero</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_prediction_A_BXsmumu_zero;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_prediction_A_BXsmumu_zero&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>*Dep::SuperIso_modelinfo;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=BEreq::A_BXsmumu_zero(&amp;param);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>printf(</highlight><highlight class="stringliteral">&quot;AFB(B-&gt;Xs<sp/>mu<sp/>mu)_zero=%.3e\n&quot;</highlight><highlight class="normal">,result);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_prediction_A_BXsmumu_zero&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1ad718f5fd1d811edaf19576c83a5b3afe" kindref="member">SuperIso_prediction_BRBXstautau_highq2</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_prediction_BRBXstautau_highq2;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_prediction_BRBXstautau_highq2&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>*Dep::SuperIso_modelinfo;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=BEreq::BRBXstautau_highq2(&amp;param);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>printf(</highlight><highlight class="stringliteral">&quot;BR(B-&gt;Xs<sp/>tau<sp/>tau)_highq2=%.3e\n&quot;</highlight><highlight class="normal">,result);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_prediction_BRBXstautau_highq2&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1aaebc73e299ff3ea0fac4f84675417356" kindref="member">SuperIso_prediction_A_BXstautau_highq2</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_prediction_A_BXstautau_highq2;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_prediction_A_BXstautau_highq2&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>*Dep::SuperIso_modelinfo;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=BEreq::A_BXstautau_highq2(&amp;param);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>printf(</highlight><highlight class="stringliteral">&quot;AFB(B-&gt;Xs<sp/>tau<sp/>tau)_highq2=%.3e\n&quot;</highlight><highlight class="normal">,result);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_prediction_A_BXstautau_highq2&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RK*<sp/>for<sp/>RHN,<sp/>using<sp/>same<sp/>approximations<sp/>as<sp/>RK,<sp/>low<sp/>q^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RHN_RKstar_0045_11(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::RHN_RKstar_0045_11;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SMInputs<sp/>sminputs<sp/>=<sp/>*Dep::SMINPUTS;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Theta<sp/>=<sp/>*Dep::SeesawI_Theta;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>mN<sp/>=<sp/>{*Param[</highlight><highlight class="stringliteral">&quot;M_1&quot;</highlight><highlight class="normal">],*Param[</highlight><highlight class="stringliteral">&quot;M_2&quot;</highlight><highlight class="normal">],*Param[</highlight><highlight class="stringliteral">&quot;M_3&quot;</highlight><highlight class="normal">]};</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mt<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;mT&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>RHN_RKstar_0045_11&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mW<sp/>=<sp/>sminputs.mW;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sinW2<sp/>=<sp/>sqrt(1.0<sp/>-<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.mW/sminputs.mZ,2));</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NNLL<sp/>calculation<sp/>of<sp/>SM<sp/>Wilson<sp/>coefficients<sp/>from<sp/>1712.01593<sp/>and<sp/>0811.1214</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C10_SM<sp/>=<sp/>-4.103;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C9_SM<sp/>=<sp/>4.211;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wilson<sp/>coefficients<sp/>for<sp/>the<sp/>RHN<sp/>model,<sp/>from<sp/>1706.07570</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;<sp/>C10_mu<sp/>=<sp/>{0.0,<sp/>0.0},<sp/>C10_e<sp/>=<sp/>{0.0,<sp/>0.0};</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>i++)</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C10_mu<sp/>+=<sp/>1.0/(4.0*sinW2)*Theta.adjoint()(i,1)*Theta(1,i)<sp/>*<sp/>LoopFunctions::E(<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(mt/mW,2),<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(mN[i]/mW,2));</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C10_e<sp/>+=<sp/>1.0/(4.0*sinW2)*Theta.adjoint()(i,0)*Theta(0,i)<sp/>*<sp/>LoopFunctions::E(<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(mt/mW,2),<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(mN[i]/mW,2));</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;<sp/>C9_mu<sp/>=<sp/>-<sp/>C10_mu,<sp/>C9_e<sp/>=<sp/>-C10_e;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Aproximated<sp/>solution<sp/>from<sp/>eq<sp/>A.3<sp/>in<sp/>1408.4097</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><sp/>std::norm(C10_SM<sp/>+<sp/>C10_mu)<sp/>+<sp/>std::norm(C9_SM<sp/>+<sp/>C9_mu);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>/=<sp/>std::norm(C10_SM<sp/>+<sp/>C10_e)<sp/>+<sp/>std::norm(C9_SM<sp/>+<sp/>C9_e);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;RK<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Finished<sp/>RHN_RKstar_0045_11&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RK*<sp/>for<sp/>RHN,<sp/>using<sp/>same<sp/>approximations<sp/>as<sp/>RK,<sp/>intermediate<sp/>q^2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RHN_RKstar_11_60(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::RHN_RKstar_11_60;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SMInputs<sp/>sminputs<sp/>=<sp/>*Dep::SMINPUTS;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Theta<sp/>=<sp/>*Dep::SeesawI_Theta;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>mN<sp/>=<sp/>{*Param[</highlight><highlight class="stringliteral">&quot;M_1&quot;</highlight><highlight class="normal">],*Param[</highlight><highlight class="stringliteral">&quot;M_2&quot;</highlight><highlight class="normal">],*Param[</highlight><highlight class="stringliteral">&quot;M_3&quot;</highlight><highlight class="normal">]};</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mt<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;mT&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>RHN_RKstar_11_60&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mW<sp/>=<sp/>sminputs.mW;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sinW2<sp/>=<sp/>sqrt(1.0<sp/>-<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.mW/sminputs.mZ,2));</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NNLL<sp/>calculation<sp/>of<sp/>SM<sp/>Wilson<sp/>coefficients<sp/>from<sp/>1712.01593<sp/>and<sp/>0811.1214</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C10_SM<sp/>=<sp/>-4.103;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C9_SM<sp/>=<sp/>4.211;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wilson<sp/>coefficients<sp/>for<sp/>the<sp/>RHN<sp/>model,<sp/>from<sp/>1706.07570</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;<sp/>C10_mu<sp/>=<sp/>{0.0,<sp/>0.0},<sp/>C10_e<sp/>=<sp/>{0.0,<sp/>0.0};</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>i++)</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C10_mu<sp/>+=<sp/>1.0/(4.0*sinW2)*Theta.adjoint()(i,1)*Theta(1,i)<sp/>*<sp/>LoopFunctions::E(<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(mt/mW,2),<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(mN[i]/mW,2));</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C10_e<sp/>+=<sp/>1.0/(4.0*sinW2)*Theta.adjoint()(i,0)*Theta(0,i)<sp/>*<sp/>LoopFunctions::E(<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(mt/mW,2),<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(mN[i]/mW,2));</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;<sp/>C9_mu<sp/>=<sp/>-<sp/>C10_mu,<sp/>C9_e<sp/>=<sp/>-C10_e;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Aproximated<sp/>solution<sp/>from<sp/>eq<sp/>A.3<sp/>in<sp/>1408.4097</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><sp/>std::norm(C10_SM<sp/>+<sp/>C10_mu)<sp/>+<sp/>std::norm(C9_SM<sp/>+<sp/>C9_mu);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>/=<sp/>std::norm(C10_SM<sp/>+<sp/>C10_e)<sp/>+<sp/>std::norm(C9_SM<sp/>+<sp/>C9_e);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;RK<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Finished<sp/>RHN_RKstar_11_60&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1ae5c69635017dde9bebf7ecfae0523820" kindref="member">RHN_RK</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::RHN_RK;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SMInputs<sp/>sminputs<sp/>=<sp/>*Dep::SMINPUTS;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Theta<sp/>=<sp/>*Dep::SeesawI_Theta;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>mN<sp/>=<sp/>{*Param[</highlight><highlight class="stringliteral">&quot;M_1&quot;</highlight><highlight class="normal">],*Param[</highlight><highlight class="stringliteral">&quot;M_2&quot;</highlight><highlight class="normal">],*Param[</highlight><highlight class="stringliteral">&quot;M_3&quot;</highlight><highlight class="normal">]};</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mt<sp/>=<sp/>*Param[</highlight><highlight class="stringliteral">&quot;mT&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>RHN_RK&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mW<sp/>=<sp/>sminputs.mW;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sinW2<sp/>=<sp/>sqrt(1.0<sp/>-<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.mW/sminputs.mZ,2));</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NNLL<sp/>calculation<sp/>of<sp/>SM<sp/>Wilson<sp/>coefficients<sp/>from<sp/>1712.01593<sp/>and<sp/>0811.1214</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C10_SM<sp/>=<sp/>-4.103;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C9_SM<sp/>=<sp/>4.211;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wilson<sp/>coefficients<sp/>for<sp/>the<sp/>RHN<sp/>model,<sp/>from<sp/>1706.07570</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;<sp/>C10_mu<sp/>=<sp/>{0.0,<sp/>0.0},<sp/>C10_e<sp/>=<sp/>{0.0,<sp/>0.0};</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>i++)</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C10_mu<sp/>+=<sp/>1.0/(4.0*sinW2)*Theta.adjoint()(i,1)*Theta(1,i)<sp/>*<sp/>LoopFunctions::E(<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(mt/mW,2),<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(mN[i]/mW,2));</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C10_e<sp/>+=<sp/>1.0/(4.0*sinW2)*Theta.adjoint()(i,0)*Theta(0,i)<sp/>*<sp/>LoopFunctions::E(<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(mt/mW,2),<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(mN[i]/mW,2));</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;<sp/>C9_mu<sp/>=<sp/>-<sp/>C10_mu,<sp/>C9_e<sp/>=<sp/>-C10_e;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Aproximated<sp/>solution<sp/>from<sp/>eq<sp/>A.3<sp/>in<sp/>1408.4097</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><sp/>std::norm(C10_SM<sp/>+<sp/>C10_mu)<sp/>+<sp/>std::norm(C9_SM<sp/>+<sp/>C9_mu);</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>/=<sp/>std::norm(C10_SM<sp/>+<sp/>C10_e)<sp/>+<sp/>std::norm(C9_SM<sp/>+<sp/>C9_e);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;RK<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Finished<sp/>RHN_RK&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1afd127a2bf2b1bd7ffb6f3ea44d5e49b7" kindref="member">SuperIso_prediction_AI_BKstarmumu</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_prediction_AI_BKstarmumu;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_prediction_AI_BKstarmumu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>*Dep::SuperIso_modelinfo;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=BEreq::modified_AI_BKstarmumu(&amp;param);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>printf(</highlight><highlight class="stringliteral">&quot;A_I(B-&gt;K*<sp/>mu<sp/>mu)_lowq2=%.3e\n&quot;</highlight><highlight class="normal">,result);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_prediction_AI_BKstarmumu&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a1f25df6a869aa32214eda62480dc8173" kindref="member">SuperIso_prediction_AI_BKstarmumu_zero</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SuperIso_prediction_AI_BKstarmumu_zero;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SuperIso_prediction_AI_BKstarmumu_zero&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parameters<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>param<sp/>=<sp/>*Dep::SuperIso_modelinfo;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=BEreq::modified_AI_BKstarmumu_zero(&amp;param);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>printf(</highlight><highlight class="stringliteral">&quot;A_I(B-&gt;K*<sp/>mu<sp/>mu)_zero=%.3e\n&quot;</highlight><highlight class="normal">,result);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SuperIso_prediction_AI_BKstarmumu_zero&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1ab161c7410473d2c9a00138049bf24d8c" kindref="member">FeynHiggs_FlavourObs</ref>(fh_FlavourObs_container<sp/>&amp;result)</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::FeynHiggs_FlavourObs;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>FeynHiggs_FlavourObs&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fh_real<sp/>bsgMSSM;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>B<sp/>-&gt;<sp/>Xs<sp/>gamma<sp/>in<sp/>MSSM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fh_real<sp/>bsgSM;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>B<sp/>-&gt;<sp/>Xs<sp/>gamma<sp/>in<sp/>SM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fh_real<sp/>deltaMsMSSM;<sp/></highlight><highlight class="comment">//<sp/>delta<sp/>Ms<sp/>in<sp/>MSSM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fh_real<sp/>deltaMsSM;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delta<sp/>Ms<sp/>in<sp/>SM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fh_real<sp/>bsmumuMSSM;<sp/><sp/></highlight><highlight class="comment">//<sp/>Bs<sp/>-&gt;<sp/>mu<sp/>mu<sp/>in<sp/>MSSM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fh_real<sp/>bsmumuSM;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bs<sp/>-&gt;<sp/>mu<sp/>mu<sp/>in<sp/>SM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BEreq::FHFlavour(error,<sp/>bsgMSSM,<sp/>bsgSM,</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaMsMSSM,<sp/>deltaMsSM,</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bsmumuMSSM,<sp/>bsmumuSM);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fh_FlavourObs_container<sp/>FlavourObs;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FlavourObs.Bsg_MSSM<sp/>=<sp/>bsgMSSM;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FlavourObs.Bsg_SM<sp/>=<sp/>bsgSM;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FlavourObs.deltaMs_MSSM<sp/>=<sp/>deltaMsMSSM;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FlavourObs.deltaMs_SM<sp/>=<sp/>deltaMsSM;</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FlavourObs.Bsmumu_MSSM<sp/>=<sp/>bsmumuMSSM;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FlavourObs.Bsmumu_SM<sp/>=<sp/>bsmumuSM;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>FlavourObs;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>FeynHiggs_FlavourObs&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a20740859fd47c74c719207d12ba60ca1" kindref="member">FeynHiggs_prediction_bsgamma</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>Pipes::FeynHiggs_prediction_bsgamma::Dep::FlavourObs-&gt;Bsg_MSSM;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FeynHiggs_prediction_Bsmumu<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>Pipes::FeynHiggs_prediction_Bsmumu::Dep::FlavourObs-&gt;Bsmumu_MSSM;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FeynHiggs_prediction_DeltaMs(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>Pipes::FeynHiggs_prediction_DeltaMs::Dep::FlavourObs-&gt;deltaMs_MSSM;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1530"></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1af3a1bd95049efff094d84551bce29233" kindref="member">deltaMB_likelihood</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::deltaMB_likelihood;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>th_err_absolute,<sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>exp_meas,<sp/>exp_DeltaMs_err,<sp/>th_err;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>Delta_Ms_likelihood&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flav_reader<sp/>fread(GAMBIT_DIR<sp/><sp/></highlight><highlight class="stringliteral">&quot;/FlavBit/data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.debug_mode(flav_debug);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Initialised<sp/>Flav<sp/>reader<sp/>in<sp/>Delta_Ms_likelihood&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;DeltaMs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.initialise_matrices();<sp/></highlight><highlight class="comment">//<sp/>here<sp/>we<sp/>have<sp/>a<sp/>single<sp/>measurement<sp/>;)<sp/>so<sp/>let&apos;s<sp/>be<sp/>sneaky:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_meas<sp/>=<sp/>fread.get_exp_value()(0,0);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_DeltaMs_err<sp/>=<sp/>sqrt(fread.get_exp_cov()(0,0));</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>th_err<sp/>=<sp/>fread.get_th_err()(0,0).first;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>th_err_absolute<sp/>=<sp/>fread.get_th_err()(0,0).second;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Experiment:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>exp_meas<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>exp_DeltaMs_err<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>th_err<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>do<sp/>the<sp/>stuff<sp/>that<sp/>actually<sp/>depends<sp/>on<sp/>the<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theory_prediction<sp/>=<sp/>*Dep::prediction_DeltaMs;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theory_DeltaMs_err<sp/>=<sp/>th_err<sp/>*<sp/>(th_err_absolute<sp/>?<sp/>1.0<sp/>:<sp/>std::abs(theory_prediction));</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Theory<sp/>prediction:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;theory_prediction&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>+/-<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;theory_DeltaMs_err&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceprofile__theory_1a1b1d68c7bf06466d112ca4d48f4467ac" kindref="member">profile</ref><sp/>=<sp/>runOptions-&gt;getValueOrDef&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;profile_systematics&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>Stats::gaussian_loglikelihood(theory_prediction,<sp/>exp_meas,<sp/>theory_DeltaMs_err,<sp/>exp_DeltaMs_err,<sp/>profile);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1ab5d991860189dd873fa8870f5160b7a6" kindref="member">SL_measurements</ref>(predictions_measurements_covariances<sp/>&amp;pmc)</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SL_measurements;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_experiments=8;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>th_err_absolute[n_experiments],<sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>th_err[n_experiments];</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SL_measurements&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>and<sp/>calculate<sp/>things<sp/>based<sp/>on<sp/>the<sp/>observed<sp/>data<sp/>only<sp/>the<sp/>first<sp/>time<sp/>through,<sp/>as<sp/>none<sp/>of<sp/>it<sp/>depends<sp/>on<sp/>the<sp/>model<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pmc.LL_name=</highlight><highlight class="stringliteral">&quot;SL_likelihood&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>in<sp/>experimental<sp/>measuremens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flav_reader<sp/>fread(GAMBIT_DIR<sp/><sp/></highlight><highlight class="stringliteral">&quot;/FlavBit/data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.debug_mode(flav_debug);</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Initialised<sp/>Flav<sp/>reader<sp/>in<sp/>SL_measurements&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>B-&gt;<sp/>tau<sp/>nu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BR_Btaunu&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>B-&gt;<sp/>D<sp/>mu<sp/>nu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BR_BDmunu&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>B-&gt;<sp/>D*<sp/>mu<sp/>nu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BR_BDstarmunu&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;RD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RDstar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;RDstar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ds-&gt;<sp/>tau<sp/>nu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BR_Dstaunu&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ds<sp/>-&gt;<sp/>mu<sp/>nu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BR_Dsmunu&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>D<sp/>-&gt;<sp/>mu<sp/>nu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BR_Dmunu&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.initialise_matrices();</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pmc.cov_exp=fread.get_exp_cov();</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pmc.value_exp=fread.get_exp_value();</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pmc.value_th.resize(n_experiments,1);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>all<sp/>entries<sp/>in<sp/>the<sp/>covariance<sp/>matrix<sp/>explicitly<sp/>to<sp/>zero,<sp/>as<sp/>we<sp/>will<sp/>only<sp/>write<sp/>the<sp/>diagonal<sp/>ones<sp/>later.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pmc.cov_th<sp/>=<sp/>boost::numeric::ublas::zero_matrix&lt;double&gt;(n_experiments,n_experiments);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n_experiments;<sp/>++i)</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>th_err[i]<sp/>=<sp/>fread.get_th_err()(i,0).first;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>th_err_absolute[i]<sp/>=<sp/>fread.get_th_err()(i,0).second;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pmc.dim=n_experiments;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>over.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>R(D)<sp/>is<sp/>calculated<sp/>assuming<sp/>isospin<sp/>symmetry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theory[8];</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>B-&gt;<sp/>tau<sp/>nu<sp/>SI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>theory[0]<sp/>=<sp/>*Dep::Btaunu;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>B-&gt;<sp/>D<sp/>mu<sp/>nu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>theory[1]<sp/>=<sp/>*Dep::BDmunu;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>B-&gt;<sp/>D*<sp/>mu<sp/>nu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>theory[2]<sp/>=<sp/>*Dep::BDstarmunu;</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>theory[3]<sp/>=<sp/>*Dep::RD;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RDstar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>theory[4]<sp/>=<sp/>*Dep::RDstar;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ds-&gt;<sp/>tau<sp/>nu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>theory[5]<sp/>=<sp/>*Dep::Dstaunu;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ds<sp/>-&gt;<sp/>mu<sp/>nu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>theory[6]<sp/>=<sp/>*Dep::Dsmunu;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>D<sp/>-&gt;<sp/>mu<sp/>nu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>theory[7]<sp/>=*Dep::Dmunu;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n_experiments;<sp/>++i)</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pmc.value_th(i,0)<sp/>=<sp/>theory[i];</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pmc.cov_th(i,i)<sp/>=<sp/>th_err[i]*th_err[i]<sp/>*<sp/>(th_err_absolute[i]<sp/>?<sp/>1.0<sp/>:<sp/>theory[i]*theory[i]);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>in<sp/>the<sp/>correlations<sp/>between<sp/>B-&gt;<sp/>D<sp/>mu<sp/>nu<sp/>and<sp/>RD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pmc.cov_th(1,3)<sp/>=<sp/>pmc.cov_th(3,1)<sp/>=<sp/>-0.55<sp/>*<sp/>th_err[1]*th_err[3]<sp/>*<sp/>(th_err_absolute[1]<sp/>?<sp/>1.0<sp/>:<sp/>theory[1])<sp/>*<sp/>(th_err_absolute[3]<sp/>?<sp/>1.0<sp/>:<sp/>theory[3]);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>in<sp/>the<sp/>correlations<sp/>between<sp/>B-&gt;<sp/>D*<sp/>mu<sp/>nu<sp/>and<sp/>RD*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pmc.cov_th(2,4)<sp/>=<sp/>pmc.cov_th(4,2)<sp/>=<sp/>-0.62<sp/>*<sp/>th_err[2]*th_err[4]<sp/>*<sp/>(th_err_absolute[2]<sp/>?<sp/>1.0<sp/>:<sp/>theory[2])<sp/>*<sp/>(th_err_absolute[4]<sp/>?<sp/>1.0<sp/>:<sp/>theory[4]);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pmc.diff.clear();</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;n_experiments;++i)</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pmc.diff.push_back(pmc.value_exp(i,0)-pmc.value_th(i,0));</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SL_measurements&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a2a68bc91cda4c05d12e487fc47a9db64" kindref="member">SL_likelihood</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::SL_likelihood;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Starting<sp/>SL_likelihood&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>predictions_measurements_covariances<sp/>pmc<sp/>=<sp/>*Dep::SL_M;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::numeric::ublas::matrix&lt;double&gt;<sp/>cov=pmc.cov_exp;</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>adding<sp/>theory<sp/>and<sp/>experimental<sp/>covariance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cov+=pmc.cov_th;</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//calculating<sp/>a<sp/>diff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>diff;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>diff=pmc.diff;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::numeric::ublas::matrix&lt;double&gt;<sp/>cov_inv(pmc.dim,<sp/>pmc.dim);</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="flav__utils_8hpp_1a6241db784bd398319cf942b0e9195888" kindref="member">InvertMatrix</ref>(cov,<sp/>cov_inv);</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Chi2=0;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>pmc.dim;<sp/>++i)</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;pmc.dim;<sp/>++j)</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Chi2+=<sp/>diff[i]<sp/>*<sp/>cov_inv(i,j)*diff[j];</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result=-0.5*Chi2;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Finished<sp/>SL_likelihood&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug_LL)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Likelihood<sp/>result<sp/>SL_likelihood<sp/><sp/>:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>result&lt;&lt;endl;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Helper<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>G(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x)</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(10.0<sp/>-<sp/>43.0*x<sp/>+<sp/>78.0*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(x,2)<sp/>-<sp/>49.0*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(x,3)<sp/>+<sp/>4.0*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(x,4)<sp/>+<sp/>18.0*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(x,3)*log(x))<sp/>/<sp/>(3.0*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(x<sp/>-<sp/>1,4));</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>10.0/3;</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Contribution<sp/>to<sp/>mu<sp/>-&gt;<sp/>e<sp/>gamma<sp/>from<sp/>RHNs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RHN_muegamma(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::RHN_muegamma;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SMInputs<sp/>sminputs<sp/>=<sp/>*Dep::SMINPUTS;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>m_nu<sp/>=<sp/>*Dep::m_nu;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>ml<sp/>=<sp/>{sminputs.mE,<sp/>sminputs.mMu,<sp/>sminputs.mTau};</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>mnu<sp/>=<sp/>{real(m_nu(0,0)),<sp/>real(m_nu(1,1)),<sp/>real(m_nu(2,2)),<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_1&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_2&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_3&quot;</highlight><highlight class="normal">]};</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Theta<sp/>=<sp/>*Dep::SeesawI_Theta;</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Vnu<sp/>=<sp/>*Dep::SeesawI_Vnu;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;complex&lt;double&gt;,3,6&gt;<sp/>U;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>i++)</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;3;<sp/>j++)</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U(i,j)<sp/>=<sp/>Vnu(i,j);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U(i,j+3)<sp/>=<sp/>Theta(i,j);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.mMu,5)/(4<sp/>*<sp/>sminputs.alphainv);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Form<sp/>factors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>0,<sp/>mu<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>k2l<sp/>=<sp/>FormFactors::K2L(mu,<sp/>e,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>k2r<sp/>=<sp/>FormFactors::K2R(mu,<sp/>e,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>*=<sp/>(norm(k2l)<sp/>+<sp/>norm(k2r));</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>/=<sp/>Dep::mu_minus_decay_rates-&gt;width_in_GeV;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Contribution<sp/>to<sp/>tau<sp/>-&gt;<sp/>e<sp/>gamma<sp/>from<sp/>RHNs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RHN_tauegamma(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::RHN_tauegamma;</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SMInputs<sp/>sminputs<sp/>=<sp/>*Dep::SMINPUTS;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>m_nu<sp/>=<sp/>*Dep::m_nu;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>ml<sp/>=<sp/>{sminputs.mE,<sp/>sminputs.mMu,<sp/>sminputs.mTau};</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>mnu<sp/>=<sp/>{real(m_nu(0,0)),<sp/>real(m_nu(1,1)),<sp/>real(m_nu(2,2)),<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_1&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_2&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_3&quot;</highlight><highlight class="normal">]};</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Theta<sp/>=<sp/>*Dep::SeesawI_Theta;</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Vnu<sp/>=<sp/>*Dep::SeesawI_Vnu;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;complex&lt;double&gt;,3,6&gt;<sp/>U;</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>i++)</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;3;<sp/>j++)</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U(i,j)<sp/>=<sp/>Vnu(i,j);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U(i,j+3)<sp/>=<sp/>Theta(i,j);</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.mTau,5)/(4*sminputs.alphainv);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Form<sp/>factors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>0,<sp/>tau<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>k2l<sp/>=<sp/>FormFactors::K2L(tau,<sp/>e,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>k2r<sp/>=<sp/>FormFactors::K2R(tau,<sp/>e,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>*=<sp/>(norm(k2l)<sp/>+<sp/>norm(k2r));</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>/=<sp/>Dep::tau_minus_decay_rates-&gt;width_in_GeV;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Contribution<sp/>to<sp/>tau<sp/>-&gt;<sp/>mu<sp/>gamma<sp/>from<sp/>RHNs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RHN_taumugamma(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::RHN_taumugamma;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SMInputs<sp/>sminputs<sp/>=<sp/>*Dep::SMINPUTS;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>m_nu<sp/>=<sp/>*Dep::m_nu;</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>ml<sp/>=<sp/>{sminputs.mE,<sp/>sminputs.mMu,<sp/>sminputs.mTau};</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>mnu<sp/>=<sp/>{real(m_nu(0,0)),<sp/>real(m_nu(1,1)),<sp/>real(m_nu(2,2)),<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_1&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_2&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_3&quot;</highlight><highlight class="normal">]};</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Theta<sp/>=<sp/>*Dep::SeesawI_Theta;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Vnu<sp/>=<sp/>*Dep::SeesawI_Vnu;</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;complex&lt;double&gt;,3,6&gt;<sp/>U;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>i++)</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;3;<sp/>j++)</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U(i,j)<sp/>=<sp/>Vnu(i,j);</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U(i,j+3)<sp/>=<sp/>Theta(i,j);</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.mTau,5)/(4<sp/>*<sp/>sminputs.alphainv);</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Form<sp/>factors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mu<sp/>=<sp/>1,<sp/>tau<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>k2l<sp/>=<sp/>FormFactors::K2L(tau,<sp/>mu,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>k2r<sp/>=<sp/>FormFactors::K2R(tau,<sp/>mu,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>*=<sp/>(norm(k2l)<sp/>+<sp/>norm(k2r));</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>/=<sp/>Dep::tau_minus_decay_rates-&gt;width_in_GeV;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>General<sp/>contribution<sp/>to<sp/>l_\alpha^-<sp/>-&gt;<sp/>l_\beta^-<sp/>l_\gamma^-<sp/>l_\delta^+<sp/>from<sp/>RHNs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>RHN_l2lll(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alpha,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>beta,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gamma,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta,<sp/>SMInputs<sp/>sminputs,<sp/>Eigen::Matrix3cd<sp/>Vnu,<sp/>Eigen::Matrix3cd<sp/>Theta,<sp/>Eigen::Matrix3cd<sp/>m_nu,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M3,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mH)</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>ml<sp/>=<sp/>{sminputs.mE,<sp/>sminputs.mMu,<sp/>sminputs.mTau};</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>mnu<sp/>=<sp/>{real(m_nu(0,0)),<sp/>real(m_nu(1,1)),<sp/>real(m_nu(2,2)),<sp/>M1,<sp/>M2,<sp/>M3};</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;complex&lt;double&gt;,3,6&gt;<sp/>U;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>i++)</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;3;<sp/>j++)</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U(i,j)<sp/>=<sp/>Vnu(i,j);</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U(i,j+3)<sp/>=<sp/>Theta(i,j);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Form<sp/>factors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>k2l<sp/>=<sp/>FormFactors::K2L(alpha,<sp/>beta,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>k2r<sp/>=<sp/>FormFactors::K2R(alpha,<sp/>beta,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>k1r<sp/>=<sp/>FormFactors::K1R(alpha,<sp/>beta,<sp/>sminputs,<sp/>U,<sp/>mnu);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>asll<sp/>=<sp/>FormFactors::ASLL(alpha,<sp/>beta,<sp/>gamma,<sp/>delta,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu,<sp/>mH);</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>aslr<sp/>=<sp/>FormFactors::ASLR(alpha,<sp/>beta,<sp/>gamma,<sp/>delta,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu,<sp/>mH);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>asrl<sp/>=<sp/>FormFactors::ASRL(alpha,<sp/>beta,<sp/>gamma,<sp/>delta,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu,<sp/>mH);</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>asrr<sp/>=<sp/>FormFactors::ASRR(alpha,<sp/>beta,<sp/>gamma,<sp/>delta,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu,<sp/>mH);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>avll<sp/>=<sp/>FormFactors::AVLL(alpha,<sp/>beta,<sp/>gamma,<sp/>delta,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>avlr<sp/>=<sp/>FormFactors::AVLR(alpha,<sp/>beta,<sp/>gamma,<sp/>delta,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>avrl<sp/>=<sp/>FormFactors::AVLL(alpha,<sp/>beta,<sp/>gamma,<sp/>delta,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>avrr<sp/>=<sp/>FormFactors::AVRR(alpha,<sp/>beta,<sp/>gamma,<sp/>delta,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>avhatll<sp/>=<sp/>avll;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>avhatlr<sp/>=<sp/>avlr;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>avhatrl<sp/>=<sp/>avrl<sp/>+<sp/>4.<sp/>*<sp/><ref refid="scanner__utils_8hpp_1a9617ce9ea7d587dcf3839f2ddd03de0b" kindref="member">pi</ref><sp/>/<sp/>sminputs.alphainv<sp/>*<sp/>k1r;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>avhatrr<sp/>=<sp/>avrr<sp/>+<sp/>4.<sp/>*<sp/><ref refid="scanner__utils_8hpp_1a9617ce9ea7d587dcf3839f2ddd03de0b" kindref="member">pi</ref><sp/>/<sp/>sminputs.alphainv<sp/>*<sp/>k1r;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>l2lll<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(beta<sp/>==<sp/>gamma<sp/>and<sp/>gamma<sp/>==<sp/>delta)<sp/></highlight><highlight class="comment">//<sp/>l(alpha)-<sp/>-&gt;<sp/>l(beta)-<sp/>l(beta)-<sp/>l(beta)+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l2lll<sp/>=<sp/>real(16.<sp/>*<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(pi,2)<sp/>/<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.alphainv,2)<sp/>*<sp/>(norm(k2l)<sp/>+<sp/>norm(k2r))<sp/>*<sp/>(16./3.*log(ml[alpha]/ml[beta])<sp/>-<sp/>22./3.)<sp/>+<sp/>1./24.<sp/>*<sp/>(norm(asll)<sp/>+<sp/>norm(asrr)<sp/>+<sp/>2.*norm(aslr)<sp/>+<sp/>2.*norm(asrl))<sp/>+<sp/>1./3.<sp/>*<sp/>(2.*norm(avhatll)<sp/>+<sp/>2.*norm(avhatrr)<sp/>+<sp/>norm(avhatlr)<sp/>+<sp/>norm(avhatrl))<sp/>+<sp/>4.*pi/(3.*sminputs.alphainv)*(k2l*conj(asrl<sp/>-<sp/>2.*avhatrl<sp/>-<sp/>4.*avhatrr)<sp/>+<sp/>conj(k2l)*(asrl<sp/>-<sp/>2.*avhatrl<sp/>-<sp/>4.*avhatrr)<sp/>+<sp/>k2r*conj(aslr<sp/>-<sp/>2.*avhatlr<sp/>-<sp/>4.*avhatll)<sp/>+<sp/>conj(k2r)*(aslr<sp/>-<sp/>2.*avhatlr<sp/>-<sp/>4.*avhatll))<sp/>-<sp/>1./6.<sp/>*<sp/>(aslr*conj(avhatlr)<sp/>+<sp/>asrl*conj(avhatrl)<sp/>+<sp/>conj(aslr)*avhatlr<sp/>+<sp/>conj(asrl)*avhatrl));</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(gamma<sp/>==<sp/>delta)<sp/></highlight><highlight class="comment">//<sp/>l(alpha)-<sp/>-&gt;<sp/>l(beta)-<sp/>l(gamma)-<sp/>l(gamma)+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l2lll<sp/>=<sp/>real(16.<sp/>*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(pi,2)<sp/>/<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.alphainv,2)<sp/>*<sp/>(norm(k2l)<sp/>+<sp/>norm(k2r))<sp/>*<sp/>(16./3.*log(ml[alpha]/ml[gamma])<sp/>-<sp/>8.)<sp/>+<sp/>1./12.<sp/>*(norm(asll)<sp/>+<sp/>norm(asrr)<sp/>+<sp/>norm(aslr)<sp/>+<sp/>norm(asrl))<sp/>+<sp/>1./3.<sp/>*<sp/>(norm(avhatll)<sp/>+<sp/>norm(avhatrr)<sp/>+<sp/>norm(avhatlr)<sp/>+<sp/>norm(avhatrl))<sp/>+<sp/>8.*pi/(3.*sminputs.alphainv)<sp/>*<sp/>(k2l*conj(avhatrl<sp/>+<sp/>avhatrr)<sp/>+<sp/>k2r*conj(avhatlr<sp/>+<sp/>avhatll)<sp/>+<sp/>conj(k2l)*(avhatrl<sp/>+<sp/>avhatrr)<sp/>+<sp/>conj(k2r)*(avhatlr<sp/>+<sp/>avhatll)));</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(beta<sp/>==<sp/>gamma)<sp/></highlight><highlight class="comment">//<sp/>l(alpha)-<sp/>-&gt;<sp/>l(beta)-<sp/>l(beta)-<sp/>l(delta)+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l2lll<sp/>=<sp/>real(1./24.<sp/>*<sp/>(norm(asll)<sp/>+<sp/>norm(asrr)<sp/>+<sp/>2.*norm(aslr)<sp/>+<sp/>2.*norm(asrl))<sp/>+<sp/>1./3.*(2.*norm(avhatll)<sp/>+<sp/>2.*norm(avhatrr)<sp/>+<sp/>norm(avhatlr)<sp/>+<sp/>norm(avhatrl))<sp/>-<sp/>1./6.*(aslr*conj(avhatlr)<sp/>+<sp/>asrl*conj(avhatrl)<sp/>+<sp/>conj(aslr)*avhatlr<sp/>+<sp/>conj(asrl)*avhatrl));</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l2lll;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Contribution<sp/>to<sp/>mu<sp/>-&gt;<sp/>e<sp/>e<sp/>e<sp/>from<sp/>RHNs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RHN_mueee(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::RHN_mueee;</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SMInputs<sp/>sminputs<sp/>=<sp/>*Dep::SMINPUTS;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>m_nu<sp/>=<sp/>*Dep::m_nu;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Theta<sp/>=<sp/>*Dep::SeesawI_Theta;</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Vnu<sp/>=<sp/>*Dep::SeesawI_Vnu;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.mMu,5)/(512*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(pi,3));</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>0,<sp/>mu<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>*=<sp/><sp/>RHN_l2lll(mu,<sp/>e,<sp/>e,<sp/>e,<sp/>sminputs,<sp/>Vnu,<sp/>Theta,<sp/>m_nu,<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_1&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_2&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_3&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;mH&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>/=<sp/>Dep::mu_minus_decay_rates-&gt;width_in_GeV;</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Contribution<sp/>to<sp/>tau<sp/>-&gt;<sp/>e<sp/>e<sp/>e<sp/>from<sp/>RHNs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RHN_taueee(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::RHN_taueee;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SMInputs<sp/>sminputs<sp/>=<sp/>*Dep::SMINPUTS;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>m_nu<sp/>=<sp/>*Dep::m_nu;</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Theta<sp/>=<sp/>*Dep::SeesawI_Theta;</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Vnu<sp/>=<sp/>*Dep::SeesawI_Vnu;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.mTau,5)/(512*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(pi,3));</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>0,<sp/>tau<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>*=<sp/><sp/>RHN_l2lll(tau,<sp/>e,<sp/>e,<sp/>e,<sp/>sminputs,<sp/>Vnu,<sp/>Theta,<sp/>m_nu,<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_1&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_2&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_3&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;mH&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>/=<sp/>Dep::tau_minus_decay_rates-&gt;width_in_GeV;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Contribution<sp/>to<sp/>tau<sp/>-&gt;<sp/>mu<sp/>mu<sp/>mu<sp/>from<sp/>RHNs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RHN_taumumumu(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::RHN_taumumumu;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SMInputs<sp/>sminputs<sp/>=<sp/>*Dep::SMINPUTS;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>m_nu<sp/>=<sp/>*Dep::m_nu;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Theta<sp/>=<sp/>*Dep::SeesawI_Theta;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Vnu<sp/>=<sp/>*Dep::SeesawI_Vnu;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.mTau,5)/(512*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(pi,3));</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mu<sp/>=<sp/>1,<sp/>tau<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>*=<sp/><sp/>RHN_l2lll(tau,<sp/>mu,<sp/>mu,<sp/>mu,<sp/>sminputs,<sp/>Vnu,<sp/>Theta,<sp/>m_nu,<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_1&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_2&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_3&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;mH&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>/=<sp/>Dep::tau_minus_decay_rates-&gt;width_in_GeV;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Contribution<sp/>to<sp/>tau^-<sp/>-&gt;<sp/>mu^-<sp/>e^-<sp/>e^+<sp/>from<sp/>RHNs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RHN_taumuee(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::RHN_taumuee;</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SMInputs<sp/>sminputs<sp/>=<sp/>*Dep::SMINPUTS;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>m_nu<sp/>=<sp/>*Dep::m_nu;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Theta<sp/>=<sp/>*Dep::SeesawI_Theta;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Vnu<sp/>=<sp/>*Dep::SeesawI_Vnu;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.mTau,5)/(512*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(pi,3));</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>0,<sp/>mu<sp/>=<sp/>1,<sp/>tau<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>*=<sp/><sp/>RHN_l2lll(tau,<sp/>mu,<sp/>e,<sp/>e,<sp/>sminputs,<sp/>Vnu,<sp/>Theta,<sp/>m_nu,<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_1&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_2&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_3&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;mH&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>/=<sp/>Dep::tau_minus_decay_rates-&gt;width_in_GeV;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Contribution<sp/>to<sp/>tau^-<sp/>-&gt;<sp/>e^-<sp/>e^-<sp/>mu^+<sp/>from<sp/>RHNs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RHN_taueemu(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::RHN_taueemu;</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SMInputs<sp/>sminputs<sp/>=<sp/>*Dep::SMINPUTS;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>m_nu<sp/>=<sp/>*Dep::m_nu;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Theta<sp/>=<sp/>*Dep::SeesawI_Theta;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Vnu<sp/>=<sp/>*Dep::SeesawI_Vnu;</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.mTau,5)/(512*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(pi,3));</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>0,<sp/>mu<sp/>=<sp/>1,<sp/>tau<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>*=<sp/><sp/>RHN_l2lll(tau,<sp/>e,<sp/>e,<sp/>mu,<sp/>sminputs,<sp/>Vnu,<sp/>Theta,<sp/>m_nu,<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_1&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_2&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_3&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;mH&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"></highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>/=<sp/>Dep::tau_minus_decay_rates-&gt;width_in_GeV;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Contribution<sp/>to<sp/>tau^-<sp/>-&gt;<sp/>e^-<sp/>mu^-<sp/>mu^+<sp/>from<sp/>RHNs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RHN_tauemumu(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::RHN_tauemumu;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SMInputs<sp/>sminputs<sp/>=<sp/>*Dep::SMINPUTS;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>m_nu<sp/>=<sp/>*Dep::m_nu;</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Theta<sp/>=<sp/>*Dep::SeesawI_Theta;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Vnu<sp/>=<sp/>*Dep::SeesawI_Vnu;</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.mTau,5)/(512*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(pi,3));</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>0,<sp/>mu<sp/>=<sp/>1,<sp/>tau<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>*=<sp/><sp/>RHN_l2lll(tau,<sp/>e,<sp/>mu,<sp/>mu,<sp/>sminputs,<sp/>Vnu,<sp/>Theta,<sp/>m_nu,<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_1&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_2&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_3&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;mH&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>/=<sp/>Dep::tau_minus_decay_rates-&gt;width_in_GeV;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Contribution<sp/>to<sp/>tau^-<sp/>-&gt;<sp/>mu^-<sp/>mu^-<sp/>e^+<sp/>from<sp/>RHNs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RHN_taumumue(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::RHN_taumumue;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SMInputs<sp/>sminputs<sp/>=<sp/>*Dep::SMINPUTS;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>m_nu<sp/>=<sp/>*Dep::m_nu;</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Theta<sp/>=<sp/>*Dep::SeesawI_Theta;</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Vnu<sp/>=<sp/>*Dep::SeesawI_Vnu;</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.mTau,5)/(512*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(pi,3));</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>0,<sp/>mu<sp/>=<sp/>1,<sp/>tau<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>*=<sp/><sp/>RHN_l2lll(tau,<sp/>mu,<sp/>mu,<sp/>e,<sp/>sminputs,<sp/>Vnu,<sp/>Theta,<sp/>m_nu,<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_1&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_2&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_3&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;mH&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>/=<sp/>Dep::tau_minus_decay_rates-&gt;width_in_GeV;</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Form<sp/>factors<sp/>for<sp/>to<sp/>mu<sp/>-<sp/>e<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RHN_mue_FF(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SMInputs<sp/>sminputs,<sp/>std::vector&lt;double&gt;<sp/>&amp;mnu,<sp/>Eigen::Matrix&lt;complex&lt;double&gt;,3,6&gt;<sp/>&amp;U,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mH,<sp/>complex&lt;double&gt;<sp/>&amp;g0SL,<sp/>complex&lt;double&gt;<sp/>&amp;g0SR,<sp/>complex&lt;double&gt;<sp/>&amp;g0VL,<sp/>complex&lt;double&gt;<sp/>&amp;g0VR,<sp/>complex&lt;double&gt;<sp/>&amp;g1SL,<sp/>complex&lt;double&gt;<sp/>&amp;g1SR,<sp/>complex&lt;double&gt;<sp/>&amp;g1VL,<sp/>complex&lt;double&gt;<sp/>&amp;g1VR)</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>ml<sp/>=<sp/>{sminputs.mE,<sp/>sminputs.mMu,<sp/>sminputs.mTau};</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>0,<sp/>mu<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>k1r<sp/>=<sp/>FormFactors::K1R(mu,<sp/>e,<sp/>sminputs,<sp/>U,<sp/>mnu);</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>k2l<sp/>=<sp/>FormFactors::K2L(mu,<sp/>e,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>k2r<sp/>=<sp/>FormFactors::K2R(mu,<sp/>e,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>0,<sp/>d<sp/>=0,<sp/>s<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CVLLu<sp/>=<sp/>FormFactors::CVLL(mu,<sp/>e,<sp/>u,<sp/>u,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CVLLd<sp/>=<sp/>FormFactors::BVLL(mu,<sp/>e,<sp/>d,<sp/>d,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CVLLs<sp/>=<sp/>FormFactors::BVLL(mu,<sp/>e,<sp/>s,<sp/>s,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CVLRu<sp/>=<sp/>FormFactors::CVLR(mu,<sp/>e,<sp/>u,<sp/>u,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CVLRd<sp/>=<sp/>FormFactors::BVLR(mu,<sp/>e,<sp/>d,<sp/>d,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CVLRs<sp/>=<sp/>FormFactors::BVLR(mu,<sp/>e,<sp/>s,<sp/>s,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CVRLu<sp/>=<sp/>FormFactors::CVRL(mu,<sp/>e,<sp/>u,<sp/>u,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CVRLd<sp/>=<sp/>FormFactors::BVRL(mu,<sp/>e,<sp/>d,<sp/>d,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CVRLs<sp/>=<sp/>FormFactors::BVRL(mu,<sp/>e,<sp/>s,<sp/>s,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CVRRu<sp/>=<sp/>FormFactors::CVRR(mu,<sp/>e,<sp/>u,<sp/>u,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CVRRd<sp/>=<sp/>FormFactors::BVRR(mu,<sp/>e,<sp/>d,<sp/>d,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CVRRs<sp/>=<sp/>FormFactors::BVRR(mu,<sp/>e,<sp/>s,<sp/>s,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu);</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CSLLu<sp/>=<sp/>FormFactors::CSLL(mu,<sp/>e,<sp/>u,<sp/>u,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu,<sp/>mH);</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CSLLd<sp/>=<sp/>FormFactors::BSLL(mu,<sp/>e,<sp/>d,<sp/>d,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu,<sp/>mH);</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CSLLs<sp/>=<sp/>FormFactors::BSLL(mu,<sp/>e,<sp/>s,<sp/>s,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu,<sp/>mH);</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CSLRu<sp/>=<sp/>FormFactors::CSLL(mu,<sp/>e,<sp/>u,<sp/>u,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu,<sp/>mH);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CSLRd<sp/>=<sp/>FormFactors::BSLL(mu,<sp/>e,<sp/>d,<sp/>d,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu,<sp/>mH);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CSLRs<sp/>=<sp/>FormFactors::BSLL(mu,<sp/>e,<sp/>s,<sp/>s,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu,<sp/>mH);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CSRLu<sp/>=<sp/>FormFactors::CSLL(mu,<sp/>e,<sp/>u,<sp/>u,<sp/>sminputs,<sp/>U,<sp/>ml<sp/>,mnu,<sp/>mH);</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CSRLd<sp/>=<sp/>FormFactors::BSLL(mu,<sp/>e,<sp/>d,<sp/>d,<sp/>sminputs,<sp/>U,<sp/>ml<sp/>,mnu,<sp/>mH);</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CSRLs<sp/>=<sp/>FormFactors::BSLL(mu,<sp/>e,<sp/>s,<sp/>s,<sp/>sminputs,<sp/>U,<sp/>ml<sp/>,mnu,<sp/>mH);</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CSRRu<sp/>=<sp/>FormFactors::CSLL(mu,<sp/>e,<sp/>u,<sp/>u,<sp/>sminputs,<sp/>U,<sp/>ml<sp/>,mnu,<sp/>mH);</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CSRRd<sp/>=<sp/>FormFactors::BSLL(mu,<sp/>e,<sp/>d,<sp/>d,<sp/>sminputs,<sp/>U,<sp/>ml,<sp/>mnu,<sp/>mH);</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>CSRRs<sp/>=<sp/>FormFactors::BSLL(mu,<sp/>e,<sp/>s,<sp/>s,<sp/>sminputs,<sp/>U,<sp/>ml<sp/>,mnu,<sp/>mH);</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Qu<sp/>=<sp/>2./3.;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>gVLu<sp/>=<sp/>sqrt(2)/sminputs.GF<sp/>*<sp/>(4.*<ref refid="scanner__utils_8hpp_1a9617ce9ea7d587dcf3839f2ddd03de0b" kindref="member">pi</ref><sp/>/<sp/>sminputs.alphainv<sp/>*<sp/>Qu<sp/>*<sp/>(0.<sp/>-<sp/>k2r)<sp/>-<sp/>0.5*(CVLLu<sp/>+<sp/>CVLRu));</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>gSLu<sp/>=<sp/>-1./(sqrt(2)*sminputs.GF)*(CSLLu<sp/>+<sp/>CSLRu);</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>gVRu<sp/>=<sp/>sqrt(2)/sminputs.GF<sp/>*<sp/>(4.*<ref refid="scanner__utils_8hpp_1a9617ce9ea7d587dcf3839f2ddd03de0b" kindref="member">pi</ref><sp/>/<sp/>sminputs.alphainv<sp/>*<sp/>Qu<sp/>*<sp/>(k1r<sp/>-<sp/>k2l)<sp/>-<sp/>0.5*(CVRRu<sp/>+<sp/>CVRLu));</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>gSRu<sp/>=<sp/>-1./(sqrt(2)*sminputs.GF)*(CSRRu<sp/>+<sp/>CSRLu);</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Qd<sp/>=<sp/>-1./3.;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>gVLd<sp/>=<sp/>sqrt(2)/sminputs.GF<sp/>*<sp/>(4.*<ref refid="scanner__utils_8hpp_1a9617ce9ea7d587dcf3839f2ddd03de0b" kindref="member">pi</ref><sp/>/<sp/>sminputs.alphainv<sp/>*<sp/>Qd<sp/>*<sp/>(0.<sp/>-<sp/>k2r)<sp/>-<sp/>0.5*(CVLLd<sp/>+<sp/>CVLRd));</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>gSLd<sp/>=<sp/>-1./(sqrt(2)*sminputs.GF)*(CSLLd<sp/>+<sp/>CSLRd);</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>gVRd<sp/>=<sp/>sqrt(2)/sminputs.GF<sp/>*<sp/>(4.*<ref refid="scanner__utils_8hpp_1a9617ce9ea7d587dcf3839f2ddd03de0b" kindref="member">pi</ref><sp/>/<sp/>sminputs.alphainv<sp/>*<sp/>Qd<sp/>*<sp/>(k1r<sp/>-<sp/>k2l)<sp/>-<sp/>0.5*(CVRRd<sp/>+<sp/>CVRLd));</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>gSRd<sp/>=<sp/>-1./(sqrt(2)*sminputs.GF)*(CSRRd<sp/>+<sp/>CSRLd);</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Qs<sp/>=<sp/>-1./3.;</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>gVLs<sp/>=<sp/>sqrt(2)/sminputs.GF<sp/>*<sp/>(4.*<ref refid="scanner__utils_8hpp_1a9617ce9ea7d587dcf3839f2ddd03de0b" kindref="member">pi</ref><sp/>/<sp/>sminputs.alphainv<sp/>*<sp/>Qs<sp/>*<sp/>(0.<sp/>-<sp/>k2r)<sp/>-<sp/>0.5*(CVLLs<sp/>+<sp/>CVLRs));</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>gSLs<sp/>=<sp/>-1./(sqrt(2)*sminputs.GF)*(CSLLs<sp/>+<sp/>CSLRs);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>gVRs<sp/>=<sp/>sqrt(2)/sminputs.GF<sp/>*<sp/>(4.*<ref refid="scanner__utils_8hpp_1a9617ce9ea7d587dcf3839f2ddd03de0b" kindref="member">pi</ref><sp/>/<sp/>sminputs.alphainv<sp/>*<sp/>Qs<sp/>*<sp/>(k1r<sp/>-<sp/>k2l)<sp/>-<sp/>0.5*(CVRRs<sp/>+<sp/>CVRLs));</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>gSRs<sp/>=<sp/>-1./(sqrt(2)*sminputs.GF)*(CSRRs<sp/>+<sp/>CSRLs);</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GVup<sp/>=<sp/>2,<sp/>GVdn<sp/>=<sp/>2,<sp/>GVdp<sp/>=<sp/>1,<sp/>GVun<sp/>=<sp/>1,<sp/>GVsp<sp/>=<sp/>0,<sp/>GVsn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GSup<sp/>=<sp/>5.1,<sp/>GSdn<sp/>=<sp/>5.1,<sp/>GSdp<sp/>=<sp/>4.3,<sp/>GSun<sp/>=<sp/>4.3,<sp/>GSsp<sp/>=<sp/>2.5,<sp/>GSsn<sp/>=<sp/>2.5;</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g0SL<sp/>=<sp/>0.5*(gSLu*(GSup<sp/>+<sp/>GSun)<sp/>+<sp/>gSLd*(GSdp<sp/>+<sp/>GSdn)<sp/>+<sp/>gSLs*(GSsp<sp/>+<sp/>GSsn));</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g0SR<sp/>=<sp/>0.5*(gSRu*(GSup<sp/>+<sp/>GSun)<sp/>+<sp/>gSRd*(GSdp<sp/>+<sp/>GSdn)<sp/>+<sp/>gSRs*(GSsp<sp/>+<sp/>GSsn));</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g0VL<sp/>=<sp/>0.5*(gVLu*(GVup<sp/>+<sp/>GVun)<sp/>+<sp/>gVLd*(GVdp<sp/>+<sp/>GVdn)<sp/>+<sp/>gVLs*(GVsp<sp/>+<sp/>GVsn));</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g0VR<sp/>=<sp/>0.5*(gVRu*(GVup<sp/>+<sp/>GVun)<sp/>+<sp/>gVRd*(GVdp<sp/>+<sp/>GVdn)<sp/>+<sp/>gVRs*(GVsp<sp/>+<sp/>GVsn));</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g1SL<sp/>=<sp/>0.5*(gSLu*(GSup<sp/>-<sp/>GSun)<sp/>+<sp/>gSLd*(GSdp<sp/>-<sp/>GSdn)<sp/>+<sp/>gSLs*(GSsp<sp/>-<sp/>GSsn));</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g1SR<sp/>=<sp/>0.5*(gSRu*(GSup<sp/>-<sp/>GSun)<sp/>+<sp/>gSRd*(GSdp<sp/>-<sp/>GSdn)<sp/>+<sp/>gSRs*(GSsp<sp/>-<sp/>GSsn));</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g1VL<sp/>=<sp/>0.5*(gVLu*(GVup<sp/>-<sp/>GVun)<sp/>+<sp/>gVLd*(GVdp<sp/>-<sp/>GVdn)<sp/>+<sp/>gVLs*(GVsp<sp/>-<sp/>GVsn));</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g1VR<sp/>=<sp/>0.5*(gVRu*(GVup<sp/>-<sp/>GVun)<sp/>+<sp/>gVRd*(GVdp<sp/>-<sp/>GVdn)<sp/>+<sp/>gVRs*(GVsp<sp/>-<sp/>GVsn));</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Contribution<sp/>to<sp/>mu<sp/>-<sp/>e<sp/>conversion<sp/>in<sp/>Ti<sp/>nuclei<sp/>from<sp/>RHNs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RHN_mueTi(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::RHN_mueTi;</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SMInputs<sp/>sminputs<sp/>=<sp/>*Dep::SMINPUTS;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>m_nu<sp/>=<sp/>*Dep::m_nu;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Vnu<sp/>=<sp/>*Dep::SeesawI_Vnu;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Theta<sp/>=<sp/>*Dep::SeesawI_Theta;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>mnu<sp/>=<sp/>{real(m_nu(0,0)),<sp/>real(m_nu(1,1)),<sp/>real(m_nu(2,2)),<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_1&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_2&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_3&quot;</highlight><highlight class="normal">]};</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;complex&lt;double&gt;,3,6&gt;<sp/>U;</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>i++)</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;3;<sp/>j++)</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U(i,j)<sp/>=<sp/>Vnu(i,j);</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U(i,j+3)<sp/>=<sp/>Theta(i,j);</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>g0SL,<sp/>g0SR,<sp/>g0VL,<sp/>g0VR,<sp/>g1SL,<sp/>g1SR,<sp/>g1VL,<sp/>g1VR;</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RHN_mue_FF(sminputs,<sp/>mnu,<sp/>U,<sp/>*Param[</highlight><highlight class="stringliteral">&quot;mH&quot;</highlight><highlight class="normal">],<sp/>g0SL,<sp/>g0SR,<sp/>g0VL,<sp/>g0VR,<sp/>g1SL,<sp/>g1SR,<sp/>g1VL,<sp/>g1VR);</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parameters<sp/>for<sp/>Ti,<sp/>from<sp/>Table<sp/>1<sp/>in<sp/>1209.2679<sp/>for<sp/>Ti</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Z<sp/>=<sp/>22,<sp/>N<sp/>=<sp/>26;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Zeff<sp/>=<sp/>17.6,<sp/>Fp<sp/>=<sp/>0.54;</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hbar<sp/>=<sp/>6.582119514e-25;<sp/></highlight><highlight class="comment">//<sp/>GeV<sp/>*<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GammaCapt<sp/>=<sp/>2.59e6<sp/>*<sp/>hbar;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.GF,2)*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.mMu,5)*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(Zeff,4)*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(Fp,2))<sp/>/<sp/>(8.*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(pi,4)*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.alphainv,3)*Z*GammaCapt)<sp/>*<sp/>(norm((Z+N)*(g0VL<sp/>+<sp/>g0SL)<sp/>+<sp/>(Z-N)*(g1VL<sp/>+<sp/>g1SL))<sp/>+<sp/>norm((Z+N)*(g0VR<sp/>+<sp/>g0SR)<sp/>+<sp/>(Z-N)*(g1VR<sp/>+<sp/>g1SR)));</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Contribution<sp/>to<sp/>mu<sp/>-<sp/>e<sp/>conversion<sp/>in<sp/>Au<sp/>nuclei<sp/>from<sp/>RHNs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RHN_mueAu(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::RHN_mueAu;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SMInputs<sp/>sminputs<sp/>=<sp/>*Dep::SMINPUTS;</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>m_nu<sp/>=<sp/>*Dep::m_nu;</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Vnu<sp/>=<sp/>*Dep::SeesawI_Vnu;</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Theta<sp/>=<sp/>*Dep::SeesawI_Theta;</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>mnu<sp/>=<sp/>{real(m_nu(0,0)),<sp/>real(m_nu(1,1)),<sp/>real(m_nu(2,2)),<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_1&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_2&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_3&quot;</highlight><highlight class="normal">]};</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;complex&lt;double&gt;,3,6&gt;<sp/>U;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>i++)</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;3;<sp/>j++)</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U(i,j)<sp/>=<sp/>Vnu(i,j);</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U(i,j+3)<sp/>=<sp/>Theta(i,j);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>g0SL,<sp/>g0SR,<sp/>g0VL,<sp/>g0VR,<sp/>g1SL,<sp/>g1SR,<sp/>g1VL,<sp/>g1VR;</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RHN_mue_FF(sminputs,<sp/>mnu,<sp/>U,<sp/>*Param[</highlight><highlight class="stringliteral">&quot;mH&quot;</highlight><highlight class="normal">],<sp/>g0SL,<sp/>g0SR,<sp/>g0VL,<sp/>g0VR,<sp/>g1SL,<sp/>g1SR,<sp/>g1VL,<sp/>g1VR);</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parameters<sp/>for<sp/>Au,<sp/>from<sp/>Table<sp/>1<sp/>in<sp/>1209.2679<sp/>for<sp/>Au</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Z<sp/>=<sp/>79,<sp/>N<sp/>=<sp/>118;</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Zeff<sp/>=<sp/>33.5,<sp/>Fp<sp/>=<sp/>0.16;</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hbar<sp/>=<sp/>6.582119514e-25;<sp/></highlight><highlight class="comment">//<sp/>GeV<sp/>*<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GammaCapt<sp/>=<sp/>13.07e6<sp/>*<sp/>hbar;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.GF,2)*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.mMu,5)*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(Zeff,4)*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(Fp,2))<sp/>/<sp/>(8.*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(pi,4)*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.alphainv,3)*Z*GammaCapt)<sp/>*<sp/>(norm((Z+N)*(g0VL<sp/>+<sp/>g0SL)<sp/>+<sp/>(Z-N)*(g1VL<sp/>+<sp/>g1SL))<sp/>+<sp/>norm((Z+N)*(g0VR<sp/>+<sp/>g0SR)<sp/>+<sp/>(Z-N)*(g1VR<sp/>+<sp/>g1SR)));</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Contribution<sp/>to<sp/>mu<sp/>-<sp/>e<sp/>conversion<sp/>in<sp/>Pb<sp/>nuclei<sp/>from<sp/>RHNs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RHN_muePb(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::RHN_muePb;</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SMInputs<sp/>sminputs<sp/>=<sp/>*Dep::SMINPUTS;</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>m_nu<sp/>=<sp/>*Dep::m_nu;</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Vnu<sp/>=<sp/>*Dep::SeesawI_Vnu;</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3cd<sp/>Theta<sp/>=<sp/>*Dep::SeesawI_Theta;</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;double&gt;<sp/>mnu<sp/>=<sp/>{real(m_nu(0,0)),<sp/>real(m_nu(1,1)),<sp/>real(m_nu(2,2)),<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_1&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_2&quot;</highlight><highlight class="normal">],<sp/>*Param[</highlight><highlight class="stringliteral">&quot;M_3&quot;</highlight><highlight class="normal">]};</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix&lt;complex&lt;double&gt;,3,6&gt;<sp/>U;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;3;<sp/>i++)</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;3;<sp/>j++)</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U(i,j)<sp/>=<sp/>Vnu(i,j);</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>U(i,j+3)<sp/>=<sp/>Theta(i,j);</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>complex&lt;double&gt;<sp/>g0SL,<sp/>g0SR,<sp/>g0VL,<sp/>g0VR,<sp/>g1SL,<sp/>g1SR,<sp/>g1VL,<sp/>g1VR;</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RHN_mue_FF(sminputs,<sp/>mnu,<sp/>U,<sp/>*Param[</highlight><highlight class="stringliteral">&quot;mH&quot;</highlight><highlight class="normal">],<sp/>g0SL,<sp/>g0SR,<sp/>g0VL,<sp/>g0VR,<sp/>g1SL,<sp/>g1SR,<sp/>g1VL,<sp/>g1VR);</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parameters<sp/>for<sp/>Pb,<sp/>from<sp/>Table<sp/>1<sp/>in<sp/>1209.2679<sp/>for<sp/>Pb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Z<sp/>=<sp/>82,<sp/>N<sp/>=<sp/>126;</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Zeff<sp/>=<sp/>34.,<sp/>Fp<sp/>=<sp/>0.15;</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hbar<sp/>=<sp/>6.582119514e-25;<sp/></highlight><highlight class="comment">//<sp/>GeV<sp/>*<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>GammaCapt<sp/>=<sp/>13.45e6<sp/>*<sp/>hbar;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.GF,2)*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.mMu,5)*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(Zeff,4)*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(Fp,2))<sp/>/<sp/>(8.*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(pi,4)*<ref refid="scanner__utils_8hpp_1a40cbcd2cdb26318cca622e0584a8d67f" kindref="member">pow</ref>(sminputs.alphainv,3)*Z*GammaCapt)<sp/>*<sp/>(norm((Z+N)*(g0VL<sp/>+<sp/>g0SL)<sp/>+<sp/>(Z-N)*(g1VL<sp/>+<sp/>g1SL))<sp/>+<sp/>norm((Z+N)*(g0VR<sp/>+<sp/>g0SR)<sp/>+<sp/>(Z-N)*(g1VR<sp/>+<sp/>g1SR)));</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a2680f31b7e0f37060a25cf55d733ac1b" kindref="member">l2lgamma_likelihood</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::l2lgamma_likelihood;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>boost::numeric::ublas::matrix&lt;double&gt;<sp/>cov_exp,<sp/>value_exp;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>th_err[3];</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theory[3];</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>and<sp/>calculate<sp/>things<sp/>based<sp/>on<sp/>the<sp/>observed<sp/>data<sp/>only<sp/>the<sp/>first<sp/>time<sp/>through,<sp/>as<sp/>none<sp/>of<sp/>it<sp/>depends<sp/>on<sp/>the<sp/>model<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>in<sp/>experimental<sp/>measuremens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flav_reader<sp/>fread(GAMBIT_DIR<sp/><sp/></highlight><highlight class="stringliteral">&quot;/FlavBit/data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.debug_mode(flav_debug);</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mu<sp/>-&gt;<sp/>e<sp/>gamma</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BR_muegamma&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tau<sp/>-&gt;<sp/>e<sp/>gamma</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BR_tauegamma&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tau<sp/>-&gt;<sp/>mu<sp/>gamma</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BR_taumugamma&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.initialise_matrices();</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cov_exp=fread.get_exp_cov();</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_exp=fread.get_exp_value();</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>th_err[i]<sp/>=<sp/>fread.get_th_err()(i,0).first;</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>over.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>theory[0]<sp/>=<sp/>*Dep::muegamma;</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;mu-<sp/>-&gt;<sp/>e-<sp/>gamma<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>theory[0]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>theory[1]<sp/>=<sp/>*Dep::tauegamma;</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tau-<sp/>-&gt;<sp/>e-<sp/>gamma<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>theory[1]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>theory[2]<sp/>=<sp/>*Dep::taumugamma;</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tau-<sp/>-&gt;<sp/>mu-<sp/>gamma<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>theory[2]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>Stats::gaussian_upper_limit(theory[i],<sp/>value_exp(i,0),<sp/>th_err[i],<sp/>sqrt(cov_exp(i,i)),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a6dd06b40e6c27f8e31434a5302594773" kindref="member">l2lll_likelihood</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::l2lll_likelihood;</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>boost::numeric::ublas::matrix&lt;double&gt;<sp/>cov_exp,<sp/>value_exp;</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>th_err[7];</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theory[7];</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>and<sp/>calculate<sp/>things<sp/>based<sp/>on<sp/>the<sp/>observed<sp/>data<sp/>only<sp/>the<sp/>first<sp/>time<sp/>through,<sp/>as<sp/>none<sp/>of<sp/>it<sp/>depends<sp/>on<sp/>the<sp/>model<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>in<sp/>experimental<sp/>measuremens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flav_reader<sp/>fread(GAMBIT_DIR<sp/><sp/></highlight><highlight class="stringliteral">&quot;/FlavBit/data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.debug_mode(flav_debug);</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mu-<sp/>-&gt;<sp/>e-<sp/>e-<sp/>e+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BR_mueee&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tau-<sp/>-&gt;<sp/>e-<sp/>e-<sp/>e+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BR_taueee&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tau-<sp/>-&gt;<sp/>mu-<sp/>mu-<sp/>mu+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BR_taumumumu&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tau-<sp/>-&gt;<sp/>mu-<sp/>e-<sp/>e+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BR_taumuee&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tau-<sp/>-&gt;<sp/>e-<sp/>e-<sp/>mu+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BR_taueemu&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tau-<sp/>-&gt;<sp/>e-<sp/>mu-<sp/>mu+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BR_tauemumu&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tau-<sp/>-&gt;<sp/>mu-<sp/>mu-<sp/>e+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BR_taumumue&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.initialise_matrices();</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cov_exp=fread.get_exp_cov();</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_exp=fread.get_exp_value();</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>7;<sp/>++i)</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>th_err[i]<sp/>=<sp/>fread.get_th_err()(i,0).first;</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>over.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>theory[0]<sp/>=<sp/>*Dep::mueee;</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;mu-<sp/><sp/>-&gt;<sp/>e-<sp/><sp/>e-<sp/><sp/>e+<sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>theory[0]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>theory[1]<sp/>=<sp/>*Dep::taueee;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tau-<sp/>-&gt;<sp/>e-<sp/><sp/>e-<sp/><sp/>e+<sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>theory[1]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>theory[2]<sp/>=<sp/>*Dep::taumumumu;</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tau-<sp/>-&gt;<sp/>mu-<sp/>mu-<sp/>mu+<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>theory[2]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>theory[3]<sp/>=<sp/>*Dep::taumuee;</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tau-<sp/>-&gt;<sp/>mu-<sp/>e-<sp/><sp/>e-<sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>theory[3]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>theory[4]<sp/>=<sp/>*Dep::taueemu;</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tau-<sp/>-&gt;<sp/>e-<sp/><sp/>e-<sp/><sp/>mu+<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>theory[4]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>theory[5]<sp/>=<sp/>*Dep::tauemumu;</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tau-<sp/>-&gt;<sp/>e-<sp/><sp/>mu-<sp/>mu+<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>theory[5]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>theory[6]<sp/>=<sp/>*Dep::taumumue;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tau-<sp/>-&gt;<sp/>mu-<sp/>mu-<sp/>e+<sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>theory[6]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>7;<sp/>++i)</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>Stats::gaussian_upper_limit(theory[i],<sp/>value_exp(i,0),<sp/>th_err[i],<sp/>sqrt(cov_exp(i,i)),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"></highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a96c184276e79625ee38a7bf575ee6094" kindref="member">mu2e_likelihood</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::mu2e_likelihood;</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"></highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>boost::numeric::ublas::matrix&lt;double&gt;<sp/>cov_exp,<sp/>value_exp;</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_measurements<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>th_err[3];</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theory[3];</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>and<sp/>calculate<sp/>things<sp/>based<sp/>on<sp/>the<sp/>observed<sp/>data<sp/>only<sp/>the<sp/>first<sp/>time<sp/>through,<sp/>as<sp/>none<sp/>of<sp/>it<sp/>depends<sp/>on<sp/>the<sp/>model<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>in<sp/>experimental<sp/>measuremens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Flav_reader<sp/>fread(GAMBIT_DIR<sp/><sp/></highlight><highlight class="stringliteral">&quot;/FlavBit/data&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.debug_mode(flav_debug);</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mu<sp/>-<sp/>e<sp/>(Ti)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;R_mueTi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mu<sp/>-<sp/>e<sp/>(Au)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;R_mueAu&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mu<sp/>-<sp/>e<sp/>(Pb)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.read_yaml_measurement(</highlight><highlight class="stringliteral">&quot;flav_data.yaml&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;R_muePb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread.initialise_matrices();</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cov_exp=fread.get_exp_cov();</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_exp=fread.get_exp_value();</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n_measurements;<sp/>++i)</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>th_err[i]<sp/>=<sp/>fread.get_th_err()(i,0).first;</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>over.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>theory[0]<sp/>=<sp/>*Dep::mueTi;</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;mu<sp/>-<sp/>e<sp/>(Ti)<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>theory[0]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>theory[1]<sp/>=<sp/>*Dep::mueAu;</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;mu<sp/>-<sp/>e<sp/>(Au)<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>theory[1]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>theory[2]<sp/>=<sp/>*Dep::muePb;</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(flav_debug)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;mu<sp/>-<sp/>e<sp/>(Pb)<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>theory[2]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n_measurements;<sp/>++i)</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>Stats::gaussian_upper_limit(theory[i],<sp/>value_exp(i,0),<sp/>th_err[i],<sp/>sqrt(cov_exp(i,i)),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Recognised<sp/>sub-capabilities:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>RD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>RDstar</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1aeb8fa9883317676b85bc8989a4be3e92" kindref="member">HEPLike_RDRDstar_LogLikelihood</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>result)</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::HEPLike_RDRDstar_LogLikelihood;</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>inputfile<sp/>=<sp/><ref refid="FlavBit_8cpp_1a8312cda0f84ac464adf15fc3e52f140a" kindref="member">path_to_latest_heplike_data</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data/HFLAV_18/Semileptonic/RD_RDstar.yaml&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>HepLike_default::HL_nDimGaussian<sp/>nDimGaussian(inputfile);</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Debug:<sp/>Reading<sp/>HepLike<sp/>data<sp/>file:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>inputfile<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nDimGaussian.Read();</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>SuperIso<sp/>is<sp/>not<sp/>ready<sp/>to<sp/>give<sp/>correlations<sp/>for<sp/>these<sp/>observables.<sp/>So<sp/>currently<sp/>we<sp/>fall<sp/>back<sp/>to<sp/>the<sp/>old<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Below<sp/>code<sp/>is<sp/>for<sp/>future<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>static<sp/>std::vector&lt;str&gt;<sp/>obs_list<sp/>=<sp/>Downstream::subcaps-&gt;getNames();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flav_prediction<sp/>prediction<sp/>=<sp/>*Dep::prediction_RDRDstar;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flav_observable_map<sp/>theory<sp/>=<sp/>prediction.central_values;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flav_covariance_map<sp/>theory_covariance<sp/>=<sp/>prediction.covariance;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>result<sp/>=<sp/>nDimGaussian.GetLogLikelihood(get_obs_theory(prediction,<sp/>obs_list),<sp/>get_obs_covariance(prediction,<sp/>obs_list));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;<sp/>theory{*Dep::RD,<sp/>*Dep::RDstar};</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>nDimGaussian.GetLogLikelihood(theory<sp/></highlight><highlight class="comment">/*<sp/>,<sp/>theory_covariance<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;HEPLike_RDRDstar_LogLikelihood<sp/>result:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>HEPLIKE_GAUSSIAN_1D_LIKELIHOOD(name,<sp/>file)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2353"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>CAT_3(HEPLike_,name,_LogLikelihood)(double<sp/>&amp;result)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2354"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2355"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>CAT_3(Pipes::HEPLike_,name,_LogLikelihood);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2356"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>std::string<sp/>inputfile<sp/>=<sp/>path_to_latest_heplike_data()<sp/>+<sp/>file;<sp/><sp/>\</highlight></codeline>
<codeline lineno="2357"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>HepLike_default::HL_Gaussian<sp/>gaussian(inputfile);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2358"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>first<sp/>=<sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2359"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2360"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(first)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2361"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2362"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Debug:<sp/>Reading<sp/>HepLike<sp/>data<sp/>file:<sp/>&quot;<sp/>&lt;&lt;<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2363"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inputfile<sp/>&lt;&lt;<sp/>endl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2364"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gaussian.Read();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2365"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2366"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2367"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2368"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>theory<sp/>=<sp/>CAT(Dep::prediction_,name)-&gt;central_values.begin()-&gt;second;<sp/>\</highlight></codeline>
<codeline lineno="2369"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>theory_variance<sp/>=<sp/>CAT(Dep::prediction_,name)-&gt;covariance.begin()-&gt;<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2370"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>second.begin()-&gt;second;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2371"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>gaussian.GetLogLikelihood(theory,<sp/>theory_variance);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2372"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2373"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;HEPLike_&quot;<sp/>&lt;&lt;<sp/>#name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2374"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;_LogLikelihood<sp/>result:<sp/>&quot;<sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>std::endl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2375"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="2376"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="FlavBit_8cpp_1a7710fbf1ce076c3d87e4a959c0cc82fe" kindref="member">HEPLIKE_GAUSSIAN_1D_LIKELIHOOD</ref>(b2sgamma,<sp/></highlight><highlight class="stringliteral">&quot;/data/HFLAV_18/RD/b2sgamma.yaml&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="FlavBit_8cpp_1a7710fbf1ce076c3d87e4a959c0cc82fe" kindref="member">HEPLIKE_GAUSSIAN_1D_LIKELIHOOD</ref>(B2Kstargamma,<sp/>&quot;/data/HFLAV_18/RD/B2Kstar_gamma_BR.yaml&quot;)</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="FlavBit_8cpp_1a7710fbf1ce076c3d87e4a959c0cc82fe" kindref="member">HEPLIKE_GAUSSIAN_1D_LIKELIHOOD</ref>(B2taunu,<sp/>&quot;/data/PDG/Semileptonic/B2TauNu.yaml&quot;)</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HEPLike_B2mumu_LogLikelihood_CMS(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::HEPLike_B2mumu_LogLikelihood_CMS;</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>inputfile<sp/>=<sp/><ref refid="FlavBit_8cpp_1a8312cda0f84ac464adf15fc3e52f140a" kindref="member">path_to_latest_heplike_data</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data/CMS/RD/B2MuMu/CMS-PAS-BPH-16-004.yaml&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;str&gt;<sp/>obs_list<sp/>=<sp/>Downstream::subcaps-&gt;getNames();</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>HepLike_default::HL_nDimLikelihood<sp/>nDimLikelihood(inputfile);</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obs_list.empty())<sp/>FlavBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>subcapabilities<sp/>specified!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Debug:<sp/>Reading<sp/>HepLike<sp/>data<sp/>file:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>inputfile<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nDimLikelihood.Read();</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FlavBit_8cpp_1a077c03b8cc0f7c72c3200af23d7b8a01" kindref="member">update_obs_list</ref>(obs_list,<sp/>nDimLikelihood.GetObservables());</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>nDimLikelihood<sp/>does<sp/>not<sp/>support<sp/>theory<sp/>errors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>nDimLikelihood.GetLogLikelihood(<ref refid="FlavBit_8cpp_1abdc4be9b8587ab5c72de1612631c6a5b" kindref="member">get_obs_theory</ref>(*Dep::prediction_B2mumu,<sp/>obs_list));</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;HEPLike_B2mumu_LogLikelihood_CMS<sp/>result:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a6e7c90a4351eff7fec68e425805ef833" kindref="member">HEPLike_B2mumu_LogLikelihood_Atlas</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::HEPLike_B2mumu_LogLikelihood_Atlas;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>inputfile<sp/>=<sp/><ref refid="FlavBit_8cpp_1a8312cda0f84ac464adf15fc3e52f140a" kindref="member">path_to_latest_heplike_data</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data/ATLAS/RD/B2MuMu/CERN-EP-2018-291.yaml&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;str&gt;<sp/>obs_list<sp/>=<sp/>Downstream::subcaps-&gt;getNames();</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>HepLike_default::HL_nDimLikelihood<sp/>nDimLikelihood(inputfile);</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obs_list.empty())<sp/>FlavBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>subcapabilities<sp/>specified!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Debug:<sp/>Reading<sp/>HepLike<sp/>data<sp/>file:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>inputfile<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nDimLikelihood.Read();</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FlavBit_8cpp_1a077c03b8cc0f7c72c3200af23d7b8a01" kindref="member">update_obs_list</ref>(obs_list,<sp/>nDimLikelihood.GetObservables());</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>nDimLikelihood<sp/>does<sp/>not<sp/>support<sp/>theory<sp/>errors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>nDimLikelihood.GetLogLikelihood(<ref refid="FlavBit_8cpp_1abdc4be9b8587ab5c72de1612631c6a5b" kindref="member">get_obs_theory</ref>(*Dep::prediction_B2mumu,<sp/>obs_list));</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"></highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;HEPLike_B2mumu_LogLikelihood_Atlas<sp/>result:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a07251afa3bb76885f9680ab86159d40a" kindref="member">HEPLike_B2mumu_LogLikelihood_LHCb</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::HEPLike_B2mumu_LogLikelihood_LHCb;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>inputfile<sp/>=<sp/><ref refid="FlavBit_8cpp_1a8312cda0f84ac464adf15fc3e52f140a" kindref="member">path_to_latest_heplike_data</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data/LHCb/RD/B2MuMu/CERN-EP-2017-100.yaml&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;str&gt;<sp/>obs_list<sp/>=<sp/>Downstream::subcaps-&gt;getNames();</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>HepLike_default::HL_nDimLikelihood<sp/>nDimLikelihood(inputfile);</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obs_list.empty())<sp/>FlavBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>subcapabilities<sp/>specified!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Debug:<sp/>Reading<sp/>HepLike<sp/>data<sp/>file:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>inputfile<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nDimLikelihood.Read();</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FlavBit_8cpp_1a077c03b8cc0f7c72c3200af23d7b8a01" kindref="member">update_obs_list</ref>(obs_list,<sp/>nDimLikelihood.GetObservables());</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>nDimLikelihood<sp/>does<sp/>not<sp/>support<sp/>theory<sp/>errors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>nDimLikelihood.GetLogLikelihood(<ref refid="FlavBit_8cpp_1abdc4be9b8587ab5c72de1612631c6a5b" kindref="member">get_obs_theory</ref>(*Dep::prediction_B2mumu,<sp/>obs_list));</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;HEPLike_B2mumu_LogLikelihood_LHCb<sp/>result:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1aafa28b7c0dd79eb4acf98ecedcbfcd26" kindref="member">HEPLike_B2KstarmumuAng_LogLikelihood_Atlas</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::HEPLike_B2KstarmumuAng_LogLikelihood_Atlas;</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>inputfile<sp/>=<sp/><ref refid="FlavBit_8cpp_1a8312cda0f84ac464adf15fc3e52f140a" kindref="member">path_to_latest_heplike_data</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data/ATLAS/RD/Bd2KstarMuMu_Angular/CERN-EP-2017-161_q2_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;str&gt;<sp/>obs_list<sp/>=<sp/>Downstream::subcaps-&gt;getNames();</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;HepLike_default::HL_nDimGaussian&gt;<sp/>nDimGaussian<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;0.1_2.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;2.0_4.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;4.0_8.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obs_list.empty())<sp/>FlavBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>subcapabilities<sp/>specified!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nDimGaussian.size();<sp/>++i)</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Debug:<sp/>Reading<sp/>HepLike<sp/>data<sp/>file:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nDimGaussian[i].Read();</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FlavBit_8cpp_1a077c03b8cc0f7c72c3200af23d7b8a01" kindref="member">update_obs_list</ref>(obs_list,<sp/>nDimGaussian[0].GetObservables());</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;flav_prediction&gt;<sp/>prediction<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_0p1_2_Atlas,</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_2_4_Atlas,</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_4_8_Atlas,</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nDimGaussian.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>nDimGaussian[i].GetLogLikelihood(<ref refid="FlavBit_8cpp_1abdc4be9b8587ab5c72de1612631c6a5b" kindref="member">get_obs_theory</ref>(prediction[i],<sp/>obs_list),<sp/><ref refid="FlavBit_8cpp_1a0dcfa77d5d9a12e59e775bdeb1af7ffa" kindref="member">get_obs_covariance</ref>(prediction[i],<sp/>obs_list));</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;HEPLike_B2KstarmumuAng_LogLikelihood_Atlas<sp/>result:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1adcec5ef3fb98ac1a5bcaca27881cf32a" kindref="member">HEPLike_B2KstarmumuAng_LogLikelihood_CMS</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::HEPLike_B2KstarmumuAng_LogLikelihood_CMS;</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>inputfile<sp/>=<sp/><ref refid="FlavBit_8cpp_1a8312cda0f84ac464adf15fc3e52f140a" kindref="member">path_to_latest_heplike_data</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data/CMS/RD/Bd2KstarMuMu_Angular/CERN-EP-2017-240_q2_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;str&gt;<sp/>obs_list<sp/>=<sp/>Downstream::subcaps-&gt;getNames();</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;HepLike_default::HL_nDimBifurGaussian&gt;<sp/>nDimBifurGaussian<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile+</highlight><highlight class="stringliteral">&quot;1.0_2.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile+</highlight><highlight class="stringliteral">&quot;2.0_4.3.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile+</highlight><highlight class="stringliteral">&quot;4.3_6.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile+</highlight><highlight class="stringliteral">&quot;6.0_8.68.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile+</highlight><highlight class="stringliteral">&quot;10.09_12.86.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile+</highlight><highlight class="stringliteral">&quot;14.18_16.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile+</highlight><highlight class="stringliteral">&quot;16.0_19.0.yaml&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obs_list.empty())<sp/>FlavBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>subcapabilities<sp/>specified!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nDimBifurGaussian.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Debug:<sp/>Reading<sp/>HepLike<sp/>data<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nDimBifurGaussian[i].Read();</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FlavBit_8cpp_1a077c03b8cc0f7c72c3200af23d7b8a01" kindref="member">update_obs_list</ref>(obs_list,<sp/>nDimBifurGaussian[0].GetObservables());</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;flav_prediction&gt;<sp/>prediction<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_1_2_CMS,</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_2_4p3_CMS,</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_4p3_6_CMS,</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_6_8p68_CMS,</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_10p09_12p86_CMS,</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_14p18_16_CMS,</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_16_19_CMS</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"></highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nDimBifurGaussian.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>nDimBifurGaussian[i].GetLogLikelihood(<ref refid="FlavBit_8cpp_1abdc4be9b8587ab5c72de1612631c6a5b" kindref="member">get_obs_theory</ref>(prediction[i],<sp/>obs_list),<sp/><ref refid="FlavBit_8cpp_1a0dcfa77d5d9a12e59e775bdeb1af7ffa" kindref="member">get_obs_covariance</ref>(prediction[i],<sp/>obs_list));</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;HEPLike_B2KstarmumuAng_LogLikelihood_CMS<sp/>result:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a14764afb8b07affed7d5532e8622c584" kindref="member">HEPLike_B2KstarmumuAng_LogLikelihood_Belle</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::HEPLike_B2KstarmumuAng_LogLikelihood_Belle;</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>inputfile<sp/>=<sp/><ref refid="FlavBit_8cpp_1a8312cda0f84ac464adf15fc3e52f140a" kindref="member">path_to_latest_heplike_data</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data/Belle/RD/Bd2KstarMuMu_Angular/KEK-2016-54_q2_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;str&gt;<sp/>obs_list<sp/>=<sp/>Downstream::subcaps-&gt;getNames();</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;HepLike_default::HL_nDimBifurGaussian&gt;<sp/>nDimBifurGaussian<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;0.1_4.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;4.0_8.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;10.09_12.9.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;14.18_19.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obs_list.empty())<sp/>FlavBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>subcapabilities<sp/>specified!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nDimBifurGaussian.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Debug:<sp/>Reading<sp/>HepLike<sp/>data<sp/>file:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nDimBifurGaussian[i].Read();</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FlavBit_8cpp_1a077c03b8cc0f7c72c3200af23d7b8a01" kindref="member">update_obs_list</ref>(obs_list,<sp/>nDimBifurGaussian[0].GetObservables());</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;flav_prediction&gt;<sp/>prediction<sp/>=</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_0p1_4_Belle,</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_4_8_Belle,</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_10p9_12p9_Belle,</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_14p18_19_Belle,</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nDimBifurGaussian.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>nDimBifurGaussian[i].GetLogLikelihood(<ref refid="FlavBit_8cpp_1abdc4be9b8587ab5c72de1612631c6a5b" kindref="member">get_obs_theory</ref>(prediction[i],<sp/>obs_list),<sp/><ref refid="FlavBit_8cpp_1a0dcfa77d5d9a12e59e775bdeb1af7ffa" kindref="member">get_obs_covariance</ref>(prediction[i],<sp/>obs_list));</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;HEPLike_B2KstarmumuAng_LogLikelihood_Belle<sp/>result:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a4094e1b5374f61597df1d992d6a78955" kindref="member">HEPLike_B2KstarellellAng_LogLikelihood_Belle</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::HEPLike_B2KstarellellAng_LogLikelihood_Belle;</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>inputfile<sp/>=<sp/><ref refid="FlavBit_8cpp_1a8312cda0f84ac464adf15fc3e52f140a" kindref="member">path_to_latest_heplike_data</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data/Belle/RD/Bd2KstarEllEll_Angular/KEK-2016-54_q2_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;str&gt;<sp/>obs_list<sp/>=<sp/>Downstream::subcaps-&gt;getNames();</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;HepLike_default::HL_nDimBifurGaussian&gt;<sp/>nDimBifurGaussian<sp/>=</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;0.1_4.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;4.0_8.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;10.09_12.9.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;14.18_19.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obs_list.empty())<sp/>FlavBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>subcapabilities<sp/>specified!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nDimBifurGaussian.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Debug:<sp/>Reading<sp/>HepLike<sp/>data<sp/>file:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nDimBifurGaussian[i].Read();</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FlavBit_8cpp_1a077c03b8cc0f7c72c3200af23d7b8a01" kindref="member">update_obs_list</ref>(obs_list,<sp/>nDimBifurGaussian[0].GetObservables());</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;flav_prediction&gt;<sp/>prediction<sp/>=</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_0p1_4_Belle,</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_4_8_Belle,</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_10p9_12p9_Belle,</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_14p18_19_Belle,</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"></highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nDimBifurGaussian.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>nDimBifurGaussian[i].GetLogLikelihood(<ref refid="FlavBit_8cpp_1abdc4be9b8587ab5c72de1612631c6a5b" kindref="member">get_obs_theory</ref>(prediction[i],<sp/>obs_list),<sp/><ref refid="FlavBit_8cpp_1a0dcfa77d5d9a12e59e775bdeb1af7ffa" kindref="member">get_obs_covariance</ref>(prediction[i],<sp/>obs_list));</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"></highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;HEPLike_B2KstarellellAng_LogLikelihood_Belle<sp/>result:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"></highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a859d9603f5cd1d01efdfcc655e80d6b1" kindref="member">HEPLike_B2KstarmumuAng_LogLikelihood_LHCb</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::HEPLike_B2KstarmumuAng_LogLikelihood_LHCb;</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>inputfile<sp/>=<sp/><ref refid="FlavBit_8cpp_1a8312cda0f84ac464adf15fc3e52f140a" kindref="member">path_to_latest_heplike_data</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data/LHCb/RD/Bd2KstarMuMu_Angular/PH-EP-2015-314_q2_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;str&gt;<sp/>obs_list<sp/>=<sp/>Downstream::subcaps-&gt;getNames();</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;HepLike_default::HL_nDimBifurGaussian&gt;<sp/>nDimBifurGaussian<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;0.1_0.98.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;1.1_2.5.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;2.5_4.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;4.0_6.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;6.0_8.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimBifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;15.0_19.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obs_list.empty())<sp/>FlavBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>subcapabilities<sp/>specified!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nDimBifurGaussian.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Debug:<sp/>Reading<sp/>HepLike<sp/>data<sp/>file:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nDimBifurGaussian[i].Read();</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FlavBit_8cpp_1a077c03b8cc0f7c72c3200af23d7b8a01" kindref="member">update_obs_list</ref>(obs_list,<sp/>nDimBifurGaussian[0].GetObservables());</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;flav_prediction&gt;<sp/>prediction<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_0p1_0p98_LHCb,</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_1p1_2p5_LHCb,</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_2p5_4_LHCb,</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_4_6_LHCb,</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_6_8_LHCb,</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_15_19_LHCb,</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"></highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nDimBifurGaussian.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>nDimBifurGaussian[i].GetLogLikelihood(<ref refid="FlavBit_8cpp_1abdc4be9b8587ab5c72de1612631c6a5b" kindref="member">get_obs_theory</ref>(prediction[i],<sp/>obs_list),<sp/><ref refid="FlavBit_8cpp_1a0dcfa77d5d9a12e59e775bdeb1af7ffa" kindref="member">get_obs_covariance</ref>(prediction[i],<sp/>obs_list));</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;HEPLike_B2KstarmumuAng_LogLikelihood_LHCb<sp/>result:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a9a94dfcc231f7a07d0725e3f485d6bc8" kindref="member">HEPLike_B2KstarmumuAng_LogLikelihood_LHCb_2020</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::HEPLike_B2KstarmumuAng_LogLikelihood_LHCb_2020;</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>inputfile<sp/>=<sp/><ref refid="FlavBit_8cpp_1a8312cda0f84ac464adf15fc3e52f140a" kindref="member">path_to_latest_heplike_data</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data/LHCb/RD/Bd2KstarMuMu_Angular/CERN-EP-2020-027_q2_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;str&gt;<sp/>obs_list<sp/>=<sp/>Downstream::subcaps-&gt;getNames();</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;HepLike_default::HL_nDimGaussian&gt;<sp/>nDimGaussian<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;0.1_0.98.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;1.1_2.5.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;2.5_4.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;4.0_6.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;6.0_8.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;15.0_19.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obs_list.empty())<sp/>FlavBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>subcapabilities<sp/>specified!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"></highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nDimGaussian.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Debug:<sp/>Reading<sp/>HepLike<sp/>data<sp/>file:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nDimGaussian[i].Read();</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FlavBit_8cpp_1a077c03b8cc0f7c72c3200af23d7b8a01" kindref="member">update_obs_list</ref>(obs_list,<sp/>nDimGaussian[0].GetObservables());</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"></highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;flav_prediction&gt;<sp/>prediction<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_0p1_0p98_LHCb,</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_1p1_2p5_LHCb,</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_2p5_4_LHCb,</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_4_6_LHCb,</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_6_8_LHCb,</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_15_19_LHCb,</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nDimGaussian.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>nDimGaussian[i].GetLogLikelihood(<ref refid="FlavBit_8cpp_1abdc4be9b8587ab5c72de1612631c6a5b" kindref="member">get_obs_theory</ref>(prediction[i],<sp/>obs_list),<sp/><ref refid="FlavBit_8cpp_1a0dcfa77d5d9a12e59e775bdeb1af7ffa" kindref="member">get_obs_covariance</ref>(prediction[i],<sp/>obs_list));</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"></highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;HEPLike_B2KstarmumuAng_LogLikelihood_LHCb<sp/>2020<sp/>result:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a067bb9831da3423452b42816f4aba088" kindref="member">HEPLike_B2KstareeAng_Lowq2_LogLikelihood_LHCb_2020</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::HEPLike_B2KstareeAng_Lowq2_LogLikelihood_LHCb_2020;</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>inputfile<sp/>=<sp/><ref refid="FlavBit_8cpp_1a8312cda0f84ac464adf15fc3e52f140a" kindref="member">path_to_latest_heplike_data</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data/LHCb/RD/Bd2KstarEE_Angular/CERN-EP-2020-176.yaml&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;str&gt;<sp/>obs_list<sp/>=<sp/>Downstream::subcaps-&gt;getNames();</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obs_list.empty())<sp/>FlavBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>subcapabilities<sp/>specified!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>HepLike_default::HL_nDimGaussian<sp/>nDimGaussian(inputfile);</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Debug:<sp/>Reading<sp/>HepLike<sp/>data<sp/>file:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>inputfile<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nDimGaussian.Read();</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flav_prediction<sp/>prediction<sp/>=<sp/>*Dep::prediction_B2KstareeAng_0p0008_0p257_LHCb;</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Have<sp/>prediction&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;obs_list.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;obs_list[i]&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"></highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>nDimGaussian.GetLogLikelihood(<ref refid="FlavBit_8cpp_1abdc4be9b8587ab5c72de1612631c6a5b" kindref="member">get_obs_theory</ref>(prediction,<sp/>obs_list),<sp/><ref refid="FlavBit_8cpp_1a0dcfa77d5d9a12e59e775bdeb1af7ffa" kindref="member">get_obs_covariance</ref>(prediction,<sp/>obs_list));</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"></highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;HEPLike_B2KstareeAng_Lowq_LogLikelihood<sp/>result:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"></highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a0b9a1c8d06dd8684f16dab3d1aba827d" kindref="member">HEPLike_Bu2KstarmumuAng_LogLikelihood_LHCb_2020</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::HEPLike_Bu2KstarmumuAng_LogLikelihood_LHCb_2020;</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>inputfile<sp/>=<sp/><ref refid="FlavBit_8cpp_1a8312cda0f84ac464adf15fc3e52f140a" kindref="member">path_to_latest_heplike_data</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data/LHCb/RD/Bu2KstarMuMu_Angular/CERN-EP-2020-239_q2_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;str&gt;<sp/>obs_list<sp/>=<sp/>Downstream::subcaps-&gt;getNames();</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obs_list.empty())<sp/>FlavBit_error().raise(LOCAL_INFO,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>subcapabilities<sp/>specified!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;HepLike_default::HL_nDimGaussian&gt;<sp/>nDimGaussian<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;0.1_0.98.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;1.1_2.5.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;2.5_4.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;4.0_6.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;6.0_8.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_nDimGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;15.0_19.0.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"></highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nDimGaussian.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Debug:<sp/>Reading<sp/>HepLike<sp/>data<sp/>file:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nDimGaussian[i].Read();</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FlavBit_8cpp_1a077c03b8cc0f7c72c3200af23d7b8a01" kindref="member">update_obs_list</ref>(obs_list,<sp/>nDimGaussian[0].GetObservables());</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;flav_prediction&gt;<sp/>prediction<sp/>=</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_0p1_0p98_LHCb,</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_1p1_2p5_LHCb,</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_2p5_4_LHCb,</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_4_6_LHCb,</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_6_8_LHCb,</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuAng_15_19_LHCb,</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"></highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nDimGaussian.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>nDimGaussian[i].GetLogLikelihood(<ref refid="FlavBit_8cpp_1abdc4be9b8587ab5c72de1612631c6a5b" kindref="member">get_obs_theory</ref>(prediction[i],<sp/>obs_list),</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FlavBit_8cpp_1a0dcfa77d5d9a12e59e775bdeb1af7ffa" kindref="member">get_obs_covariance</ref>(prediction[i],<sp/>obs_list));</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"></highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;HEPLike_Bu2KstarmumuAng_LogLikelihood_LHCb<sp/>2020<sp/>result:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"></highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1ae0a1de709d35184abc300132eb3e1240" kindref="member">HEPLike_B2KstarmumuBr_LogLikelihood_LHCb</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::HEPLike_B2KstarmumuBr_LogLikelihood_LHCb;</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>inputfile<sp/>=<sp/><ref refid="FlavBit_8cpp_1a8312cda0f84ac464adf15fc3e52f140a" kindref="member">path_to_latest_heplike_data</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data/LHCb/RD/Bd2KstarMuMu_Br/CERN-EP-2016-141_q2_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;HepLike_default::HL_BifurGaussian&gt;<sp/>BifurGaussian<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_BifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;0.1_0.98.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_BifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;1.1_2.5.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_BifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;2.5_4.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_BifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;4_6.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_BifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;6_8.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_BifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;15_19.yaml&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"></highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>BifurGaussian.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Debug:<sp/>Reading<sp/>HepLike<sp/>data<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BifurGaussian[i].Read();</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;flav_prediction&gt;<sp/>prediction<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuBr_0p1_0p98,</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuBr_1p1_2p5,</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuBr_2p5_4,</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuBr_4_6,</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuBr_6_8,</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KstarmumuBr_15_19</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"></highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"></highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>BifurGaussian.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theory<sp/>=<sp/>prediction[i].central_values.begin()-&gt;second;</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theory_variance<sp/>=<sp/>prediction[i].covariance.begin()-&gt;second.begin()-&gt;second;</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>BifurGaussian[i].GetLogLikelihood(theory,<sp/>theory_variance);</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;HEPLike_B2KstarmumuAng_LogLikelihood_LHCb<sp/>result:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"></highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FlavBit_8cpp_1a53cfdb6f0d7dc6aa6724ff1cd0a827a5" kindref="member">HEPLike_B2KmumuBr_LogLikelihood_LHCb</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::HEPLike_B2KmumuBr_LogLikelihood_LHCb;</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>inputfile<sp/>=<sp/><ref refid="FlavBit_8cpp_1a8312cda0f84ac464adf15fc3e52f140a" kindref="member">path_to_latest_heplike_data</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data/LHCb/RD/B2KMuMu_Br/CERN-PH-EP-2012-263_q2_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;HepLike_default::HL_Gaussian&gt;<sp/>Gaussian<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_Gaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;0.05_2.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_Gaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;2_4.3.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_Gaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;4.3_8.68.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_Gaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;14.18_16.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_Gaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;16_18.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_Gaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;18_22.yaml&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"></highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Gaussian.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Debug:<sp/>Reading<sp/>HepLike<sp/>data<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Gaussian[i].Read();</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;flav_prediction&gt;<sp/>prediction<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KmumuBr_0p05_2,</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KmumuBr_2_4p3,</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KmumuBr_4p3_8p68,</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KmumuBr_14p18_16,</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KmumuBr_16_18,</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_B2KmumuBr_18_22</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"></highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>Gaussian.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theory<sp/>=<sp/>prediction[i].central_values.begin()-&gt;second;</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theory_variance<sp/>=<sp/>prediction[i].covariance.begin()-&gt;second.begin()-&gt;second;</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>Gaussian[i].GetLogLikelihood(theory,<sp/>theory_variance);</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;HEPLike_B2KmumuBR_LogLikelihood_LHCb<sp/>result:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"></highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HEPLike_Bs2phimumuBr_LogLikelihood(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::HEPLike_Bs2phimumuBr_LogLikelihood;</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"></highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>inputfile<sp/>=<sp/><ref refid="FlavBit_8cpp_1a8312cda0f84ac464adf15fc3e52f140a" kindref="member">path_to_latest_heplike_data</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data/LHCb/RD/Bs2PhiMuMu_Br/CERN-PH-EP-2015-145_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;HepLike_default::HL_BifurGaussian&gt;<sp/>BifurGaussian<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_BifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;1_6.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_BifurGaussian(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;15_19.yaml&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"></highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>BifurGaussian.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Debug:<sp/>Reading<sp/>HepLike<sp/>data<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BifurGaussian[i].Read();</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"></highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;flav_prediction&gt;<sp/>prediction<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_Bs2phimumuBr_1_6,</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_Bs2phimumuBr_15_19</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>BifurGaussian.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theory<sp/>=<sp/>prediction[i].central_values.begin()-&gt;second;</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theory_variance<sp/>=<sp/>prediction[i].covariance.begin()-&gt;second.begin()-&gt;second;</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>BifurGaussian[i].GetLogLikelihood(theory,<sp/>theory_variance);</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"></highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;HEPLike_Bs2phimumuBr_LogLikelihood<sp/>result:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"></highlight></codeline>
<codeline lineno="2994"><highlight class="normal"></highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HEPLike_RK_LogLikelihood(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::HEPLike_RK_LogLikelihood;</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"></highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>inputfile<sp/>=<sp/><ref refid="FlavBit_8cpp_1a8312cda0f84ac464adf15fc3e52f140a" kindref="member">path_to_latest_heplike_data</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data/LHCb/RD/Rk/CERN-EP-2019-043.yaml&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>HepLike_default::HL_ProfLikelihood<sp/>ProfLikelihood(inputfile);</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"></highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Debug:<sp/>Reading<sp/>HepLike<sp/>data<sp/>file:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>inputfile<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProfLikelihood.Read();</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"></highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flav_prediction<sp/>prediction<sp/>=<sp/>*Dep::prediction_RK_LHCb_1p1_6;</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"></highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theory<sp/>=<sp/>prediction.central_values.begin()-&gt;second;</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theory_variance<sp/>=<sp/>prediction.covariance.begin()-&gt;second.begin()-&gt;second;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>ProfLikelihood.GetLogLikelihood(1.<sp/>+<sp/>theory,<sp/>theory_variance);</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;HEPLike_RK_LogLikelihood<sp/>result:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal"></highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HEPLike_RKstar_LogLikelihood_LHCb(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;result)</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"></highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Pipes::HEPLike_RKstar_LogLikelihood_LHCb;</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"></highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>inputfile<sp/>=<sp/><ref refid="FlavBit_8cpp_1a8312cda0f84ac464adf15fc3e52f140a" kindref="member">path_to_latest_heplike_data</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/data/LHCb/RD/RKstar/CERN-EP-2017-100_q2_&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;HepLike_default::HL_ProfLikelihood&gt;<sp/>ProfLikelihood<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_ProfLikelihood(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;0.045_1.1.yaml&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HepLike_default::HL_ProfLikelihood(inputfile<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;1.1_6.yaml&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"></highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ProfLikelihood.size();<sp/>i++)</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Debug:<sp/>Reading<sp/>HepLike<sp/>data<sp/>file<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProfLikelihood[i].Read();</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"></highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;flav_prediction&gt;<sp/>prediction<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_RKstar_LHCb_0p045_1p1,</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Dep::prediction_RKstar_LHCb_1p1_6</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"></highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ProfLikelihood.size();<sp/>i++)</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theory<sp/>=<sp/>prediction[i].central_values.begin()-&gt;second;</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theory_variance<sp/>=<sp/>prediction[i].covariance.begin()-&gt;second.begin()-&gt;second;</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>ProfLikelihood[i].GetLogLikelihood(1.<sp/>+<sp/>theory,<sp/>theory_variance);</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"></highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flav_debug)<sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;HEPLike_RKstar_LogLikelihood_LHCb<sp/>result:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"></highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"></highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3061"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/gambit_sphinx/gambit_sphinx/FlavBit/src/FlavBit.cpp"/>
  </compounddef>
</doxygen>
